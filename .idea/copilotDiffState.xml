<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/MainActivity.kt" />
              <option name="originalContent" value="package com.example.permitely&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.auth.AuthNavigation&#10;import com.example.permitely.ui.theme.PermitelyTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.permitely.ui.theme.Primary&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            PermitelyTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    PermitelyApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun PermitelyApp() {&#10;    // Get AuthViewModel to handle proper authentication state&#10;    val authViewModel = hiltViewModel&lt;com.example.permitely.ui.auth.AuthViewModel&gt;()&#10;&#10;    // Single source of truth for authentication state&#10;    var isAuthenticated by remember { mutableStateOf(false) }&#10;    var userInfo by remember { mutableStateOf&lt;com.example.permitely.data.storage.TokenStorage.UserInfo?&gt;(null) }&#10;    var currentScreen by remember { mutableStateOf(&quot;dashboard&quot;) }&#10;    var selectedVisitor by remember { mutableStateOf&lt;com.example.permitely.ui.host.Visitor?&gt;(null) }&#10;    var showSplash by remember { mutableStateOf(true) }&#10;    var isCheckingAuth by remember { mutableStateOf(true) } // Add this to track auth check&#10;&#10;    // Observe both authentication state and auth UI state&#10;    val authUiState by authViewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // FIXED: Check authentication state on app start&#10;    LaunchedEffect(Unit) {&#10;        // Observe authentication state from TokenStorage&#10;        authViewModel.isLoggedIn().collect { loggedIn -&gt;&#10;            println(&quot;DEBUG: isLoggedIn changed to: $loggedIn&quot;)&#10;            isAuthenticated = loggedIn&#10;            isCheckingAuth = false // Auth check completed&#10;&#10;            // When logged out, immediately clear all user data&#10;            if (!loggedIn) {&#10;                println(&quot;DEBUG: User logged out, clearing all user data&quot;)&#10;                currentScreen = &quot;dashboard&quot;&#10;                selectedVisitor = null&#10;                userInfo = null&#10;            }&#10;        }&#10;    }&#10;&#10;    // Separate LaunchedEffect for user info to avoid deadlock&#10;    LaunchedEffect(isAuthenticated) {&#10;        if (isAuthenticated) {&#10;            // Get fresh user data from TokenStorage first, then let individual screens&#10;            // fetch fresh API data as needed&#10;            authViewModel.getUserInfo().collect { info -&gt;&#10;                println(&quot;DEBUG: Fresh userInfo for logged in user: $info&quot;)&#10;                userInfo = info&#10;&#10;                // Force refresh of any cached data when switching users&#10;                if (info != null) {&#10;                    println(&quot;DEBUG: User switched to: ${info.name} (${info.email})&quot;)&#10;                }&#10;            }&#10;        } else {&#10;            // Clear user info when not authenticated&#10;            userInfo = null&#10;        }&#10;    }&#10;&#10;    // Handle successful login from AuthViewModel&#10;    LaunchedEffect(authUiState.isSuccess) {&#10;        if (authUiState.isSuccess) {&#10;            println(&quot;DEBUG: Login success detected, resetting AuthViewModel state&quot;)&#10;            // Reset the AuthViewModel state after successful login&#10;            authViewModel.resetState()&#10;        }&#10;    }&#10;&#10;    // Proper logout function that clears all stored data&#10;    fun performLogout() {&#10;        println(&quot;DEBUG: Performing logout&quot;)&#10;        // Clear local state immediately&#10;        isAuthenticated = false&#10;        currentScreen = &quot;dashboard&quot;&#10;        selectedVisitor = null&#10;        userInfo = null&#10;        // Then call backend logout&#10;        authViewModel.logout()&#10;    }&#10;&#10;    // Show splash screen first, then check if we need to show loading&#10;    if (showSplash) {&#10;        // Show splash screen first&#10;        com.example.permitely.ui.splash.SplashScreen(&#10;            onSplashFinished = { showSplash = false }&#10;        )&#10;    } else if (isCheckingAuth) {&#10;        // Show loading while checking authentication&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator(color = Primary)&#10;        }&#10;    } else if (isAuthenticated) {&#10;        // Show appropriate dashboard based on user type&#10;        val userType = userInfo?.role ?: &quot;host&quot;&#10;&#10;        // Debug logging to understand what's happening&#10;        println(&quot;DEBUG: User authenticated - userInfo: $userInfo&quot;)&#10;        println(&quot;DEBUG: User role: ${userInfo?.role}&quot;)&#10;        println(&quot;DEBUG: Resolved userType: $userType&quot;)&#10;&#10;        when (userType.lowercase()) {&#10;            &quot;host&quot;, &quot;&quot; -&gt; {&#10;                // Show host dashboard for both &quot;host&quot; role and empty/null role&#10;                when (currentScreen) {&#10;                    &quot;dashboard&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostDashboardScreen(&#10;                            onCreateVisitor = { currentScreen = &quot;create_visitor&quot; },&#10;                            onViewAllVisitors = { currentScreen = &quot;visitors_list&quot; },&#10;                            onViewNotifications = { currentScreen = &quot;notifications&quot; },&#10;                            onViewProfile = { currentScreen = &quot;profile&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;create_visitor&quot; -&gt; {&#10;                        // Use a unique key to force new ViewModel instance each time&#10;                        key(currentScreen + System.currentTimeMillis()) {&#10;                            com.example.permitely.ui.host.CreateVisitorScreen(&#10;                                onNavigateBack = {&#10;                                    currentScreen = &quot;dashboard&quot;&#10;                                },&#10;                                onVisitorCreated = { visitorData -&gt;&#10;                                    try {&#10;                                        // Store the created visitor data and navigate to details&#10;                                        selectedVisitor = com.example.permitely.ui.host.Visitor(&#10;                                            id = visitorData.visitor.visitorId.toString(),&#10;                                            name = visitorData.visitor.name,&#10;                                            email = visitorData.visitor.email,&#10;                                            phone = visitorData.visitor.phoneNumber,&#10;                                            purpose = visitorData.visitor.purposeOfVisit,&#10;                                            date = visitorData.visitor.createdAt.split(&quot;T&quot;)[0],&#10;                                            time = visitorData.visitor.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0],&#10;                                            status = when(visitorData.visitor.status) {&#10;                                                &quot;PENDING&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                                &quot;APPROVED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.APPROVED&#10;                                                &quot;REJECTED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.REJECTED&#10;                                                &quot;EXPIRED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.EXPIRED&#10;                                                else -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                            },&#10;                                            createdAt = visitorData.visitor.createdAt,&#10;                                            hasQRCode = visitorData.pass != null,&#10;                                            qrCodeUrl = visitorData.pass?.qrCodeUrl,&#10;                                            passId = visitorData.pass?.passId?.toString(),&#10;                                            expiryTime = visitorData.pass?.expiryTime&#10;                                        )&#10;                                        currentScreen = &quot;visitor_details&quot;&#10;                                    } catch (e: Exception) {&#10;                                        println(&quot;Error processing visitor data: ${e.message}&quot;)&#10;                                        e.printStackTrace()&#10;                                        // On error, just go back to dashboard&#10;                                        currentScreen = &quot;dashboard&quot;&#10;                                    }&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                    &quot;visitors_list&quot; -&gt; {&#10;                        com.example.permitely.ui.host.VisitorsListScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onVisitorClick = { visitor -&gt;&#10;                                selectedVisitor = visitor&#10;                                currentScreen = &quot;visitor_details&quot;&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;visitor_details&quot; -&gt; {&#10;                        selectedVisitor?.let { visitor -&gt;&#10;                            com.example.permitely.ui.host.VisitorDetailsScreen(&#10;                                visitor = visitor,&#10;                                onNavigateBack = { currentScreen = &quot;visitors_list&quot; },&#10;                                onEditVisitor = { visitorToEdit -&gt;&#10;                                    selectedVisitor = visitorToEdit&#10;                                    // TODO: Navigate to edit screen when implemented&#10;                                    // currentScreen = &quot;edit_visitor&quot;&#10;                                },&#10;                                onDeleteVisitor = { visitorId -&gt;&#10;                                    // TODO: Implement visitor deletion logic&#10;                                    currentScreen = &quot;visitors_list&quot;&#10;                                },&#10;                                onGeneratePass = { visitorId -&gt;&#10;                                    // TODO: Implement pass generation logic&#10;                                },&#10;                                onShareQRCode = {&#10;                                    // TODO: Implement QR code sharing logic&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                    &quot;notifications&quot; -&gt; {&#10;                        com.example.permitely.ui.host.NotificationsScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; }&#10;                        )&#10;                    }&#10;                    &quot;profile&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostProfileScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            &quot;admin&quot; -&gt; {&#10;                // TODO: Implement admin dashboard when available&#10;                // For now, show host dashboard&#10;                when (currentScreen) {&#10;                    &quot;dashboard&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostDashboardScreen(&#10;                            onCreateVisitor = { currentScreen = &quot;create_visitor&quot; },&#10;                            onViewAllVisitors = { currentScreen = &quot;visitors_list&quot; },&#10;                            onViewNotifications = { currentScreen = &quot;notifications&quot; },&#10;                            onViewProfile = { currentScreen = &quot;profile&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;create_visitor&quot; -&gt; {&#10;                        com.example.permitely.ui.host.CreateVisitorScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onVisitorCreated = { visitorData -&gt;&#10;                                // Store the created visitor data and navigate to details&#10;                                selectedVisitor = com.example.permitely.ui.host.Visitor(&#10;                                    id = visitorData.visitor.visitorId.toString(), // Convert Int to String&#10;                                    name = visitorData.visitor.name,&#10;                                    email = visitorData.visitor.email,&#10;                                    phone = visitorData.visitor.phoneNumber, // phoneNumber -&gt; phone&#10;                                    purpose = visitorData.visitor.purposeOfVisit, // purposeOfVisit -&gt; purpose&#10;                                    date = visitorData.visitor.createdAt.split(&quot;T&quot;)[0], // Extract date part&#10;                                    time = visitorData.visitor.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0], // Extract time part&#10;                                    status = when(visitorData.visitor.status) {&#10;                                        &quot;PENDING&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                        &quot;APPROVED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.APPROVED&#10;                                        &quot;REJECTED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.REJECTED&#10;                                        &quot;EXPIRED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.EXPIRED&#10;                                        else -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                    },&#10;                                    createdAt = visitorData.visitor.createdAt,&#10;                                    // Map QR code and pass information&#10;                                    hasQRCode = visitorData.pass != null,&#10;                                    qrCodeUrl = visitorData.pass?.qrCodeUrl,&#10;                                    passId = visitorData.pass?.passId?.toString(),&#10;                                    expiryTime = visitorData.pass?.expiryTime&#10;                                )&#10;                                currentScreen = &quot;visitor_details&quot;&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;visitors_list&quot; -&gt; {&#10;                        com.example.permitely.ui.host.VisitorsListScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onVisitorClick = { visitor -&gt;&#10;                                selectedVisitor = visitor&#10;                                currentScreen = &quot;visitor_details&quot;&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;visitor_details&quot; -&gt; {&#10;                        selectedVisitor?.let { visitor -&gt;&#10;                            com.example.permitely.ui.host.VisitorDetailsScreen(&#10;                                visitor = visitor,&#10;                                onNavigateBack = { currentScreen = &quot;visitors_list&quot; },&#10;                                onEditVisitor = { visitorToEdit -&gt;&#10;                                    selectedVisitor = visitorToEdit&#10;                                    // TODO: Navigate to edit screen when implemented&#10;                                    // currentScreen = &quot;edit_visitor&quot;&#10;                                },&#10;                                onDeleteVisitor = { visitorId -&gt;&#10;                                    // TODO: Implement visitor deletion logic&#10;                                    currentScreen = &quot;visitors_list&quot;&#10;                                },&#10;                                onGeneratePass = { visitorId -&gt;&#10;                                    // TODO: Implement pass generation logic&#10;                                },&#10;                                onShareQRCode = {&#10;                                    // TODO: Implement QR code sharing logic&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                    &quot;notifications&quot; -&gt; {&#10;                        com.example.permitely.ui.host.NotificationsScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; }&#10;                        )&#10;                    }&#10;                    &quot;profile&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostProfileScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {&#10;                // Show host dashboard as default fallback instead of WelcomeScreen&#10;                println(&quot;DEBUG: Unknown role '$userType', defaulting to host dashboard&quot;)&#10;                when (currentScreen) {&#10;                    &quot;dashboard&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostDashboardScreen(&#10;                            onCreateVisitor = { currentScreen = &quot;create_visitor&quot; },&#10;                            onViewAllVisitors = { currentScreen = &quot;visitors_list&quot; },&#10;                            onViewNotifications = { currentScreen = &quot;notifications&quot; },&#10;                            onViewProfile = { currentScreen = &quot;profile&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;create_visitor&quot; -&gt; {&#10;                        com.example.permitely.ui.host.CreateVisitorScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onVisitorCreated = { visitorData -&gt;&#10;                                // Store the created visitor data and navigate to details&#10;                                selectedVisitor = com.example.permitely.ui.host.Visitor(&#10;                                    id = visitorData.visitor.visitorId.toString(), // Convert Int to String&#10;                                    name = visitorData.visitor.name,&#10;                                    email = visitorData.visitor.email,&#10;                                    phone = visitorData.visitor.phoneNumber, // phoneNumber -&gt; phone&#10;                                    purpose = visitorData.visitor.purposeOfVisit, // purposeOfVisit -&gt; purpose&#10;                                    date = visitorData.visitor.createdAt.split(&quot;T&quot;)[0], // Extract date part&#10;                                    time = visitorData.visitor.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0], // Extract time part&#10;                                    status = when(visitorData.visitor.status) {&#10;                                        &quot;PENDING&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                        &quot;APPROVED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.APPROVED&#10;                                        &quot;REJECTED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.REJECTED&#10;                                        &quot;EXPIRED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.EXPIRED&#10;                                        else -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                    },&#10;                                    createdAt = visitorData.visitor.createdAt,&#10;                                    // Map QR code and pass information&#10;                                    hasQRCode = visitorData.pass != null,&#10;                                    qrCodeUrl = visitorData.pass?.qrCodeUrl,&#10;                                    passId = visitorData.pass?.passId?.toString(),&#10;                                    expiryTime = visitorData.pass?.expiryTime&#10;                                )&#10;                                currentScreen = &quot;visitor_details&quot;&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;visitors_list&quot; -&gt; {&#10;                        com.example.permitely.ui.host.VisitorsListScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onVisitorClick = { visitor -&gt;&#10;                                selectedVisitor = visitor&#10;                                currentScreen = &quot;visitor_details&quot;&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;visitor_details&quot; -&gt; {&#10;                        selectedVisitor?.let { visitor -&gt;&#10;                            com.example.permitely.ui.host.VisitorDetailsScreen(&#10;                                visitor = visitor,&#10;                                onNavigateBack = { currentScreen = &quot;visitors_list&quot; },&#10;                                onEditVisitor = { visitorToEdit -&gt;&#10;                                    selectedVisitor = visitorToEdit&#10;                                    // TODO: Navigate to edit screen when implemented&#10;                                    // currentScreen = &quot;edit_visitor&quot;&#10;                                },&#10;                                onDeleteVisitor = { visitorId -&gt;&#10;                                    // TODO: Implement visitor deletion logic&#10;                                    currentScreen = &quot;visitors_list&quot;&#10;                                },&#10;                                onGeneratePass = { visitorId -&gt;&#10;                                    // TODO: Implement pass generation logic&#10;                                },&#10;                                onShareQRCode = {&#10;                                    // TODO: Implement QR code sharing logic&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                    &quot;notifications&quot; -&gt; {&#10;                        com.example.permitely.ui.host.NotificationsScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; }&#10;                        )&#10;                    }&#10;                    &quot;profile&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostProfileScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    } else {&#10;        // Show authentication screens only after confirming user is not logged in&#10;        AuthNavigation(&#10;            onAuthSuccess = {&#10;                // Don't manually set isAuthenticated = true, let the Flow handle it&#10;                currentScreen = &quot;dashboard&quot;&#10;            }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely&#13;&#10;&#13;&#10;import android.os.Bundle&#13;&#10;import androidx.activity.ComponentActivity&#13;&#10;import androidx.activity.compose.setContent&#13;&#10;import androidx.activity.enableEdgeToEdge&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.Surface&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#13;&#10;import androidx.navigation.compose.rememberNavController&#13;&#10;import com.example.permitely.ui.auth.AuthNavigation&#13;&#10;import com.example.permitely.ui.main.MainNavigation&#13;&#10;import com.example.permitely.ui.theme.PermitelyTheme&#13;&#10;import dagger.hilt.android.AndroidEntryPoint&#13;&#10;import androidx.compose.runtime.LaunchedEffect&#13;&#10;import androidx.compose.material3.CircularProgressIndicator&#13;&#10;import com.example.permitely.ui.theme.Primary&#13;&#10;&#13;&#10;@AndroidEntryPoint&#13;&#10;class MainActivity : ComponentActivity() {&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        enableEdgeToEdge()&#13;&#10;        setContent {&#13;&#10;            PermitelyTheme {&#13;&#10;                Surface(&#13;&#10;                    modifier = Modifier.fillMaxSize(),&#13;&#10;                    color = MaterialTheme.colorScheme.background&#13;&#10;                ) {&#13;&#10;                    PermitelyApp()&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;private fun PermitelyApp() {&#13;&#10;    // Get AuthViewModel to handle proper authentication state&#13;&#10;    val authViewModel = hiltViewModel&lt;com.example.permitely.ui.auth.AuthViewModel&gt;()&#13;&#10;&#13;&#10;    // Navigation controllers&#13;&#10;    val authNavController = rememberNavController()&#13;&#10;    val mainNavController = rememberNavController()&#13;&#10;&#13;&#10;    // Authentication state&#13;&#10;    var isAuthenticated by remember { mutableStateOf(false) }&#13;&#10;    var userInfo by remember { mutableStateOf&lt;com.example.permitely.data.storage.TokenStorage.UserInfo?&gt;(null) }&#13;&#10;    var showSplash by remember { mutableStateOf(true) }&#13;&#10;    var isCheckingAuth by remember { mutableStateOf(true) }&#13;&#10;&#13;&#10;    // Observe authentication state and auth UI state&#13;&#10;    val authUiState by authViewModel.uiState.collectAsStateWithLifecycle()&#13;&#10;&#13;&#10;    // Check authentication state on app start&#13;&#10;    LaunchedEffect(Unit) {&#13;&#10;        authViewModel.isLoggedIn().collect { loggedIn -&gt;&#13;&#10;            println(&quot;DEBUG: isLoggedIn changed to: $loggedIn&quot;)&#13;&#10;            isAuthenticated = loggedIn&#13;&#10;            isCheckingAuth = false&#13;&#10;&#13;&#10;            // When logged out, immediately clear all user data&#13;&#10;            if (!loggedIn) {&#13;&#10;                println(&quot;DEBUG: User logged out, clearing all user data&quot;)&#13;&#10;                userInfo = null&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Get user info when authenticated&#13;&#10;    LaunchedEffect(isAuthenticated) {&#13;&#10;        if (isAuthenticated) {&#13;&#10;            authViewModel.getUserInfo().collect { info -&gt;&#13;&#10;                println(&quot;DEBUG: Fresh userInfo for logged in user: $info&quot;)&#13;&#10;                userInfo = info&#13;&#10;&#13;&#10;                if (info != null) {&#13;&#10;                    println(&quot;DEBUG: User switched to: ${info.name} (${info.email})&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            userInfo = null&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Handle successful login from AuthViewModel&#13;&#10;    LaunchedEffect(authUiState.isSuccess) {&#13;&#10;        if (authUiState.isSuccess) {&#13;&#10;            println(&quot;DEBUG: Login success detected, resetting AuthViewModel state&quot;)&#13;&#10;            authViewModel.resetState()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Proper logout function that clears all stored data&#13;&#10;    fun performLogout() {&#13;&#10;        println(&quot;DEBUG: Performing logout&quot;)&#13;&#10;        // Clear local state immediately&#13;&#10;        isAuthenticated = false&#13;&#10;        userInfo = null&#13;&#10;        // Then call backend logout&#13;&#10;        authViewModel.logout()&#13;&#10;    }&#13;&#10;&#13;&#10;    // Show splash screen first, then check if we need to show loading&#13;&#10;    if (showSplash) {&#13;&#10;        com.example.permitely.ui.splash.SplashScreen(&#13;&#10;            onSplashFinished = { showSplash = false }&#13;&#10;        )&#13;&#10;    } else if (isCheckingAuth) {&#13;&#10;        // Show loading while checking authentication&#13;&#10;        Box(&#13;&#10;            modifier = Modifier.fillMaxSize(),&#13;&#10;            contentAlignment = Alignment.Center&#13;&#10;        ) {&#13;&#10;            CircularProgressIndicator(color = Primary)&#13;&#10;        }&#13;&#10;    } else if (isAuthenticated) {&#13;&#10;        // Show main app navigation with proper back button handling&#13;&#10;        MainNavigation(&#13;&#10;            navController = mainNavController,&#13;&#10;            userInfo = userInfo,&#13;&#10;            onLogout = ::performLogout&#13;&#10;        )&#13;&#10;    } else {&#13;&#10;        // Show authentication flow&#13;&#10;        AuthNavigation(&#13;&#10;            navController = authNavController,&#13;&#10;            onAuthSuccess = {&#13;&#10;                // Authentication successful - the LaunchedEffect above will handle the state change&#13;&#10;                println(&quot;DEBUG: Authentication successful&quot;)&#13;&#10;            }&#13;&#10;        )&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/models/VisitorModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/models/VisitorModels.kt" />
              <option name="originalContent" value="package com.example.permitely.data.models&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;/**&#10; * Create visitor request model&#10; */&#10;data class CreateVisitorRequest(&#10;    val name: String,&#10;    @SerializedName(&quot;phone_number&quot;) val phoneNumber: String,&#10;    val email: String,&#10;    @SerializedName(&quot;purpose_of_visit&quot;) val purposeOfVisit: String,&#10;    @SerializedName(&quot;expiry_time&quot;) val expiryTime: String? = null // Optional ISO string format&#10;)&#10;&#10;/**&#10; * Visitor data model from API response - updated to match actual API structure&#10; */&#10;data class VisitorData(&#10;    @SerializedName(&quot;visitor_id&quot;) val visitorId: Int,&#10;    val name: String,&#10;    @SerializedName(&quot;phone_number&quot;) val phoneNumber: String,&#10;    val email: String,&#10;    @SerializedName(&quot;purpose_of_visit&quot;) val purposeOfVisit: String,&#10;    val status: String, // PENDING, APPROVED, REJECTED, EXPIRED&#10;    @SerializedName(&quot;entry_time&quot;) val entryTime: String?,&#10;    @SerializedName(&quot;exit_time&quot;) val exitTime: String?,&#10;    @SerializedName(&quot;created_at&quot;) val createdAt: String,&#10;    val passes: List&lt;PassData&gt; = emptyList() // Array of passes, newest first&#10;)&#10;&#10;/**&#10; * Pass data model from API response - updated structure&#10; */&#10;data class PassData(&#10;    @SerializedName(&quot;pass_id&quot;) val passId: Int,&#10;    @SerializedName(&quot;created_at&quot;) val createdAt: String,&#10;    @SerializedName(&quot;expiry_time&quot;) val expiryTime: String,&#10;    @SerializedName(&quot;approved_at&quot;) val approvedAt: String,&#10;    @SerializedName(&quot;qr_code_data&quot;) val qrCodeData: String // This is the QR code URL&#10;)&#10;&#10;/**&#10; * Create visitor response data&#10; */&#10;data class CreateVisitorResponseData(&#10;    val visitor: VisitorData,&#10;    val pass: PassData?, // Only present if expiry_time was provided&#10;    val message: String&#10;)&#10;&#10;/**&#10; * Create visitor API response wrapper&#10; */&#10;data class CreateVisitorResponse(&#10;    val status: String,&#10;    val data: CreateVisitorResponseData? = null,&#10;    val message: String? = null&#10;)&#10;&#10;/**&#10; * Get all visitors API response wrapper&#10; */&#10;data class GetAllVisitorsResponse(&#10;    val status: String,&#10;    val results: Int? = null,&#10;    val data: GetAllVisitorsData? = null,&#10;    val message: String? = null&#10;)&#10;&#10;/**&#10; * Get all visitors response data&#10; */&#10;data class GetAllVisitorsData(&#10;    val visitors: List&lt;VisitorData&gt;&#10;)&#10;&#10;/**&#10; * Get visitor by ID API response wrapper&#10; */&#10;data class GetVisitorByIdResponse(&#10;    val status: String,&#10;    val data: GetVisitorByIdData? = null,&#10;    val message: String? = null&#10;)&#10;&#10;/**&#10; * Get visitor by ID response data - updated to match API structure&#10; */&#10;data class GetVisitorByIdData(&#10;    val visitor: VisitorData // Visitor already contains passes array&#10;)&#10;&#10;/**&#10; * Get recent visitors API response wrapper&#10; */&#10;data class GetRecentVisitorsResponse(&#10;    val success: Boolean,&#10;    val data: List&lt;VisitorData&gt;? = null,&#10;    val message: String? = null&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.permitely.data.models&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;/**&#10; * Create visitor request model&#10; */&#10;data class CreateVisitorRequest(&#10;    val name: String,&#10;    @SerializedName(&quot;phone_number&quot;) val phoneNumber: String,&#10;    val email: String,&#10;    @SerializedName(&quot;purpose_of_visit&quot;) val purposeOfVisit: String,&#10;    @SerializedName(&quot;expiry_time&quot;) val expiryTime: String? = null // Optional ISO string format&#10;)&#10;&#10;/**&#10; * Visitor data model from API response - updated to match actual API structure&#10; */&#10;data class VisitorData(&#10;    @SerializedName(&quot;visitor_id&quot;) val visitorId: Int,&#10;    val name: String,&#10;    @SerializedName(&quot;phone_number&quot;) val phoneNumber: String,&#10;    val email: String,&#10;    @SerializedName(&quot;purpose_of_visit&quot;) val purposeOfVisit: String,&#10;    val status: String, // PENDING, APPROVED, REJECTED, EXPIRED&#10;    @SerializedName(&quot;entry_time&quot;) val entryTime: String?,&#10;    @SerializedName(&quot;exit_time&quot;) val exitTime: String?,&#10;    @SerializedName(&quot;created_at&quot;) val createdAt: String,&#10;    val passes: List&lt;PassData&gt; = emptyList() // Array of passes, newest first&#10;)&#10;&#10;/**&#10; * Pass data model from API response - updated structure&#10; */&#10;data class PassData(&#10;    @SerializedName(&quot;pass_id&quot;) val passId: Int,&#10;    @SerializedName(&quot;created_at&quot;) val createdAt: String,&#10;    @SerializedName(&quot;expiry_time&quot;) val expiryTime: String,&#10;    @SerializedName(&quot;approved_at&quot;) val approvedAt: String,&#10;    @SerializedName(&quot;qr_code_data&quot;) val qrCodeData: String // This is the QR code URL&#10;)&#10;&#10;/**&#10; * Create visitor response data&#10; */&#10;data class CreateVisitorResponseData(&#10;    val visitor: VisitorData,&#10;    val pass: PassData?, // Only present if expiry_time was provided&#10;    val message: String&#10;)&#10;&#10;/**&#10; * Create visitor API response wrapper&#10; */&#10;data class CreateVisitorResponse(&#10;    val status: String,&#10;    val data: CreateVisitorResponseData? = null,&#10;    val message: String? = null&#10;)&#10;&#10;/**&#10; * Get all visitors API response wrapper&#10; */&#10;data class GetAllVisitorsResponse(&#10;    val status: String,&#10;    val results: Int? = null,&#10;    val data: GetAllVisitorsData? = null,&#10;    val message: String? = null&#10;)&#10;&#10;/**&#10; * Get all visitors response data&#10; */&#10;data class GetAllVisitorsData(&#10;    val visitors: List&lt;VisitorData&gt;&#10;)&#10;&#10;/**&#10; * Get visitor by ID API response wrapper&#10; */&#10;data class GetVisitorByIdResponse(&#10;    val status: String,&#10;    val data: GetVisitorByIdData? = null,&#10;    val message: String? = null&#10;)&#10;&#10;/**&#10; * Get visitor by ID response data - updated to match API structure&#10; */&#10;data class GetVisitorByIdData(&#10;    val visitor: VisitorData // Visitor already contains passes array&#10;)&#10;&#10;/**&#10; * Get recent visitors API response wrapper&#10; */&#10;data class GetRecentVisitorsResponse(&#10;    val success: Boolean,&#10;    val data: List&lt;VisitorData&gt;? = null,&#10;    val message: String? = null&#10;)&#10;&#10;/**&#10; * Get notifications API response wrapper&#10; */&#10;data class GetNotificationsResponse(&#10;    val status: String,&#10;    val results: Int? = null,&#10;    val data: GetNotificationsData? = null,&#10;    val message: String? = null&#10;)&#10;&#10;/**&#10; * Get notifications response data&#10; */&#10;data class GetNotificationsData(&#10;    val notifications: List&lt;NotificationData&gt;&#10;)&#10;&#10;/**&#10; * Notification data model from API response&#10; * Only includes fields needed for UI: name, created_at, status, content&#10; */&#10;data class NotificationData(&#10;    @SerializedName(&quot;notification_id&quot;) val notificationId: Int,&#10;    val content: String,&#10;    @SerializedName(&quot;created_at&quot;) val createdAt: String,&#10;    val visitor: VisitorNotificationData?&#10;)&#10;&#10;/**&#10; * Visitor data in notification (simplified)&#10; */&#10;data class VisitorNotificationData(&#10;    val name: String,&#10;    val status: String // PENDING, APPROVED, REJECTED, EXPIRED&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/network/VisitorApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/network/VisitorApiService.kt" />
              <option name="originalContent" value="package com.example.permitely.data.network&#10;&#10;import com.example.permitely.data.models.CreateVisitorRequest&#10;import com.example.permitely.data.models.CreateVisitorResponse&#10;import com.example.permitely.data.models.GetAllVisitorsResponse&#10;import com.example.permitely.data.models.GetVisitorByIdResponse&#10;import com.example.permitely.data.models.GetRecentVisitorsResponse&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;/**&#10; * Retrofit API service interface for visitor endpoints&#10; */&#10;interface VisitorApiService {&#10;&#10;    /**&#10;     * Create a new visitor&#10;     * POST /api/visitors/&#10;     */&#10;    @POST(&quot;api/visitors/&quot;)&#10;    suspend fun createVisitor(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body request: CreateVisitorRequest&#10;    ): Response&lt;CreateVisitorResponse&gt;&#10;&#10;    /**&#10;     * Get all visitors for the authenticated host&#10;     * GET /api/visitors&#10;     * @param status Optional filter by visitor status (PENDING, APPROVED, REJECTED, EXPIRED)&#10;     */&#10;    @GET(&quot;api/visitors&quot;)&#10;    suspend fun getAllVisitors(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Query(&quot;status&quot;) status: String? = null&#10;    ): Response&lt;GetAllVisitorsResponse&gt;&#10;&#10;    /**&#10;     * Get visitor details by ID&#10;     * GET /api/visitors/{id}&#10;     */&#10;    @GET(&quot;api/visitors/{id}&quot;)&#10;    suspend fun getVisitorById(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;id&quot;) visitorId: String&#10;    ): Response&lt;GetVisitorByIdResponse&gt;&#10;&#10;    /**&#10;     * Get recent visitors for the authenticated host&#10;     * GET /host/recent-visitors&#10;     */&#10;    @GET(&quot;api/users/recent-visitors&quot;)&#10;    suspend fun getRecentVisitors(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;GetRecentVisitorsResponse&gt;&#10;&#10;    // TODO: Add other visitor endpoints as needed&#10;    // PUT /api/visitors/{id} - Update visitor&#10;    // DELETE /api/visitors/{id} - Delete visitor&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.data.network&#10;&#10;import com.example.permitely.data.models.CreateVisitorRequest&#10;import com.example.permitely.data.models.CreateVisitorResponse&#10;import com.example.permitely.data.models.GetAllVisitorsResponse&#10;import com.example.permitely.data.models.GetVisitorByIdResponse&#10;import com.example.permitely.data.models.GetRecentVisitorsResponse&#10;import com.example.permitely.data.models.GetNotificationsResponse&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;/**&#10; * Retrofit API service interface for visitor endpoints&#10; */&#10;interface VisitorApiService {&#10;&#10;    /**&#10;     * Create a new visitor&#10;     * POST /api/visitors/&#10;     */&#10;    @POST(&quot;api/visitors/&quot;)&#10;    suspend fun createVisitor(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body request: CreateVisitorRequest&#10;    ): Response&lt;CreateVisitorResponse&gt;&#10;&#10;    /**&#10;     * Get all visitors for the authenticated host&#10;     * GET /api/visitors&#10;     * @param status Optional filter by visitor status (PENDING, APPROVED, REJECTED, EXPIRED)&#10;     */&#10;    @GET(&quot;api/visitors&quot;)&#10;    suspend fun getAllVisitors(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Query(&quot;status&quot;) status: String? = null&#10;    ): Response&lt;GetAllVisitorsResponse&gt;&#10;&#10;    /**&#10;     * Get visitor details by ID&#10;     * GET /api/visitors/{id}&#10;     */&#10;    @GET(&quot;api/visitors/{id}&quot;)&#10;    suspend fun getVisitorById(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Path(&quot;id&quot;) visitorId: String&#10;    ): Response&lt;GetVisitorByIdResponse&gt;&#10;&#10;    /**&#10;     * Get recent visitors for the authenticated host&#10;     * GET /host/recent-visitors&#10;     */&#10;    @GET(&quot;api/users/recent-visitors&quot;)&#10;    suspend fun getRecentVisitors(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;GetRecentVisitorsResponse&gt;&#10;&#10;    /**&#10;     * Get notifications for the authenticated user&#10;     * GET /api/notifications&#10;     */&#10;    @GET(&quot;api/notifications&quot;)&#10;    suspend fun getNotifications(&#10;        @Header(&quot;Authorization&quot;) token: String&#10;    ): Response&lt;GetNotificationsResponse&gt;&#10;&#10;    // TODO: Add other visitor endpoints as needed&#10;    // PUT /api/visitors/{id} - Update visitor&#10;    // DELETE /api/visitors/{id} - Delete visitor&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/repository/VisitorRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/repository/VisitorRepository.kt" />
              <option name="originalContent" value="package com.example.permitely.data.repository&#10;&#10;import com.example.permitely.data.models.CreateVisitorRequest&#10;import com.example.permitely.data.models.CreateVisitorResponseData&#10;import com.example.permitely.data.models.VisitorData&#10;import com.example.permitely.data.models.GetVisitorByIdData&#10;import com.example.permitely.data.network.VisitorApiService&#10;import com.example.permitely.data.storage.TokenStorage&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import kotlinx.coroutines.flow.first&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Repository for visitor-related operations&#10; * Handles visitor creation, management, and API communications&#10; */&#10;@Singleton&#10;class VisitorRepository @Inject constructor(&#10;    private val visitorApiService: VisitorApiService,&#10;    private val tokenStorage: TokenStorage&#10;) {&#10;&#10;    /**&#10;     * Create a new visitor&#10;     * @param request CreateVisitorRequest containing visitor details&#10;     * @return Flow&lt;Result&lt;CreateVisitorResponseData&gt;&gt; - Flow containing success/failure results&#10;     */&#10;    fun createVisitor(request: CreateVisitorRequest): Flow&lt;Result&lt;CreateVisitorResponseData&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Creating visitor - Name: ${request.name}, Email: ${request.email}&quot;)&#10;&#10;            val response = visitorApiService.createVisitor(&quot;Bearer $token&quot;, request)&#10;&#10;            println(&quot;DEBUG: Create visitor API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Create visitor API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Create visitor response body: $body&quot;)&#10;&#10;                if (body?.status == &quot;success&quot; &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Visitor created successfully - ID: ${body.data.visitor.visitorId}&quot;)&#10;                    emit(Result.success(body.data))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to create visitor&quot;&#10;                    println(&quot;DEBUG: Create visitor failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                // Handle HTTP error responses - Parse JSON error response from backend&#10;                val errorBody = response.errorBody()?.string()&#10;                println(&quot;DEBUG: Create visitor HTTP error ${response.code()}: $errorBody&quot;)&#10;&#10;                // Try to parse the JSON error response from backend&#10;                val errorMessage = try {&#10;                    if (errorBody != null) {&#10;                        // Parse the JSON error response: {&quot;status&quot;: &quot;error&quot;, &quot;message&quot;: &quot;error message&quot;}&#10;                        val gson = com.google.gson.Gson()&#10;                        val errorResponse = gson.fromJson(errorBody, com.google.gson.JsonObject::class.java)&#10;&#10;                        // Extract the message field from the error response&#10;                        val backendMessage = errorResponse.get(&quot;message&quot;)?.asString&#10;&#10;                        if (!backendMessage.isNullOrEmpty()) {&#10;                            backendMessage // Use the exact error message from backend&#10;                        } else {&#10;                            // Fallback to HTTP status code based messages&#10;                            when (response.code()) {&#10;                                400 -&gt; &quot;Invalid visitor information provided&quot;&#10;                                409 -&gt; &quot;This visitor already has an active or pending visit&quot;&#10;                                401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                                403 -&gt; &quot;You don't have permission to create visitors&quot;&#10;                                500 -&gt; &quot;Server error. Please try again later&quot;&#10;                                else -&gt; &quot;Failed to create visitor. Please try again&quot;&#10;                            }&#10;                        }&#10;                    } else {&#10;                        &quot;Failed to create visitor. Please try again&quot;&#10;                    }&#10;                } catch (jsonException: Exception) {&#10;                    println(&quot;DEBUG: Failed to parse JSON error response: ${jsonException.message}&quot;)&#10;                    // Fallback to HTTP status code based messages if JSON parsing fails&#10;                    when (response.code()) {&#10;                        400 -&gt; &quot;Invalid visitor information provided&quot;&#10;                        409 -&gt; &quot;This visitor already has an active or pending visit&quot;&#10;                        401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                        403 -&gt; &quot;You don't have permission to create visitors&quot;&#10;                        500 -&gt; &quot;Server error. Please try again later&quot;&#10;                        else -&gt; &quot;Failed to create visitor. Please try again&quot;&#10;                    }&#10;                }&#10;&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Create visitor exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                is com.google.gson.JsonSyntaxException -&gt; &quot;Invalid response format from server&quot;&#10;                is com.google.gson.JsonParseException -&gt; &quot;Failed to parse server response&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all visitors for the authenticated host&#10;     * @param status Optional filter by visitor status&#10;     * @return Flow&lt;Result&lt;List&lt;VisitorData&gt;&gt;&gt; - Flow containing list of visitors or error&#10;     */&#10;    fun getAllVisitors(status: String? = null): Flow&lt;Result&lt;List&lt;VisitorData&gt;&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Getting all visitors - Status filter: $status&quot;)&#10;&#10;            val response = visitorApiService.getAllVisitors(&quot;Bearer $token&quot;, status)&#10;&#10;            println(&quot;DEBUG: Get visitors API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Get visitors API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Get visitors response body: $body&quot;)&#10;&#10;                if (body?.status == &quot;success&quot; &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Found ${body.data.visitors.size} visitors&quot;)&#10;                    emit(Result.success(body.data.visitors))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to fetch visitors&quot;&#10;                    println(&quot;DEBUG: Get visitors failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                // Handle HTTP error responses - Parse JSON error response from backend&#10;                val errorBody = response.errorBody()?.string()&#10;                println(&quot;DEBUG: Get visitors HTTP error ${response.code()}: $errorBody&quot;)&#10;&#10;                // Try to parse the JSON error response from backend&#10;                val errorMessage = try {&#10;                    if (errorBody != null) {&#10;                        // Parse the JSON error response: {&quot;status&quot;: &quot;error&quot;, &quot;message&quot;: &quot;error message&quot;}&#10;                        val gson = com.google.gson.Gson()&#10;                        val errorResponse = gson.fromJson(errorBody, com.google.gson.JsonObject::class.java)&#10;&#10;                        // Extract the message field from the error response&#10;                        val backendMessage = errorResponse.get(&quot;message&quot;)?.asString&#10;&#10;                        if (!backendMessage.isNullOrEmpty()) {&#10;                            backendMessage // Use the exact error message from backend&#10;                        } else {&#10;                            // Fallback to HTTP status code based messages&#10;                            when (response.code()) {&#10;                                400 -&gt; &quot;Invalid request&quot;&#10;                                401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                                403 -&gt; &quot;You don't have permission to view visitors&quot;&#10;                                404 -&gt; &quot;No visitors found&quot;&#10;                                500 -&gt; &quot;Server error. Please try again later&quot;&#10;                                else -&gt; &quot;Failed to fetch visitors. Please try again&quot;&#10;                            }&#10;                        }&#10;                    } else {&#10;                        &quot;Failed to fetch visitors. Please try again&quot;&#10;                    }&#10;                } catch (jsonException: Exception) {&#10;                    println(&quot;DEBUG: Failed to parse JSON error response: ${jsonException.message}&quot;)&#10;                    // Fallback to HTTP status code based messages if JSON parsing fails&#10;                    when (response.code()) {&#10;                        400 -&gt; &quot;Invalid request&quot;&#10;                        401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                        403 -&gt; &quot;You don't have permission to view visitors&quot;&#10;                        404 -&gt; &quot;No visitors found&quot;&#10;                        500 -&gt; &quot;Server error. Please try again later&quot;&#10;                        else -&gt; &quot;Failed to fetch visitors. Please try again&quot;&#10;                    }&#10;                }&#10;&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Get visitors exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                is com.google.gson.JsonSyntaxException -&gt; &quot;Invalid response format from server&quot;&#10;                is com.google.gson.JsonParseException -&gt; &quot;Failed to parse server response&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get visitor details by ID&#10;     * @param visitorId The ID of the visitor to fetch&#10;     * @return Flow&lt;Result&lt;GetVisitorByIdData&gt;&gt; - Flow containing visitor details or error&#10;     */&#10;    fun getVisitorById(visitorId: String): Flow&lt;Result&lt;GetVisitorByIdData&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Getting visitor details for ID: $visitorId&quot;)&#10;&#10;            val response = visitorApiService.getVisitorById(&quot;Bearer $token&quot;, visitorId)&#10;&#10;            println(&quot;DEBUG: Get visitor by ID API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Get visitor by ID API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Get visitor by ID response body: $body&quot;)&#10;&#10;                if (body?.status == &quot;success&quot; &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Successfully fetched visitor details for ID: $visitorId&quot;)&#10;                    emit(Result.success(body.data))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to fetch visitor details&quot;&#10;                    println(&quot;DEBUG: Get visitor by ID failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                val errorMessage = when (response.code()) {&#10;                    404 -&gt; &quot;Visitor not found&quot;&#10;                    401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                    403 -&gt; &quot;You don't have permission to view this visitor&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later&quot;&#10;                    else -&gt; &quot;Failed to fetch visitor details. Please try again&quot;&#10;                }&#10;                println(&quot;DEBUG: Get visitor by ID HTTP error: $errorMessage&quot;)&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Get visitor by ID exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get recent visitors for the authenticated host&#10;     * @return Flow&lt;Result&lt;List&lt;VisitorData&gt;&gt;&gt; - Flow containing list of recent visitors or error&#10;     */&#10;    fun getRecentVisitors(): Flow&lt;Result&lt;List&lt;VisitorData&gt;&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Getting recent visitors&quot;)&#10;&#10;            val response = visitorApiService.getRecentVisitors(&quot;Bearer $token&quot;)&#10;&#10;            println(&quot;DEBUG: Get recent visitors API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Get recent visitors API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Get recent visitors response body: $body&quot;)&#10;&#10;                if (body?.success == true &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Found ${body.data.size} recent visitors&quot;)&#10;                    emit(Result.success(body.data))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to fetch recent visitors&quot;&#10;                    println(&quot;DEBUG: Get recent visitors failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                val errorMessage = when (response.code()) {&#10;                    401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                    403 -&gt; &quot;You don't have permission to view visitors&quot;&#10;                    404 -&gt; &quot;No recent visitors found&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later&quot;&#10;                    else -&gt; &quot;Failed to fetch recent visitors. Please try again&quot;&#10;                }&#10;                println(&quot;DEBUG: Get recent visitors HTTP error: $errorMessage&quot;)&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Get recent visitors exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.data.repository&#10;&#10;import com.example.permitely.data.models.CreateVisitorRequest&#10;import com.example.permitely.data.models.CreateVisitorResponseData&#10;import com.example.permitely.data.models.VisitorData&#10;import com.example.permitely.data.models.GetVisitorByIdData&#10;import com.example.permitely.data.models.NotificationData&#10;import com.example.permitely.data.network.VisitorApiService&#10;import com.example.permitely.data.storage.TokenStorage&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import kotlinx.coroutines.flow.first&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Repository for visitor-related operations&#10; * Handles visitor creation, management, and API communications&#10; */&#10;@Singleton&#10;class VisitorRepository @Inject constructor(&#10;    private val visitorApiService: VisitorApiService,&#10;    private val tokenStorage: TokenStorage&#10;) {&#10;&#10;    /**&#10;     * Create a new visitor&#10;     * @param request CreateVisitorRequest containing visitor details&#10;     * @return Flow&lt;Result&lt;CreateVisitorResponseData&gt;&gt; - Flow containing success/failure results&#10;     */&#10;    fun createVisitor(request: CreateVisitorRequest): Flow&lt;Result&lt;CreateVisitorResponseData&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Creating visitor - Name: ${request.name}, Email: ${request.email}&quot;)&#10;&#10;            val response = visitorApiService.createVisitor(&quot;Bearer $token&quot;, request)&#10;&#10;            println(&quot;DEBUG: Create visitor API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Create visitor API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Create visitor response body: $body&quot;)&#10;&#10;                if (body?.status == &quot;success&quot; &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Visitor created successfully - ID: ${body.data.visitor.visitorId}&quot;)&#10;                    emit(Result.success(body.data))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to create visitor&quot;&#10;                    println(&quot;DEBUG: Create visitor failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                // Handle HTTP error responses - Parse JSON error response from backend&#10;                val errorBody = response.errorBody()?.string()&#10;                println(&quot;DEBUG: Create visitor HTTP error ${response.code()}: $errorBody&quot;)&#10;&#10;                // Try to parse the JSON error response from backend&#10;                val errorMessage = try {&#10;                    if (errorBody != null) {&#10;                        // Parse the JSON error response: {&quot;status&quot;: &quot;error&quot;, &quot;message&quot;: &quot;error message&quot;}&#10;                        val gson = com.google.gson.Gson()&#10;                        val errorResponse = gson.fromJson(errorBody, com.google.gson.JsonObject::class.java)&#10;&#10;                        // Extract the message field from the error response&#10;                        val backendMessage = errorResponse.get(&quot;message&quot;)?.asString&#10;&#10;                        if (!backendMessage.isNullOrEmpty()) {&#10;                            backendMessage // Use the exact error message from backend&#10;                        } else {&#10;                            // Fallback to HTTP status code based messages&#10;                            when (response.code()) {&#10;                                400 -&gt; &quot;Invalid visitor information provided&quot;&#10;                                409 -&gt; &quot;This visitor already has an active or pending visit&quot;&#10;                                401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                                403 -&gt; &quot;You don't have permission to create visitors&quot;&#10;                                500 -&gt; &quot;Server error. Please try again later&quot;&#10;                                else -&gt; &quot;Failed to create visitor. Please try again&quot;&#10;                            }&#10;                        }&#10;                    } else {&#10;                        &quot;Failed to create visitor. Please try again&quot;&#10;                    }&#10;                } catch (jsonException: Exception) {&#10;                    println(&quot;DEBUG: Failed to parse JSON error response: ${jsonException.message}&quot;)&#10;                    // Fallback to HTTP status code based messages if JSON parsing fails&#10;                    when (response.code()) {&#10;                        400 -&gt; &quot;Invalid visitor information provided&quot;&#10;                        409 -&gt; &quot;This visitor already has an active or pending visit&quot;&#10;                        401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                        403 -&gt; &quot;You don't have permission to create visitors&quot;&#10;                        500 -&gt; &quot;Server error. Please try again later&quot;&#10;                        else -&gt; &quot;Failed to create visitor. Please try again&quot;&#10;                    }&#10;                }&#10;&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Create visitor exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                is com.google.gson.JsonSyntaxException -&gt; &quot;Invalid response format from server&quot;&#10;                is com.google.gson.JsonParseException -&gt; &quot;Failed to parse server response&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all visitors for the authenticated host&#10;     * @param status Optional filter by visitor status&#10;     * @return Flow&lt;Result&lt;List&lt;VisitorData&gt;&gt;&gt; - Flow containing list of visitors or error&#10;     */&#10;    fun getAllVisitors(status: String? = null): Flow&lt;Result&lt;List&lt;VisitorData&gt;&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Getting all visitors - Status filter: $status&quot;)&#10;&#10;            val response = visitorApiService.getAllVisitors(&quot;Bearer $token&quot;, status)&#10;&#10;            println(&quot;DEBUG: Get visitors API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Get visitors API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Get visitors response body: $body&quot;)&#10;&#10;                if (body?.status == &quot;success&quot; &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Found ${body.data.visitors.size} visitors&quot;)&#10;                    emit(Result.success(body.data.visitors))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to fetch visitors&quot;&#10;                    println(&quot;DEBUG: Get visitors failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                // Handle HTTP error responses - Parse JSON error response from backend&#10;                val errorBody = response.errorBody()?.string()&#10;                println(&quot;DEBUG: Get visitors HTTP error ${response.code()}: $errorBody&quot;)&#10;&#10;                // Try to parse the JSON error response from backend&#10;                val errorMessage = try {&#10;                    if (errorBody != null) {&#10;                        // Parse the JSON error response: {&quot;status&quot;: &quot;error&quot;, &quot;message&quot;: &quot;error message&quot;}&#10;                        val gson = com.google.gson.Gson()&#10;                        val errorResponse = gson.fromJson(errorBody, com.google.gson.JsonObject::class.java)&#10;&#10;                        // Extract the message field from the error response&#10;                        val backendMessage = errorResponse.get(&quot;message&quot;)?.asString&#10;&#10;                        if (!backendMessage.isNullOrEmpty()) {&#10;                            backendMessage // Use the exact error message from backend&#10;                        } else {&#10;                            // Fallback to HTTP status code based messages&#10;                            when (response.code()) {&#10;                                400 -&gt; &quot;Invalid request&quot;&#10;                                401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                                403 -&gt; &quot;You don't have permission to view visitors&quot;&#10;                                404 -&gt; &quot;No visitors found&quot;&#10;                                500 -&gt; &quot;Server error. Please try again later&quot;&#10;                                else -&gt; &quot;Failed to fetch visitors. Please try again&quot;&#10;                            }&#10;                        }&#10;                    } else {&#10;                        &quot;Failed to fetch visitors. Please try again&quot;&#10;                    }&#10;                } catch (jsonException: Exception) {&#10;                    println(&quot;DEBUG: Failed to parse JSON error response: ${jsonException.message}&quot;)&#10;                    // Fallback to HTTP status code based messages if JSON parsing fails&#10;                    when (response.code()) {&#10;                        400 -&gt; &quot;Invalid request&quot;&#10;                        401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                        403 -&gt; &quot;You don't have permission to view visitors&quot;&#10;                        404 -&gt; &quot;No visitors found&quot;&#10;                        500 -&gt; &quot;Server error. Please try again later&quot;&#10;                        else -&gt; &quot;Failed to fetch visitors. Please try again&quot;&#10;                    }&#10;                }&#10;&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Get visitors exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                is com.google.gson.JsonSyntaxException -&gt; &quot;Invalid response format from server&quot;&#10;                is com.google.gson.JsonParseException -&gt; &quot;Failed to parse server response&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get visitor details by ID&#10;     * @param visitorId The ID of the visitor to fetch&#10;     * @return Flow&lt;Result&lt;GetVisitorByIdData&gt;&gt; - Flow containing visitor details or error&#10;     */&#10;    fun getVisitorById(visitorId: String): Flow&lt;Result&lt;GetVisitorByIdData&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Getting visitor details for ID: $visitorId&quot;)&#10;&#10;            val response = visitorApiService.getVisitorById(&quot;Bearer $token&quot;, visitorId)&#10;&#10;            println(&quot;DEBUG: Get visitor by ID API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Get visitor by ID API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Get visitor by ID response body: $body&quot;)&#10;&#10;                if (body?.status == &quot;success&quot; &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Successfully fetched visitor details for ID: $visitorId&quot;)&#10;                    emit(Result.success(body.data))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to fetch visitor details&quot;&#10;                    println(&quot;DEBUG: Get visitor by ID failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                val errorMessage = when (response.code()) {&#10;                    404 -&gt; &quot;Visitor not found&quot;&#10;                    401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                    403 -&gt; &quot;You don't have permission to view this visitor&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later&quot;&#10;                    else -&gt; &quot;Failed to fetch visitor details. Please try again&quot;&#10;                }&#10;                println(&quot;DEBUG: Get visitor by ID HTTP error: $errorMessage&quot;)&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Get visitor by ID exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get recent visitors for the authenticated host&#10;     * @return Flow&lt;Result&lt;List&lt;VisitorData&gt;&gt;&gt; - Flow containing list of recent visitors or error&#10;     */&#10;    fun getRecentVisitors(): Flow&lt;Result&lt;List&lt;VisitorData&gt;&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Getting recent visitors&quot;)&#10;&#10;            val response = visitorApiService.getRecentVisitors(&quot;Bearer $token&quot;)&#10;&#10;            println(&quot;DEBUG: Get recent visitors API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Get recent visitors API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Get recent visitors response body: $body&quot;)&#10;&#10;                if (body?.success == true &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Found ${body.data.size} recent visitors&quot;)&#10;                    emit(Result.success(body.data))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to fetch recent visitors&quot;&#10;                    println(&quot;DEBUG: Get recent visitors failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                val errorMessage = when (response.code()) {&#10;                    401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                    403 -&gt; &quot;You don't have permission to view visitors&quot;&#10;                    404 -&gt; &quot;No recent visitors found&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later&quot;&#10;                    else -&gt; &quot;Failed to fetch recent visitors. Please try again&quot;&#10;                }&#10;                println(&quot;DEBUG: Get recent visitors HTTP error: $errorMessage&quot;)&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Get recent visitors exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get notifications for the authenticated user&#10;     * @return Flow&lt;Result&lt;List&lt;NotificationData&gt;&gt;&gt; - Flow containing list of notifications or error&#10;     */&#10;    fun getNotifications(): Flow&lt;Result&lt;List&lt;NotificationData&gt;&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Getting notifications&quot;)&#10;&#10;            val response = visitorApiService.getNotifications(&quot;Bearer $token&quot;)&#10;&#10;            println(&quot;DEBUG: Get notifications API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Get notifications API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Get notifications response body: $body&quot;)&#10;&#10;                if (body?.status == &quot;success&quot; &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Found ${body.data.notifications.size} notifications&quot;)&#10;                    emit(Result.success(body.data.notifications))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to fetch notifications&quot;&#10;                    println(&quot;DEBUG: Get notifications failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                val errorMessage = when (response.code()) {&#10;                    401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                    403 -&gt; &quot;You don't have permission to view notifications&quot;&#10;                    404 -&gt; &quot;No notifications found&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later&quot;&#10;                    else -&gt; &quot;Failed to fetch notifications. Please try again&quot;&#10;                }&#10;                println(&quot;DEBUG: Get notifications HTTP error: $errorMessage&quot;)&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Get notifications exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/CreateVisitorScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/CreateVisitorScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyButton&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;/**&#10; * Create Visitor Screen - Host creates new visitor appointment&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CreateVisitorScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onVisitorCreated: (visitorData: com.example.permitely.data.models.CreateVisitorResponseData) -&gt; Unit = {},&#10;    viewModel: CreateVisitorViewModel = hiltViewModel()&#10;) {&#10;    var visitorName by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneNumber by remember { mutableStateOf(&quot;&quot;) }&#10;    var purposeOfVisit by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedTime by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Validation states&#10;    var nameError by remember { mutableStateOf(&quot;&quot;) }&#10;    var emailError by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneError by remember { mutableStateOf(&quot;&quot;) }&#10;    var purposeError by remember { mutableStateOf(&quot;&quot;) }&#10;    var dateTimeError by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // UI states&#10;    var showSuccessDialog by remember { mutableStateOf(false) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showTimePicker by remember { mutableStateOf(false) }&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val scrollState = rememberScrollState()&#10;&#10;    // Date and Time Picker States&#10;    val datePickerState = rememberDatePickerState()&#10;    val timePickerState = rememberTimePickerState()&#10;&#10;    // Observe ViewModel state&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var hasShownSuccessForCurrentVisitor by remember { mutableStateOf(false) }&#10;    var isScreenActive by remember { mutableStateOf(true) }&#10;&#10;    // Reset ViewModel state when screen is first composed&#10;    LaunchedEffect(Unit) {&#10;        isScreenActive = true&#10;        viewModel.resetState()&#10;        showSuccessDialog = false&#10;        hasShownSuccessForCurrentVisitor = false&#10;    }&#10;&#10;    // Mark screen as inactive when leaving&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            isScreenActive = false&#10;        }&#10;    }&#10;&#10;    // Handle API response states - only show dialog once per visitor creation and when screen is active&#10;    LaunchedEffect(uiState.isSuccess, uiState.createdVisitorData, isScreenActive) {&#10;        if (isScreenActive &amp;&amp; uiState.isSuccess &amp;&amp; uiState.createdVisitorData != null &amp;&amp; !hasShownSuccessForCurrentVisitor) {&#10;            showSuccessDialog = true&#10;            hasShownSuccessForCurrentVisitor = true&#10;        }&#10;    }&#10;&#10;    // Get context for showing toast messages&#10;    val context = LocalContext.current&#10;&#10;    // Handle errors from API - Show toast messages for API errors&#10;    LaunchedEffect(uiState.error) {&#10;        if (uiState.error != null) {&#10;            // Show API error as toast message on screen&#10;            Toast.makeText(&#10;                context,&#10;                &quot;Error: ${uiState.error}&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;&#10;            // Clear previous field errors since this is an API error&#10;            nameError = &quot;&quot;&#10;            emailError = &quot;&quot;&#10;            phoneError = &quot;&quot;&#10;            purposeError = &quot;&quot;&#10;            dateTimeError = &quot;&quot;&#10;&#10;            // Clear the error from ViewModel after showing toast&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    // Validation functions&#10;    fun validateForm(): Boolean {&#10;        var isValid = true&#10;&#10;        // Clear previous errors&#10;        nameError = &quot;&quot;&#10;        emailError = &quot;&quot;&#10;        phoneError = &quot;&quot;&#10;        purposeError = &quot;&quot;&#10;        dateTimeError = &quot;&quot;&#10;&#10;        // Validate name&#10;        if (visitorName.isBlank()) {&#10;            nameError = &quot;Visitor name is required&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate email&#10;        if (email.isBlank()) {&#10;            emailError = &quot;Email address is required&quot;&#10;            isValid = false&#10;        } else if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            emailError = &quot;Please enter a valid email address&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate phone&#10;        if (phoneNumber.isBlank()) {&#10;            phoneError = &quot;Phone number is required&quot;&#10;            isValid = false&#10;        } else if (phoneNumber.length &lt; 10) {&#10;            phoneError = &quot;Please enter a valid phone number&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate purpose&#10;        if (purposeOfVisit.isBlank()) {&#10;            purposeError = &quot;Purpose of visit is required&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate date and time&#10;        if (selectedDate.isBlank() || selectedTime.isBlank()) {&#10;            dateTimeError = &quot;Please select visit date and time&quot;&#10;            isValid = false&#10;        }&#10;&#10;        return isValid&#10;    }&#10;&#10;    // Submit function&#10;    fun submitVisitor() {&#10;        if (validateForm()) {&#10;            scope.launch {&#10;                // Clear previous errors&#10;                viewModel.clearError()&#10;&#10;                // Submit visitor data with proper method call&#10;                viewModel.createVisitorWithDateTime(&#10;                    name = visitorName,&#10;                    email = email,&#10;                    phoneNumber = phoneNumber,&#10;                    purposeOfVisit = purposeOfVisit,&#10;                    selectedDate = selectedDate,&#10;                    selectedTime = selectedTime&#10;                )&#10;            }&#10;        } else {&#10;            // Show error messages on the screen using Toast&#10;            Toast.makeText(context, &quot;Please fix the errors in the form&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Box(&#10;    Box(&#10;    Box(&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(scrollState)&#10;        ) {&#10;            // Top App Bar&#10;            CreateVisitorTopBar(onNavigateBack = onNavigateBack)&#10;&#10;            // Form Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                // Form Fields&#10;                CreateVisitorForm(&#10;                    visitorName = visitorName,&#10;                    onNameChange = {&#10;                        visitorName = it&#10;                        nameError = &quot;&quot;&#10;                    },&#10;                    nameError = nameError,&#10;&#10;                    email = email,&#10;                    onEmailChange = {&#10;                        email = it&#10;                        emailError = &quot;&quot;&#10;                    },&#10;                    emailError = emailError,&#10;&#10;                    phoneNumber = phoneNumber,&#10;                    onPhoneChange = {&#10;                        phoneNumber = it&#10;                        phoneError = &quot;&quot;&#10;                    },&#10;                    phoneError = phoneError,&#10;&#10;                    purposeOfVisit = purposeOfVisit,&#10;                    onPurposeChange = {&#10;                        purposeOfVisit = it&#10;                        purposeError = &quot;&quot;&#10;                    },&#10;                    purposeError = purposeError,&#10;&#10;                    selectedDate = selectedDate,&#10;                    selectedTime = selectedTime,&#10;                    onDateClick = { showDatePicker = true },&#10;                    onTimeClick = { showTimePicker = true },&#10;                    dateTimeError = dateTimeError&#10;                )&#10;&#10;                // Submit Button&#10;                PermitelyButton(&#10;                    text = &quot;Create Visitor Appointment&quot;,&#10;                    onClick = { submitVisitor() },&#10;                    loading = uiState.isLoading,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;&#10;                // Bottom spacing&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;    }&#10;&#10;    // Date Picker Dialog&#10;    if (showDatePicker) {&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                            val formatter = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;                            selectedDate = formatter.format(Date(millis))&#10;                            dateTimeError = &quot;&quot;&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;, color = Primary)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;&#10;    // Time Picker Dialog&#10;    if (showTimePicker) {&#10;        TimePickerDialog(&#10;            onDismissRequest = { showTimePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        val hour = timePickerState.hour&#10;                        val minute = timePickerState.minute&#10;                        val formattedTime = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                        selectedTime = formattedTime&#10;                        dateTimeError = &quot;&quot;&#10;                        showTimePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;, color = Primary)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showTimePicker = false }) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;            }&#10;        ) {&#10;            TimePicker(state = timePickerState)&#10;        }&#10;    }&#10;&#10;    // Success Dialog&#10;    if (showSuccessDialog &amp;&amp; isScreenActive) {&#10;        SuccessDialog(&#10;            onDismiss = {&#10;                showSuccessDialog = false&#10;                hasShownSuccessForCurrentVisitor = false&#10;&#10;                // Only proceed with navigation if we have valid data and screen is still active&#10;                val currentVisitorData = uiState.createdVisitorData&#10;                if (isScreenActive &amp;&amp; currentVisitorData != null) {&#10;                    try {&#10;                        onVisitorCreated(currentVisitorData)&#10;                    } catch (e: Exception) {&#10;                        // Log error and just navigate back instead of crashing&#10;                        println(&quot;Error in onVisitorCreated callback: ${e.message}&quot;)&#10;                        onNavigateBack()&#10;                    }&#10;                } else {&#10;                    // If no valid data, just go back to dashboard&#10;                    onNavigateBack()&#10;                }&#10;&#10;                // Always reset the ViewModel state after handling&#10;                viewModel.resetState()&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CreateVisitorTopBar(onNavigateBack: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;Create New Visitor&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CreateVisitorHeader() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        brush = Brush.radialGradient(&#10;                            colors = listOf(Primary, Secondary)&#10;                        ),&#10;                        shape = androidx.compose.foundation.shape.CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.PersonAdd,&#10;                    contentDescription = &quot;Create Visitor&quot;,&#10;                    tint = OnPrimary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column {&#10;                Text(&#10;                    text = &quot;New Visitor Appointment&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Fill in the details to create a visitor entry&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CreateVisitorForm(&#10;    visitorName: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    nameError: String,&#10;&#10;    email: String,&#10;    onEmailChange: (String) -&gt; Unit,&#10;    emailError: String,&#10;&#10;    phoneNumber: String,&#10;    onPhoneChange: (String) -&gt; Unit,&#10;    phoneError: String,&#10;&#10;    purposeOfVisit: String,&#10;    onPurposeChange: (String) -&gt; Unit,&#10;    purposeError: String,&#10;&#10;    selectedDate: String,&#10;    selectedTime: String,&#10;    onDateClick: () -&gt; Unit,&#10;    onTimeClick: () -&gt; Unit,&#10;    dateTimeError: String&#10;) {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Visitor Name&#10;        PermitelyTextField(&#10;            value = visitorName,&#10;            onValueChange = onNameChange,&#10;            label = &quot;Visitor Name *&quot;,&#10;            keyboardType = KeyboardType.Text,&#10;            isError = nameError.isNotEmpty(),&#10;            errorMessage = nameError&#10;        )&#10;&#10;        // Email Address&#10;        PermitelyTextField(&#10;            value = email,&#10;            onValueChange = onEmailChange,&#10;            label = &quot;Email Address *&quot;,&#10;            keyboardType = KeyboardType.Email,&#10;            isError = emailError.isNotEmpty(),&#10;            errorMessage = emailError&#10;        )&#10;&#10;        // Phone Number&#10;        PermitelyTextField(&#10;            value = phoneNumber,&#10;            onValueChange = onPhoneChange,&#10;            label = &quot;Phone Number *&quot;,&#10;            keyboardType = KeyboardType.Phone,&#10;            isError = phoneError.isNotEmpty(),&#10;            errorMessage = phoneError&#10;        )&#10;&#10;        // Purpose of Visit&#10;        PermitelyTextField(&#10;            value = purposeOfVisit,&#10;            onValueChange = onPurposeChange,&#10;            label = &quot;Purpose of Visit *&quot;,&#10;            keyboardType = KeyboardType.Text,&#10;            isError = purposeError.isNotEmpty(),&#10;            errorMessage = purposeError&#10;        )&#10;&#10;        // Date and Time Section&#10;        Text(&#10;            text = &quot;Visit Schedule&quot;,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Date Picker&#10;            DateTimeCard(&#10;                label = &quot;Date&quot;,&#10;                value = selectedDate.ifEmpty { &quot;Select Date&quot; },&#10;                icon = Icons.Default.DateRange,&#10;                onClick = onDateClick,&#10;                modifier = Modifier.weight(1f),&#10;                isError = dateTimeError.isNotEmpty() &amp;&amp; selectedDate.isEmpty()&#10;            )&#10;&#10;            // Time Picker&#10;            DateTimeCard(&#10;                label = &quot;Time&quot;,&#10;                value = selectedTime.ifEmpty { &quot;Select Time&quot; },&#10;                icon = Icons.Default.Schedule,&#10;                onClick = onTimeClick,&#10;                modifier = Modifier.weight(1f),&#10;                isError = dateTimeError.isNotEmpty() &amp;&amp; selectedTime.isEmpty()&#10;            )&#10;        }&#10;&#10;        // Date/Time Error&#10;        if (dateTimeError.isNotEmpty()) {&#10;            Text(&#10;                text = dateTimeError,&#10;                color = Error,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                modifier = Modifier.padding(start = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DateTimeCard(&#10;    label: String,&#10;    value: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    isError: Boolean = false&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isError) Error.copy(alpha = 0.05f) else Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = onClick,&#10;        border = if (isError) androidx.compose.foundation.BorderStroke(1.dp, Error) else null&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = label,&#10;                tint = if (isError) Error else Primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = if (value.contains(&quot;Select&quot;)) TextTertiary else TextPrimary,&#10;                fontWeight = if (value.contains(&quot;Select&quot;)) FontWeight.Normal else FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TimePickerDialog(&#10;    onDismissRequest: () -&gt; Unit,&#10;    confirmButton: @Composable () -&gt; Unit,&#10;    dismissButton: @Composable () -&gt; Unit,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismissRequest,&#10;        confirmButton = confirmButton,&#10;        dismissButton = dismissButton,&#10;        text = { content() },&#10;        containerColor = Surface,&#10;        titleContentColor = TextPrimary,&#10;        textContentColor = TextPrimary&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun SuccessDialog(onDismiss: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CheckCircle,&#10;                    contentDescription = &quot;Success&quot;,&#10;                    tint = Success,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Success!&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Visitor appointment has been created successfully. The visitor will receive a confirmation email with visit details.&quot;,&#10;                color = TextSecondary,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            PermitelyButton(&#10;                text = &quot;Done&quot;,&#10;                onClick = onDismiss,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyButton&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.common.PermitelyAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;/**&#10; * Create Visitor Screen - Host creates new visitor appointment&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CreateVisitorScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onVisitorCreated: (visitorData: com.example.permitely.data.models.CreateVisitorResponseData) -&gt; Unit = {},&#10;    viewModel: CreateVisitorViewModel = hiltViewModel()&#10;) {&#10;    var visitorName by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneNumber by remember { mutableStateOf(&quot;&quot;) }&#10;    var purposeOfVisit by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedTime by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Validation states&#10;    var nameError by remember { mutableStateOf(&quot;&quot;) }&#10;    var emailError by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneError by remember { mutableStateOf(&quot;&quot;) }&#10;    var purposeError by remember { mutableStateOf(&quot;&quot;) }&#10;    var dateTimeError by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // UI states&#10;    var showSuccessDialog by remember { mutableStateOf(false) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showTimePicker by remember { mutableStateOf(false) }&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val scrollState = rememberScrollState()&#10;&#10;    // Date and Time Picker States&#10;    val datePickerState = rememberDatePickerState()&#10;    val timePickerState = rememberTimePickerState()&#10;&#10;    // Observe ViewModel state&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var hasShownSuccessForCurrentVisitor by remember { mutableStateOf(false) }&#10;    var isScreenActive by remember { mutableStateOf(true) }&#10;&#10;    // Reset ViewModel state when screen is first composed&#10;    LaunchedEffect(Unit) {&#10;        isScreenActive = true&#10;        viewModel.resetState()&#10;        showSuccessDialog = false&#10;        hasShownSuccessForCurrentVisitor = false&#10;    }&#10;&#10;    // Mark screen as inactive when leaving&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            isScreenActive = false&#10;        }&#10;    }&#10;&#10;    // Handle API response states - only show dialog once per visitor creation and when screen is active&#10;    LaunchedEffect(uiState.isSuccess, uiState.createdVisitorData, isScreenActive) {&#10;        if (isScreenActive &amp;&amp; uiState.isSuccess &amp;&amp; uiState.createdVisitorData != null &amp;&amp; !hasShownSuccessForCurrentVisitor) {&#10;            showSuccessDialog = true&#10;            hasShownSuccessForCurrentVisitor = true&#10;        }&#10;    }&#10;&#10;    // Get context for showing toast messages&#10;    val context = LocalContext.current&#10;&#10;    // Handle errors from API - Show toast messages for API errors&#10;    LaunchedEffect(uiState.error) {&#10;        if (uiState.error != null) {&#10;            // Show API error as toast message on screen&#10;            Toast.makeText(&#10;                context,&#10;                &quot;Error: ${uiState.error}&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;&#10;            // Clear previous field errors since this is an API error&#10;            nameError = &quot;&quot;&#10;            emailError = &quot;&quot;&#10;            phoneError = &quot;&quot;&#10;            purposeError = &quot;&quot;&#10;            dateTimeError = &quot;&quot;&#10;&#10;            // Clear the error from ViewModel after showing toast&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    // Validation functions&#10;    fun validateForm(): Boolean {&#10;        var isValid = true&#10;&#10;        // Clear previous errors&#10;        nameError = &quot;&quot;&#10;        emailError = &quot;&quot;&#10;        phoneError = &quot;&quot;&#10;        purposeError = &quot;&quot;&#10;        dateTimeError = &quot;&quot;&#10;&#10;        // Validate name&#10;        if (visitorName.isBlank()) {&#10;            nameError = &quot;Visitor name is required&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate email&#10;        if (email.isBlank()) {&#10;            emailError = &quot;Email address is required&quot;&#10;            isValid = false&#10;        } else if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            emailError = &quot;Please enter a valid email address&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate phone&#10;        if (phoneNumber.isBlank()) {&#10;            phoneError = &quot;Phone number is required&quot;&#10;            isValid = false&#10;        } else if (phoneNumber.length &lt; 10) {&#10;            phoneError = &quot;Please enter a valid phone number&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate purpose&#10;        if (purposeOfVisit.isBlank()) {&#10;            purposeError = &quot;Purpose of visit is required&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate date and time&#10;        if (selectedDate.isBlank() || selectedTime.isBlank()) {&#10;            dateTimeError = &quot;Please select visit date and time&quot;&#10;            isValid = false&#10;        }&#10;&#10;        return isValid&#10;    }&#10;&#10;    // Submit function&#10;    fun submitVisitor() {&#10;        if (validateForm()) {&#10;            scope.launch {&#10;                // Clear previous errors&#10;                viewModel.clearError()&#10;&#10;                // Submit visitor data with proper method call&#10;                viewModel.createVisitorWithDateTime(&#10;                    name = visitorName,&#10;                    email = email,&#10;                    phoneNumber = phoneNumber,&#10;                    purposeOfVisit = purposeOfVisit,&#10;                    selectedDate = selectedDate,&#10;                    selectedTime = selectedTime&#10;                )&#10;            }&#10;        } else {&#10;            // Show error messages on the screen using Toast&#10;            Toast.makeText(context, &quot;Please fix the errors in the form&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyAppBar(&#10;                title = &quot;Create New Visitor&quot;,&#10;                onNavigationClick = onNavigateBack&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Background)&#10;                .padding(paddingValues)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(scrollState)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Header Section&#10;                CreateVisitorHeader()&#10;&#10;                // Form Fields&#10;                CreateVisitorForm(&#10;                    visitorName = visitorName,&#10;                    onNameChange = {&#10;                        visitorName = it&#10;                        nameError = &quot;&quot;&#10;                    },&#10;                    nameError = nameError,&#10;&#10;                    email = email,&#10;                    onEmailChange = {&#10;                        email = it&#10;                        emailError = &quot;&quot;&#10;                    },&#10;                    emailError = emailError,&#10;&#10;                    phoneNumber = phoneNumber,&#10;                    onPhoneChange = {&#10;                        phoneNumber = it&#10;                        phoneError = &quot;&quot;&#10;                    },&#10;                    phoneError = phoneError,&#10;&#10;                    purposeOfVisit = purposeOfVisit,&#10;                    onPurposeChange = {&#10;                        purposeOfVisit = it&#10;                        purposeError = &quot;&quot;&#10;                    },&#10;                    purposeError = purposeError,&#10;&#10;                    selectedDate = selectedDate,&#10;                    selectedTime = selectedTime,&#10;                    onDateClick = { showDatePicker = true },&#10;                    onTimeClick = { showTimePicker = true },&#10;                    dateTimeError = dateTimeError&#10;                )&#10;&#10;                // Submit Button&#10;                PermitelyButton(&#10;                    text = &quot;Create Visitor Appointment&quot;,&#10;                    onClick = { submitVisitor() },&#10;                    loading = uiState.isLoading,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;&#10;                // Bottom spacing&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;    }&#10;&#10;    // Date Picker Dialog&#10;    if (showDatePicker) {&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                            val formatter = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;                            selectedDate = formatter.format(Date(millis))&#10;                            dateTimeError = &quot;&quot;&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;, color = Primary)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;&#10;    // Time Picker Dialog&#10;    if (showTimePicker) {&#10;        TimePickerDialog(&#10;            onDismissRequest = { showTimePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        val hour = timePickerState.hour&#10;                        val minute = timePickerState.minute&#10;                        val formattedTime = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                        selectedTime = formattedTime&#10;                        dateTimeError = &quot;&quot;&#10;                        showTimePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;, color = Primary)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showTimePicker = false }) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;            }&#10;        ) {&#10;            TimePicker(state = timePickerState)&#10;        }&#10;    }&#10;&#10;    // Success Dialog&#10;    if (showSuccessDialog &amp;&amp; isScreenActive) {&#10;        SuccessDialog(&#10;            onDismiss = {&#10;                showSuccessDialog = false&#10;                hasShownSuccessForCurrentVisitor = false&#10;&#10;                // Only proceed with navigation if we have valid data and screen is still active&#10;                val currentVisitorData = uiState.createdVisitorData&#10;                if (isScreenActive &amp;&amp; currentVisitorData != null) {&#10;                    try {&#10;                        onVisitorCreated(currentVisitorData)&#10;                    } catch (e: Exception) {&#10;                        // Log error and just navigate back instead of crashing&#10;                        println(&quot;Error in onVisitorCreated callback: ${e.message}&quot;)&#10;                        onNavigateBack()&#10;                    }&#10;                } else {&#10;                    // If no valid data, just go back to dashboard&#10;                    onNavigateBack()&#10;                }&#10;&#10;                // Always reset the ViewModel state after handling&#10;                viewModel.resetState()&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CreateVisitorTopBar(onNavigateBack: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;Create New Visitor&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CreateVisitorHeader() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        brush = Brush.radialGradient(&#10;                            colors = listOf(Primary, Secondary)&#10;                        ),&#10;                        shape = androidx.compose.foundation.shape.CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.PersonAdd,&#10;                    contentDescription = &quot;Create Visitor&quot;,&#10;                    tint = OnPrimary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column {&#10;                Text(&#10;                    text = &quot;New Visitor Appointment&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Fill in the details to create a visitor entry&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CreateVisitorForm(&#10;    visitorName: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    nameError: String,&#10;&#10;    email: String,&#10;    onEmailChange: (String) -&gt; Unit,&#10;    emailError: String,&#10;&#10;    phoneNumber: String,&#10;    onPhoneChange: (String) -&gt; Unit,&#10;    phoneError: String,&#10;&#10;    purposeOfVisit: String,&#10;    onPurposeChange: (String) -&gt; Unit,&#10;    purposeError: String,&#10;&#10;    selectedDate: String,&#10;    selectedTime: String,&#10;    onDateClick: () -&gt; Unit,&#10;    onTimeClick: () -&gt; Unit,&#10;    dateTimeError: String&#10;) {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Visitor Name&#10;        PermitelyTextField(&#10;            value = visitorName,&#10;            onValueChange = onNameChange,&#10;            label = &quot;Visitor Name *&quot;,&#10;            keyboardType = KeyboardType.Text,&#10;            isError = nameError.isNotEmpty(),&#10;            errorMessage = nameError&#10;        )&#10;&#10;        // Email Address&#10;        PermitelyTextField(&#10;            value = email,&#10;            onValueChange = onEmailChange,&#10;            label = &quot;Email Address *&quot;,&#10;            keyboardType = KeyboardType.Email,&#10;            isError = emailError.isNotEmpty(),&#10;            errorMessage = emailError&#10;        )&#10;&#10;        // Phone Number&#10;        PermitelyTextField(&#10;            value = phoneNumber,&#10;            onValueChange = onPhoneChange,&#10;            label = &quot;Phone Number *&quot;,&#10;            keyboardType = KeyboardType.Phone,&#10;            isError = phoneError.isNotEmpty(),&#10;            errorMessage = phoneError&#10;        )&#10;&#10;        // Purpose of Visit&#10;        PermitelyTextField(&#10;            value = purposeOfVisit,&#10;            onValueChange = onPurposeChange,&#10;            label = &quot;Purpose of Visit *&quot;,&#10;            keyboardType = KeyboardType.Text,&#10;            isError = purposeError.isNotEmpty(),&#10;            errorMessage = purposeError&#10;        )&#10;&#10;        // Date and Time Section&#10;        Text(&#10;            text = &quot;Visit Schedule&quot;,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Date Picker&#10;            DateTimeCard(&#10;                label = &quot;Date&quot;,&#10;                value = selectedDate.ifEmpty { &quot;Select Date&quot; },&#10;                icon = Icons.Default.DateRange,&#10;                onClick = onDateClick,&#10;                modifier = Modifier.weight(1f),&#10;                isError = dateTimeError.isNotEmpty() &amp;&amp; selectedDate.isEmpty()&#10;            )&#10;&#10;            // Time Picker&#10;            DateTimeCard(&#10;                label = &quot;Time&quot;,&#10;                value = selectedTime.ifEmpty { &quot;Select Time&quot; },&#10;                icon = Icons.Default.Schedule,&#10;                onClick = onTimeClick,&#10;                modifier = Modifier.weight(1f),&#10;                isError = dateTimeError.isNotEmpty() &amp;&amp; selectedTime.isEmpty()&#10;            )&#10;        }&#10;&#10;        // Date/Time Error&#10;        if (dateTimeError.isNotEmpty()) {&#10;            Text(&#10;                text = dateTimeError,&#10;                color = Error,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                modifier = Modifier.padding(start = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DateTimeCard(&#10;    label: String,&#10;    value: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    isError: Boolean = false&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isError) Error.copy(alpha = 0.05f) else Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = onClick,&#10;        border = if (isError) androidx.compose.foundation.BorderStroke(1.dp, Error) else null&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = label,&#10;                tint = if (isError) Error else Primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = if (value.contains(&quot;Select&quot;)) TextTertiary else TextPrimary,&#10;                fontWeight = if (value.contains(&quot;Select&quot;)) FontWeight.Normal else FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TimePickerDialog(&#10;    onDismissRequest: () -&gt; Unit,&#10;    confirmButton: @Composable () -&gt; Unit,&#10;    dismissButton: @Composable () -&gt; Unit,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismissRequest,&#10;        confirmButton = confirmButton,&#10;        dismissButton = dismissButton,&#10;        text = { content() },&#10;        containerColor = Surface,&#10;        titleContentColor = TextPrimary,&#10;        textContentColor = TextPrimary&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun SuccessDialog(onDismiss: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CheckCircle,&#10;                    contentDescription = &quot;Success&quot;,&#10;                    tint = Success,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Success!&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Visitor appointment has been created successfully. The visitor will receive a confirmation email with visit details.&quot;,&#10;                color = TextSecondary,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            PermitelyButton(&#10;                text = &quot;Done&quot;,&#10;                onClick = onDismiss,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostDashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostDashboardScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.input.nestedscroll.nestedScroll&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.ui.common.PermitelyProfileAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Host Dashboard Screen - Main landing page for hosts&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HostDashboardScreen(&#10;    onCreateVisitor: () -&gt; Unit = {},&#10;    onViewAllVisitors: () -&gt; Unit = {},&#10;    onViewNotifications: () -&gt; Unit = {},&#10;    onViewProfile: () -&gt; Unit = {},&#10;    onLogout: () -&gt; Unit = {},&#10;    viewModel: HostDashboardViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior()&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Handle refresh function&#10;    fun refresh() {&#10;        viewModel.refresh()&#10;    }&#10;&#10;    // Show error snackbar if there's an error&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            // You can show a snackbar here or handle error display&#10;            // For now, we'll just clear the error after showing it&#10;            kotlinx.coroutines.delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyProfileAppBar(&#10;                title = &quot;Dashboard&quot;,&#10;                subtitle = &quot;Manage your visitors and access&quot;,&#10;                userName = uiState.userName,&#10;                userRole = &quot;Host&quot;,&#10;                onProfileClick = onViewProfile,&#10;                onNotificationClick = onViewNotifications,&#10;                notificationCount = 3, // You can make this dynamic based on actual notifications&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(Background)&#10;                    .padding(paddingValues)&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Refresh button&#10;                    item {&#10;                        if (uiState.isLoading) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = Surface)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    horizontalArrangement = Arrangement.Center,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        modifier = Modifier.size(20.dp),&#10;                                        color = Primary,&#10;                                        strokeWidth = 2.dp&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = &quot;Loading dashboard...&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = TextSecondary&#10;                                    )&#10;                                }&#10;                            }&#10;                        } else {&#10;                            Button(&#10;                                onClick = { refresh() },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = Primary.copy(alpha = 0.1f),&#10;                                    contentColor = Primary&#10;                                )&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Refresh,&#10;                                    contentDescription = &quot;Refresh&quot;,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&quot;Refresh Dashboard&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Error display&#10;                    if (uiState.error != null) {&#10;                        item {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Error,&#10;                                        contentDescription = &quot;Error&quot;,&#10;                                        tint = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = uiState.error ?: &quot;Unknown error&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Welcome Header&#10;                    item {&#10;                        WelcomeHeader(&#10;                            hostName = uiState.userName,&#10;                            onViewProfile = onViewProfile,&#10;                            onLogout = onLogout&#10;                        )&#10;                    }&#10;&#10;                    // Stats Cards with real data&#10;                    item {&#10;                        StatsSection(uiState = uiState)&#10;                    }&#10;&#10;                    // Quick Actions&#10;                    item {&#10;                        QuickActionsSection(&#10;                            onCreateVisitor = onCreateVisitor,&#10;                            onViewAllVisitors = onViewAllVisitors,&#10;                            onViewNotifications = onViewNotifications&#10;                        )&#10;                    }&#10;&#10;                    // Recent Visitors&#10;                    item {&#10;                        RecentVisitorsSection(viewModel = viewModel)&#10;                    }&#10;&#10;                    // Bottom spacing for FAB&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(80.dp))&#10;                    }&#10;                }&#10;&#10;                // Floating Action Button&#10;                FloatingActionButton(&#10;                    onClick = onCreateVisitor,&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomEnd)&#10;                        .padding(16.dp),&#10;                    containerColor = Primary,&#10;                    contentColor = OnPrimary,&#10;                    elevation = FloatingActionButtonDefaults.elevation(&#10;                        defaultElevation = 8.dp,&#10;                        pressedElevation = 12.dp&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Create New Visitor&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun WelcomeHeader(&#10;    hostName: String,&#10;    onViewProfile: () -&gt; Unit,&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(20.dp),&#10;        onClick = onViewProfile&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;Welcome back!&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = TextSecondary&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = hostName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Tap to view profile&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = Primary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;&#10;            Row {&#10;                IconButton(onClick = onViewProfile) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;                IconButton(onClick = onLogout) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ExitToApp,&#10;                        contentDescription = &quot;Logout&quot;,&#10;                        tint = TextSecondary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatsSection(uiState: DashboardStatsUiState) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Stats&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Total Visitors&quot;,&#10;                value = uiState.totalVisitors.toString(),&#10;                icon = Icons.Default.Group,&#10;                color = Primary,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Pending Requests&quot;,&#10;                value = uiState.pending.toString(),&#10;                icon = Icons.Default.Schedule,&#10;                color = Warning,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Approved&quot;,&#10;                value = uiState.approved.toString(),&#10;                icon = Icons.Default.CheckCircle,&#10;                color = Success,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Rejected&quot;,&#10;                value = uiState.rejected.toString(),&#10;                icon = Icons.Default.Cancel,&#10;                color = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatsCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        color = color.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary,&#10;                maxLines = 1&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionsSection(&#10;    onCreateVisitor: () -&gt; Unit,&#10;    onViewAllVisitors: () -&gt; Unit,&#10;    onViewNotifications: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Actions&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            QuickActionButton(&#10;                title = &quot;Create New Visitor&quot;,&#10;                subtitle = &quot;Register a new visitor entry&quot;,&#10;                icon = Icons.Default.PersonAdd,&#10;                color = Primary,&#10;                onClick = onCreateVisitor&#10;            )&#10;&#10;            QuickActionButton(&#10;                title = &quot;View All Visitors&quot;,&#10;                subtitle = &quot;Browse all visitor records&quot;,&#10;                icon = Icons.Default.List,&#10;                color = Secondary,&#10;                onClick = onViewAllVisitors&#10;            )&#10;&#10;            QuickActionButton(&#10;                title = &quot;View Notifications&quot;,&#10;                subtitle = &quot;Check recent alerts and updates&quot;,&#10;                icon = Icons.Default.Notifications,&#10;                color = Accent,&#10;                onClick = onViewNotifications&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionButton(&#10;    title: String,&#10;    subtitle: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        color = color.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = subtitle,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            Icon(&#10;                imageVector = Icons.Default.ChevronRight,&#10;                contentDescription = &quot;Navigate&quot;,&#10;                tint = TextTertiary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorsSection(&#10;    viewModel: HostDashboardViewModel = hiltViewModel()&#10;) {&#10;    // Observe recent visitors from ViewModel&#10;    val recentVisitors by viewModel.recentVisitors.collectAsStateWithLifecycle()&#10;    val isLoadingVisitors by viewModel.isLoadingVisitors.collectAsStateWithLifecycle()&#10;&#10;    Column {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Recent Visitors&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            if (isLoadingVisitors) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.size(16.dp),&#10;                    strokeWidth = 2.dp,&#10;                    color = Primary&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        if (isLoadingVisitors &amp;&amp; recentVisitors.isEmpty()) {&#10;            // Show loading state&#10;            repeat(3) {&#10;                RecentVisitorItemSkeleton()&#10;                if (it &lt; 2) Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        } else if (recentVisitors.isEmpty()) {&#10;            // Show empty state&#10;            EmptyRecentVisitorsState()&#10;        } else {&#10;            // Show actual visitors from API&#10;            recentVisitors.forEach { visitor -&gt;&#10;                RecentVisitorItem(visitor = visitor)&#10;                if (visitor != recentVisitors.last()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorItem(visitor: RecentVisitor) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        brush = Brush.radialGradient(&#10;                            colors = listOf(Primary, Secondary)&#10;                        ),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = visitor.name.first().toString(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = OnPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = visitor.name,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = visitor.purpose,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = visitor.time,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;                Spacer(modifier = Modifier.height(2.dp))&#10;                StatusChip(status = visitor.status)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusChip(status: String) {&#10;    val (backgroundColor, textColor) = when (status) {&#10;        &quot;Active&quot; -&gt; Success.copy(alpha = 0.1f) to Success&#10;        &quot;Completed&quot; -&gt; TextTertiary.copy(alpha = 0.1f) to TextTertiary&#10;        else -&gt; Info.copy(alpha = 0.1f) to Info&#10;    }&#10;&#10;    Surface(&#10;        color = backgroundColor,&#10;        shape = RoundedCornerShape(12.dp),&#10;        modifier = Modifier.clip(RoundedCornerShape(12.dp))&#10;    ) {&#10;        Text(&#10;            text = status,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            color = textColor,&#10;            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorItemSkeleton() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar skeleton&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        color = TextTertiary.copy(alpha = 0.3f),&#10;                        shape = CircleShape&#10;                    )&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                // Name skeleton&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(0.6f)&#10;                        .height(16.dp)&#10;                        .background(&#10;                            color = TextTertiary.copy(alpha = 0.3f),&#10;                            shape = RoundedCornerShape(4.dp)&#10;                        )&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                // Purpose skeleton&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(0.4f)&#10;                        .height(14.dp)&#10;                        .background(&#10;                            color = TextTertiary.copy(alpha = 0.2f),&#10;                            shape = RoundedCornerShape(4.dp)&#10;                        )&#10;                )&#10;            }&#10;&#10;            Column(horizontalAlignment = Alignment.End) {&#10;                // Time skeleton&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(40.dp)&#10;                        .height(14.dp)&#10;                        .background(&#10;                            color = TextTertiary.copy(alpha = 0.2f),&#10;                            shape = RoundedCornerShape(4.dp)&#10;                        )&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                // Status skeleton&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(60.dp)&#10;                        .height(20.dp)&#10;                        .background(&#10;                            color = TextTertiary.copy(alpha = 0.2f),&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyRecentVisitorsState() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.PersonOff,&#10;                contentDescription = &quot;No visitors&quot;,&#10;                tint = TextTertiary,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            Text(&#10;                text = &quot;No recent visitors&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextSecondary,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = &quot;Visitor activity will appear here&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextTertiary&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.input.nestedscroll.nestedScroll&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.ui.common.PermitelyProfileAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Host Dashboard Screen - Main landing page for hosts&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HostDashboardScreen(&#10;    onCreateVisitor: () -&gt; Unit = {},&#10;    onViewAllVisitors: () -&gt; Unit = {},&#10;    onViewNotifications: () -&gt; Unit = {},&#10;    onViewProfile: () -&gt; Unit = {},&#10;    onLogout: () -&gt; Unit = {},&#10;    viewModel: HostDashboardViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior()&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Handle refresh function&#10;    fun refresh() {&#10;        viewModel.refresh()&#10;    }&#10;&#10;    // Show error snackbar if there's an error&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            // You can show a snackbar here or handle error display&#10;            // For now, we'll just clear the error after showing it&#10;            kotlinx.coroutines.delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyProfileAppBar(&#10;                title = &quot;Dashboard&quot;,&#10;                subtitle = &quot;&quot;, // Remove redundant subtitle&#10;                userName = uiState.userName,&#10;                userRole = &quot;Host&quot;,&#10;                onProfileClick = onViewProfile,&#10;                onNotificationClick = onViewNotifications,&#10;                notificationCount = 3, // You can make this dynamic based on actual notifications&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(Background)&#10;                    .padding(paddingValues)&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Refresh button&#10;                    item {&#10;                        if (uiState.isLoading) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = Surface)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    horizontalArrangement = Arrangement.Center,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        modifier = Modifier.size(20.dp),&#10;                                        color = Primary,&#10;                                        strokeWidth = 2.dp&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = &quot;Loading dashboard...&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = TextSecondary&#10;                                    )&#10;                                }&#10;                            }&#10;                        } else {&#10;                            Button(&#10;                                onClick = { refresh() },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = Primary.copy(alpha = 0.1f),&#10;                                    contentColor = Primary&#10;                                )&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Refresh,&#10;                                    contentDescription = &quot;Refresh&quot;,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&quot;Refresh Dashboard&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Error display&#10;                    if (uiState.error != null) {&#10;                        item {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Error,&#10;                                        contentDescription = &quot;Error&quot;,&#10;                                        tint = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = uiState.error ?: &quot;Unknown error&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Welcome Header&#10;                    item {&#10;                        WelcomeHeader(&#10;                            hostName = uiState.userName,&#10;                            onViewProfile = onViewProfile,&#10;                            onLogout = onLogout&#10;                        )&#10;                    }&#10;&#10;                    // Stats Cards with real data&#10;                    item {&#10;                        StatsSection(uiState = uiState)&#10;                    }&#10;&#10;                    // Quick Actions&#10;                    item {&#10;                        QuickActionsSection(&#10;                            onCreateVisitor = onCreateVisitor,&#10;                            onViewAllVisitors = onViewAllVisitors,&#10;                            onViewNotifications = onViewNotifications&#10;                        )&#10;                    }&#10;&#10;                    // Recent Visitors&#10;                    item {&#10;                        RecentVisitorsSection(viewModel = viewModel)&#10;                    }&#10;&#10;                    // Bottom spacing for FAB&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(80.dp))&#10;                    }&#10;                }&#10;&#10;                // Floating Action Button&#10;                FloatingActionButton(&#10;                    onClick = onCreateVisitor,&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomEnd)&#10;                        .padding(16.dp),&#10;                    containerColor = Primary,&#10;                    contentColor = OnPrimary,&#10;                    elevation = FloatingActionButtonDefaults.elevation(&#10;                        defaultElevation = 8.dp,&#10;                        pressedElevation = 12.dp&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Create New Visitor&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun WelcomeHeader(&#10;    hostName: String,&#10;    onViewProfile: () -&gt; Unit,&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(20.dp),&#10;        onClick = onViewProfile&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;Welcome back!&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = TextSecondary&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = hostName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Tap to view profile&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = Primary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;&#10;            IconButton(onClick = onViewProfile) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Person,&#10;                    contentDescription = &quot;Profile&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatsSection(uiState: DashboardStatsUiState) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Stats&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Total Visitors&quot;,&#10;                value = uiState.totalVisitors.toString(),&#10;                icon = Icons.Default.Group,&#10;                color = Primary,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Pending Requests&quot;,&#10;                value = uiState.pending.toString(),&#10;                icon = Icons.Default.Schedule,&#10;                color = Warning,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Approved&quot;,&#10;                value = uiState.approved.toString(),&#10;                icon = Icons.Default.CheckCircle,&#10;                color = Success,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Rejected&quot;,&#10;                value = uiState.rejected.toString(),&#10;                icon = Icons.Default.Cancel,&#10;                color = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatsCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        color = color.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary,&#10;                maxLines = 1&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionsSection(&#10;    onCreateVisitor: () -&gt; Unit,&#10;    onViewAllVisitors: () -&gt; Unit,&#10;    onViewNotifications: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Actions&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            QuickActionButton(&#10;                title = &quot;Create New Visitor&quot;,&#10;                subtitle = &quot;Register a new visitor entry&quot;,&#10;                icon = Icons.Default.PersonAdd,&#10;                color = Primary,&#10;                onClick = onCreateVisitor&#10;            )&#10;&#10;            QuickActionButton(&#10;                title = &quot;View All Visitors&quot;,&#10;                subtitle = &quot;Browse all visitor records&quot;,&#10;                icon = Icons.Default.List,&#10;                color = Secondary,&#10;                onClick = onViewAllVisitors&#10;            )&#10;&#10;            QuickActionButton(&#10;                title = &quot;View Notifications&quot;,&#10;                subtitle = &quot;Check recent alerts and updates&quot;,&#10;                icon = Icons.Default.Notifications,&#10;                color = Accent,&#10;                onClick = onViewNotifications&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionButton(&#10;    title: String,&#10;    subtitle: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        color = color.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = subtitle,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            Icon(&#10;                imageVector = Icons.Default.ChevronRight,&#10;                contentDescription = &quot;Navigate&quot;,&#10;                tint = TextTertiary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorsSection(&#10;    viewModel: HostDashboardViewModel = hiltViewModel()&#10;) {&#10;    // Observe recent visitors from ViewModel&#10;    val recentVisitors by viewModel.recentVisitors.collectAsStateWithLifecycle()&#10;    val isLoadingVisitors by viewModel.isLoadingVisitors.collectAsStateWithLifecycle()&#10;&#10;    Column {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Recent Visitors&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            if (isLoadingVisitors) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.size(16.dp),&#10;                    strokeWidth = 2.dp,&#10;                    color = Primary&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        if (isLoadingVisitors &amp;&amp; recentVisitors.isEmpty()) {&#10;            // Show loading state&#10;            repeat(3) {&#10;                RecentVisitorItemSkeleton()&#10;                if (it &lt; 2) Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        } else if (recentVisitors.isEmpty()) {&#10;            // Show empty state&#10;            EmptyRecentVisitorsState()&#10;        } else {&#10;            // Show actual visitors from API&#10;            recentVisitors.forEach { visitor -&gt;&#10;                RecentVisitorItem(visitor = visitor)&#10;                if (visitor != recentVisitors.last()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorItem(visitor: RecentVisitor) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        brush = Brush.radialGradient(&#10;                            colors = listOf(Primary, Secondary)&#10;                        ),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = visitor.name.first().toString(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = OnPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = visitor.name,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = visitor.purpose,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = visitor.time,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;                Spacer(modifier = Modifier.height(2.dp))&#10;                StatusChip(status = visitor.status)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusChip(status: String) {&#10;    val (backgroundColor, textColor) = when (status) {&#10;        &quot;Active&quot; -&gt; Success.copy(alpha = 0.1f) to Success&#10;        &quot;Completed&quot; -&gt; TextTertiary.copy(alpha = 0.1f) to TextTertiary&#10;        else -&gt; Info.copy(alpha = 0.1f) to Info&#10;    }&#10;&#10;    Surface(&#10;        color = backgroundColor,&#10;        shape = RoundedCornerShape(12.dp),&#10;        modifier = Modifier.clip(RoundedCornerShape(12.dp))&#10;    ) {&#10;        Text(&#10;            text = status,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            color = textColor,&#10;            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorItemSkeleton() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar skeleton&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        color = TextTertiary.copy(alpha = 0.3f),&#10;                        shape = CircleShape&#10;                    )&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                // Name skeleton&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(0.6f)&#10;                        .height(16.dp)&#10;                        .background(&#10;                            color = TextTertiary.copy(alpha = 0.3f),&#10;                            shape = RoundedCornerShape(4.dp)&#10;                        )&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                // Purpose skeleton&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(0.4f)&#10;                        .height(14.dp)&#10;                        .background(&#10;                            color = TextTertiary.copy(alpha = 0.2f),&#10;                            shape = RoundedCornerShape(4.dp)&#10;                        )&#10;                )&#10;            }&#10;&#10;            Column(horizontalAlignment = Alignment.End) {&#10;                // Time skeleton&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(40.dp)&#10;                        .height(14.dp)&#10;                        .background(&#10;                            color = TextTertiary.copy(alpha = 0.2f),&#10;                            shape = RoundedCornerShape(4.dp)&#10;                        )&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                // Status skeleton&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(60.dp)&#10;                        .height(20.dp)&#10;                        .background(&#10;                            color = TextTertiary.copy(alpha = 0.2f),&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyRecentVisitorsState() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.PersonOff,&#10;                contentDescription = &quot;No visitors&quot;,&#10;                tint = TextTertiary,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            Text(&#10;                text = &quot;No recent visitors&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextSecondary,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = &quot;Visitor activity will appear here&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextTertiary&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostDashboardViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostDashboardViewModel.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.data.repository.DashboardRepository&#10;import com.example.permitely.data.storage.TokenStorage&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.combine&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for Host Dashboard Screen&#10; * Manages dashboard statistics and UI state&#10; */&#10;@HiltViewModel&#10;class HostDashboardViewModel @Inject constructor(&#10;    private val dashboardRepository: DashboardRepository,&#10;    private val tokenStorage: TokenStorage&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(DashboardStatsUiState())&#10;    val uiState: StateFlow&lt;DashboardStatsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadDashboardData()&#10;    }&#10;&#10;    /**&#10;     * Load dashboard statistics and user info from the API and storage&#10;     */&#10;    private fun loadDashboardData() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            // Load user name from profile API (fresh data)&#10;            dashboardRepository.getUserName().collect { nameResult -&gt;&#10;                nameResult.fold(&#10;                    onSuccess = { userName -&gt;&#10;                        _uiState.value = _uiState.value.copy(userName = userName)&#10;                    },&#10;                    onFailure = { /* Keep existing name or use default */ }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Load dashboard stats separately&#10;        loadDashboardStats()&#10;    }&#10;&#10;    /**&#10;     * Load dashboard statistics from the API&#10;     */&#10;    private fun loadDashboardStats() {&#10;        viewModelScope.launch {&#10;            dashboardRepository.getDashboardStats().collect { result -&gt;&#10;                result.fold(&#10;                    onSuccess = { stats -&gt;&#10;                        _uiState.value = _uiState.value.copy(&#10;                            totalVisitors = stats.totalVisitors,&#10;                            approved = stats.approved,&#10;                            pending = stats.pending,&#10;                            rejected = stats.rejected,&#10;                            expired = stats.expired,&#10;                            isLoading = false,&#10;                            error = null&#10;                        )&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            error = exception.message ?: &quot;Unknown error occurred&quot;&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Refresh dashboard statistics&#10;     */&#10;    fun refresh() {&#10;        loadDashboardData()&#10;    }&#10;&#10;    /**&#10;     * Clear error state&#10;     */&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.data.repository.DashboardRepository&#10;import com.example.permitely.data.repository.VisitorRepository&#10;import com.example.permitely.data.storage.TokenStorage&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.combine&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for Host Dashboard Screen&#10; * Manages dashboard statistics and UI state&#10; */&#10;@HiltViewModel&#10;class HostDashboardViewModel @Inject constructor(&#10;    private val dashboardRepository: DashboardRepository,&#10;    private val visitorRepository: VisitorRepository,&#10;    private val tokenStorage: TokenStorage&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(DashboardStatsUiState())&#10;    val uiState: StateFlow&lt;DashboardStatsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    // Recent visitors state&#10;    private val _recentVisitors = MutableStateFlow&lt;List&lt;RecentVisitor&gt;&gt;(emptyList())&#10;    val recentVisitors: StateFlow&lt;List&lt;RecentVisitor&gt;&gt; = _recentVisitors.asStateFlow()&#10;&#10;    private val _isLoadingVisitors = MutableStateFlow(false)&#10;    val isLoadingVisitors: StateFlow&lt;Boolean&gt; = _isLoadingVisitors.asStateFlow()&#10;&#10;    init {&#10;        loadDashboardData()&#10;        loadRecentVisitors()&#10;    }&#10;&#10;    /**&#10;     * Load dashboard statistics and user info from the API and storage&#10;     */&#10;    private fun loadDashboardData() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            // Load user name from profile API (fresh data)&#10;            dashboardRepository.getUserName().collect { nameResult -&gt;&#10;                nameResult.fold(&#10;                    onSuccess = { userName -&gt;&#10;                        _uiState.value = _uiState.value.copy(userName = userName)&#10;                    },&#10;                    onFailure = { /* Keep existing name or use default */ }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Load dashboard stats separately&#10;        loadDashboardStats()&#10;    }&#10;&#10;    /**&#10;     * Load dashboard statistics from the API&#10;     */&#10;    private fun loadDashboardStats() {&#10;        viewModelScope.launch {&#10;            dashboardRepository.getDashboardStats().collect { result -&gt;&#10;                result.fold(&#10;                    onSuccess = { stats -&gt;&#10;                        _uiState.value = _uiState.value.copy(&#10;                            totalVisitors = stats.totalVisitors,&#10;                            approved = stats.approved,&#10;                            pending = stats.pending,&#10;                            rejected = stats.rejected,&#10;                            expired = stats.expired,&#10;                            isLoading = false,&#10;                            error = null&#10;                        )&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            error = exception.message ?: &quot;Unknown error occurred&quot;&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Load recent visitors from the API&#10;     */&#10;    private fun loadRecentVisitors() {&#10;        viewModelScope.launch {&#10;            _isLoadingVisitors.value = true&#10;            visitorRepository.getRecentVisitors().collect { result -&gt;&#10;                result.fold(&#10;                    onSuccess = { visitors -&gt;&#10;                        // Convert API visitors to UI visitors (only need name, purpose, time, status)&#10;                        val recentVisitors = visitors.map { apiVisitor -&gt;&#10;                            RecentVisitor(&#10;                                name = apiVisitor.name,&#10;                                purpose = apiVisitor.purposeOfVisit,&#10;                                time = formatTime(apiVisitor.createdAt),&#10;                                status = apiVisitor.status&#10;                            )&#10;                        }&#10;                        _recentVisitors.value = recentVisitors&#10;                        println(&quot;DEBUG: Loaded ${recentVisitors.size} recent visitors&quot;)&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        println(&quot;DEBUG: Failed to load recent visitors: ${exception.message}&quot;)&#10;                        // Keep empty list on error&#10;                        _recentVisitors.value = emptyList()&#10;                    }&#10;                )&#10;                _isLoadingVisitors.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Refresh recent visitors&#10;     */&#10;    fun refreshRecentVisitors() {&#10;        loadRecentVisitors()&#10;    }&#10;&#10;    /**&#10;     * Refresh dashboard statistics&#10;     */&#10;    fun refresh() {&#10;        loadDashboardData()&#10;    }&#10;&#10;    /**&#10;     * Clear error state&#10;     */&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;&#10;    /**&#10;     * Format timestamp to readable time&#10;     */&#10;    private fun formatTime(timestamp: String): String {&#10;        return try {&#10;            // Extract time from ISO timestamp: &quot;2025-08-10T08:00:00Z&quot; -&gt; &quot;08:00&quot;&#10;            timestamp.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0].substring(0, 5)&#10;        } catch (e: Exception) {&#10;            &quot;N/A&quot;&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data class for recent visitor UI display&#10; * Only contains fields needed for dashboard display&#10; */&#10;data class RecentVisitor(&#10;    val name: String,&#10;    val purpose: String,&#10;    val time: String, // Formatted time string&#10;    val status: String // PENDING, APPROVED, REJECTED, EXPIRED&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostProfileScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;&#10;/**&#10; * Host Profile Screen - View/edit host profile&#10; * Shows profile information, account statistics, settings, and logout option&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HostProfileScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onLogout: () -&gt; Unit = {},&#10;    viewModel: HostProfileViewModel = hiltViewModel()&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val scope = rememberCoroutineScope()&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Profile state&#10;    var showLogoutDialog by remember { mutableStateOf(false) }&#10;&#10;    // Handle error display&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            // Auto-clear error after 3 seconds&#10;            kotlinx.coroutines.delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Box(&#10;    Box(&#10;    Box(&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(scrollState)&#10;        ) {&#10;            // Top App Bar&#10;            ProfileTopBar(&#10;                onNavigateBack = onNavigateBack,&#10;                isEditing = uiState.isEditing,&#10;                isSaving = uiState.isSaving,&#10;                onEdit = { viewModel.startEditing() },&#10;                onSave = { viewModel.saveProfile() },&#10;                onCancel = { viewModel.cancelEditing() }&#10;            )&#10;&#10;            // Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                onLogout()&#10;            },&#10;            onDismiss = { showLogoutDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun ProfileTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    isEditing: Boolean,&#10;    isSaving: Boolean,&#10;    onEdit: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    onCancel: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;My Profile&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;&#10;            // Edit/Save/Cancel buttons&#10;            if (isEditing) {&#10;                TextButton(&#10;                    onClick = onCancel,&#10;                    enabled = !isSaving&#10;                ) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Button(&#10;                    onClick = onSave,&#10;                    enabled = !isSaving,&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Primary)&#10;                ) {&#10;                    if (isSaving) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(16.dp),&#10;                            color = OnPrimary,&#10;                            strokeWidth = 2.dp&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;Saving...&quot;)&#10;                    } else {&#10;                        Text(&quot;Save&quot;)&#10;                    }&#10;                }&#10;            } else {&#10;                IconButton(onClick = onEdit) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit Profile&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfilePhotoCard(&#10;    name: String,&#10;    email: String,&#10;    role: String,&#10;    visitorsCount: Int,&#10;    passesCount: Int,&#10;    isEditing: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile Photo&#10;            Box {&#10;                Card(&#10;                    modifier = Modifier.size(120.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                    shape = CircleShape&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Profile Photo&quot;,&#10;                            tint = Primary,&#10;                            modifier = Modifier.size(60.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Edit photo button when editing&#10;                if (isEditing) {&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .size(36.dp)&#10;                            .align(Alignment.BottomEnd),&#10;                        colors = CardDefaults.cardColors(containerColor = Primary),&#10;                        shape = CircleShape,&#10;                        onClick = { /* TODO: Implement photo picker */ }&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.CameraAlt,&#10;                                contentDescription = &quot;Change Photo&quot;,&#10;                                tint = OnPrimary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Name and email (read-only here)&#10;            Text(&#10;                text = name,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = email,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Role badge&#10;            Card(&#10;                colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Text(&#10;                    text = role.uppercase(),&#10;                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    color = Primary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Visitors and Passes count&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                CountCard(&#10;                    label = &quot;Visitors&quot;,&#10;                    count = visitorsCount,&#10;                    isEditing = isEditing,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                CountCard(&#10;                    label = &quot;Passes&quot;,&#10;                    count = passesCount,&#10;                    isEditing = isEditing,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CountCard(&#10;    label: String,&#10;    count: Int,&#10;    isEditing: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Text(&#10;                text = count.toString(),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            // Editable field for count when editing&#10;            if (isEditing) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                PermitelyTextField(&#10;                    value = count.toString(),&#10;                    onValueChange = { /* TODO: Handle count change */ },&#10;                    label = &quot;Edit $label&quot;,&#10;                    keyboardType = KeyboardType.Number,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EditableProfileCard(&#10;    name: String,&#10;    email: String,&#10;    phone: String,&#10;    createdAt: String,&#10;    isEditing: Boolean,&#10;    onNameChange: (String) -&gt; Unit,&#10;    onEmailChange: (String) -&gt; Unit,&#10;    onPhoneChange: (String) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Personal Information&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;&#10;            if (isEditing) {&#10;                // Editable fields&#10;                PermitelyTextField(&#10;                    value = name,&#10;                    onValueChange = onNameChange,&#10;                    label = &quot;Full Name&quot;,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                PermitelyTextField(&#10;                    value = email,&#10;                    onValueChange = onEmailChange,&#10;                    label = &quot;Email Address&quot;,&#10;                    keyboardType = KeyboardType.Email,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                PermitelyTextField(&#10;                    value = phone,&#10;                    onValueChange = onPhoneChange,&#10;                    label = &quot;Phone Number&quot;,&#10;                    keyboardType = KeyboardType.Phone,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            } else {&#10;                // Read-only display&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Person,&#10;                    label = &quot;Full Name&quot;,&#10;                    value = name&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Email,&#10;                    label = &quot;Email Address&quot;,&#10;                    value = email&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Phone,&#10;                    label = &quot;Phone Number&quot;,&#10;                    value = phone&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.DateRange,&#10;                    label = &quot;Member Since&quot;,&#10;                    value = createdAt&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfileInfoRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = Secondary,&#10;            modifier = Modifier.size(20.dp)&#10;        )&#10;&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextPrimary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;@Composable&#10;private fun LogoutCard(&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Error.copy(alpha = 0.1f)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Button(&#10;            onClick = onLogout,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(4.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color.Transparent,&#10;                contentColor = Error&#10;            ),&#10;            elevation = null&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.ExitToApp,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;Logout&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LogoutConfirmationDialog(&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        icon = {&#10;            Icon(&#10;                imageVector = Icons.Default.ExitToApp,&#10;                contentDescription = null,&#10;                tint = Error&#10;            )&#10;        },&#10;        title = {&#10;            Text(&#10;                text = &quot;Logout&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Are you sure you want to logout? You\'ll need to sign in again to access your account.&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.buttonColors(containerColor = Error)&#10;            ) {&#10;                Text(&quot;Logout&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.common.PermitelyAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Host Profile Screen - View/edit host profile&#10; * Shows profile information, account statistics, settings, and logout option&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HostProfileScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onLogout: () -&gt; Unit = {},&#10;    viewModel: HostProfileViewModel = hiltViewModel()&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val scope = rememberCoroutineScope()&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Profile state&#10;    var showLogoutDialog by remember { mutableStateOf(false) }&#10;&#10;    // Handle error display&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            // Auto-clear error after 3 seconds&#10;            kotlinx.coroutines.delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyAppBar(&#10;                title = &quot;My Profile&quot;,&#10;                onNavigationClick = onNavigateBack,&#10;                actions = {&#10;                    if (uiState.isEditing) {&#10;                        TextButton(&#10;                            onClick = { viewModel.cancelEditing() },&#10;                            enabled = !uiState.isSaving&#10;                        ) {&#10;                            Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = { viewModel.saveProfile() },&#10;                            enabled = !uiState.isSaving,&#10;                            colors = ButtonDefaults.buttonColors(containerColor = Primary)&#10;                        ) {&#10;                            if (uiState.isSaving) {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    color = OnPrimary,&#10;                                    strokeWidth = 2.dp&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&quot;Saving...&quot;)&#10;                            } else {&#10;                                Text(&quot;Save&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        IconButton(onClick = { viewModel.startEditing() }) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Edit,&#10;                                contentDescription = &quot;Edit Profile&quot;,&#10;                                tint = Primary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Background)&#10;                .padding(paddingValues)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(scrollState)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Error display&#10;                if (uiState.error != null) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Error,&#10;                                contentDescription = &quot;Error&quot;,&#10;                                tint = MaterialTheme.colorScheme.error&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = uiState.error ?: &quot;Unknown error&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Loading indicator&#10;                if (uiState.isLoading) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = Surface)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalArrangement = Arrangement.Center,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(20.dp),&#10;                                color = Primary,&#10;                                strokeWidth = 2.dp&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = &quot;Loading profile...&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = TextSecondary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Profile Photo and Basic Info&#10;                ProfilePhotoCard(&#10;                    name = uiState.name,&#10;                    email = uiState.email,&#10;                    role = uiState.role,&#10;                    visitorsCount = uiState.visitorsCount,&#10;                    passesCount = uiState.passesCount,&#10;                    isEditing = uiState.isEditing&#10;                )&#10;&#10;                // Editable Profile Information&#10;                EditableProfileCard(&#10;                    name = uiState.name,&#10;                    email = uiState.email,&#10;                    phone = uiState.phoneNumber,&#10;                    createdAt = uiState.createdAt,&#10;                    isEditing = uiState.isEditing,&#10;                    onNameChange = { viewModel.updateName(it) },&#10;                    onEmailChange = { viewModel.updateEmail(it) },&#10;                    onPhoneChange = { viewModel.updatePhoneNumber(it) }&#10;                )&#10;&#10;                // Logout Section&#10;                LogoutCard(&#10;                    onLogout = { showLogoutDialog = true }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Logout Confirmation Dialog&#10;    if (showLogoutDialog) {&#10;        LogoutConfirmationDialog(&#10;            onConfirm = {&#10;                showLogoutDialog = false&#10;                onLogout()&#10;            },&#10;            onDismiss = { showLogoutDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun ProfileTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    isEditing: Boolean,&#10;    isSaving: Boolean,&#10;    onEdit: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    onCancel: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;My Profile&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;&#10;            // Edit/Save/Cancel buttons&#10;            if (isEditing) {&#10;                TextButton(&#10;                    onClick = onCancel,&#10;                    enabled = !isSaving&#10;                ) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Button(&#10;                    onClick = onSave,&#10;                    enabled = !isSaving,&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Primary)&#10;                ) {&#10;                    if (isSaving) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(16.dp),&#10;                            color = OnPrimary,&#10;                            strokeWidth = 2.dp&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;Saving...&quot;)&#10;                    } else {&#10;                        Text(&quot;Save&quot;)&#10;                    }&#10;                }&#10;            } else {&#10;                IconButton(onClick = onEdit) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit Profile&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfilePhotoCard(&#10;    name: String,&#10;    email: String,&#10;    role: String,&#10;    visitorsCount: Int,&#10;    passesCount: Int,&#10;    isEditing: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile Photo&#10;            Box {&#10;                Card(&#10;                    modifier = Modifier.size(120.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                    shape = CircleShape&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Profile Photo&quot;,&#10;                            tint = Primary,&#10;                            modifier = Modifier.size(60.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Edit photo button when editing&#10;                if (isEditing) {&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .size(36.dp)&#10;                            .align(Alignment.BottomEnd),&#10;                        colors = CardDefaults.cardColors(containerColor = Primary),&#10;                        shape = CircleShape,&#10;                        onClick = { /* TODO: Implement photo picker */ }&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.CameraAlt,&#10;                                contentDescription = &quot;Change Photo&quot;,&#10;                                tint = OnPrimary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Name and email (read-only here)&#10;            Text(&#10;                text = name,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = email,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Role badge&#10;            Card(&#10;                colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Text(&#10;                    text = role.uppercase(),&#10;                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    color = Primary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Visitors and Passes count&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                CountCard(&#10;                    label = &quot;Visitors&quot;,&#10;                    count = visitorsCount,&#10;                    isEditing = isEditing,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                CountCard(&#10;                    label = &quot;Passes&quot;,&#10;                    count = passesCount,&#10;                    isEditing = isEditing,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CountCard(&#10;    label: String,&#10;    count: Int,&#10;    isEditing: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Text(&#10;                text = count.toString(),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            // Editable field for count when editing&#10;            if (isEditing) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                PermitelyTextField(&#10;                    value = count.toString(),&#10;                    onValueChange = { /* TODO: Handle count change */ },&#10;                    label = &quot;Edit $label&quot;,&#10;                    keyboardType = KeyboardType.Number,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EditableProfileCard(&#10;    name: String,&#10;    email: String,&#10;    phone: String,&#10;    createdAt: String,&#10;    isEditing: Boolean,&#10;    onNameChange: (String) -&gt; Unit,&#10;    onEmailChange: (String) -&gt; Unit,&#10;    onPhoneChange: (String) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Personal Information&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;&#10;            if (isEditing) {&#10;                // Editable fields&#10;                PermitelyTextField(&#10;                    value = name,&#10;                    onValueChange = onNameChange,&#10;                    label = &quot;Full Name&quot;,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                PermitelyTextField(&#10;                    value = email,&#10;                    onValueChange = onEmailChange,&#10;                    label = &quot;Email Address&quot;,&#10;                    keyboardType = KeyboardType.Email,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                PermitelyTextField(&#10;                    value = phone,&#10;                    onValueChange = onPhoneChange,&#10;                    label = &quot;Phone Number&quot;,&#10;                    keyboardType = KeyboardType.Phone,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            } else {&#10;                // Read-only display&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Person,&#10;                    label = &quot;Full Name&quot;,&#10;                    value = name&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Email,&#10;                    label = &quot;Email Address&quot;,&#10;                    value = email&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Phone,&#10;                    label = &quot;Phone Number&quot;,&#10;                    value = phone&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.DateRange,&#10;                    label = &quot;Member Since&quot;,&#10;                    value = createdAt&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfileInfoRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = Secondary,&#10;            modifier = Modifier.size(20.dp)&#10;        )&#10;&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextPrimary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;@Composable&#10;private fun LogoutCard(&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Error.copy(alpha = 0.1f)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Button(&#10;            onClick = onLogout,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(4.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color.Transparent,&#10;                contentColor = Error&#10;            ),&#10;            elevation = null&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.ExitToApp,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;Logout&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LogoutConfirmationDialog(&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        icon = {&#10;            Icon(&#10;                imageVector = Icons.Default.ExitToApp,&#10;                contentDescription = null,&#10;                tint = Error&#10;            )&#10;        },&#10;        title = {&#10;            Text(&#10;                text = &quot;Logout&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Are you sure you want to logout? You\'ll need to sign in again to access your account.&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.buttonColors(containerColor = Error)&#10;            ) {&#10;                Text(&quot;Logout&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/NotificationsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/NotificationsScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.permitely.ui.common.PermitelyAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;/**&#10; * Notifications Screen - View in-app notifications&#10; * Shows notification list with read/unread status and mark all as read functionality&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NotificationsScreen(&#10;    onNavigateBack: () -&gt; Unit = {}&#10;) {&#10;    var notifications by remember { mutableStateOf(getDummyNotifications()) }&#10;    var isMarkingAllRead by remember { mutableStateOf(false) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Count unread notifications&#10;    val unreadCount = notifications.count { !it.isRead }&#10;&#10;    // Mark all as read function&#10;    fun markAllAsRead() {&#10;        scope.launch {&#10;            isMarkingAllRead = true&#10;            delay(1000) // Simulate API call&#10;            notifications = notifications.map { it.copy(isRead = true) }&#10;            isMarkingAllRead = false&#10;        }&#10;    }&#10;&#10;    // Mark single notification as read&#10;    fun markAsRead(notificationId: String) {&#10;        notifications = notifications.map { notification -&gt;&#10;            if (notification.id == notificationId) {&#10;                notification.copy(isRead = true)&#10;            } else notification&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top App Bar&#10;            NotificationsTopBar(&#10;                onNavigateBack = onNavigateBack,&#10;                unreadCount = unreadCount&#10;            )&#10;&#10;            // Content&#10;            if (notifications.isEmpty()) {&#10;                // Empty state&#10;                EmptyNotificationsState()&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    // Mark all as read button (only show if there are unread notifications)&#10;                    if (unreadCount &gt; 0) {&#10;                        item {&#10;                            MarkAllAsReadButton(&#10;                                isLoading = isMarkingAllRead,&#10;                                unreadCount = unreadCount,&#10;                                onClick = { markAllAsRead() }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Notifications list&#10;                    items(notifications) { notification -&gt;&#10;                        NotificationCard(&#10;                            notification = notification,&#10;                            onMarkAsRead = { markAsRead(notification.id) }&#10;                        )&#10;                    }&#10;&#10;                    // Bottom spacing&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun NotificationsTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    unreadCount: Int&#10;) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        color = Surface,&#10;        shadowElevation = 4.dp,&#10;        tonalElevation = 4.dp&#10;    ) {&#10;        Column {&#10;            // Add status bar spacer&#10;            Spacer(modifier = Modifier.windowInsetsTopHeight(WindowInsets.statusBars))&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = onNavigateBack) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = &quot;Notifications&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        color = TextPrimary,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = if (unreadCount &gt; 0) &quot;$unreadCount unread notifications&quot; else &quot;All notifications read&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = if (unreadCount &gt; 0) Primary else TextSecondary&#10;                    )&#10;                }&#10;&#10;                // Notification bell icon with badge&#10;                if (unreadCount &gt; 0) {&#10;                    Box {&#10;                        IconButton(onClick = { /* TODO: Add notification settings */ }) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Notifications,&#10;                                contentDescription = &quot;Notifications&quot;,&#10;                                tint = Primary&#10;                            )&#10;                        }&#10;                        // Unread count badge&#10;                        Surface(&#10;                            modifier = Modifier&#10;                                .size(20.dp)&#10;                                .offset(x = 6.dp, y = 6.dp),&#10;                            color = Error,&#10;                            shape = CircleShape&#10;                        ) {&#10;                            Box(&#10;                                contentAlignment = Alignment.Center,&#10;                                modifier = Modifier.fillMaxSize()&#10;                            ) {&#10;                                Text(&#10;                                    text = if (unreadCount &gt; 99) &quot;99+&quot; else unreadCount.toString(),&#10;                                    color = OnError,&#10;                                    style = MaterialTheme.typography.labelSmall,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    IconButton(onClick = { /* TODO: Add notification settings */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.NotificationsNone,&#10;                            contentDescription = &quot;No notifications&quot;,&#10;                            tint = TextSecondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MarkAllAsReadButton(&#10;    isLoading: Boolean,&#10;    unreadCount: Int,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Button(&#10;            onClick = onClick,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(4.dp),&#10;            enabled = !isLoading,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color.Transparent,&#10;                contentColor = Primary&#10;            ),&#10;            elevation = null&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.size(16.dp),&#10;                    color = Primary,&#10;                    strokeWidth = 2.dp&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Marking as read...&quot;)&#10;            } else {&#10;                Icon(&#10;                    imageVector = Icons.Default.DoneAll,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(18.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Mark all $unreadCount as read&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NotificationCard(&#10;    notification: Notification,&#10;    onMarkAsRead: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (notification.isRead) Surface else Primary.copy(alpha = 0.05f)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = if (notification.isRead) 2.dp else 4.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = if (!notification.isRead) onMarkAsRead else { {} }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Notification icon&#10;            Card(&#10;                modifier = Modifier.size(48.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = getNotificationIconColor(notification.type).copy(alpha = 0.1f)&#10;                ),&#10;                shape = CircleShape&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = getNotificationIcon(notification.type),&#10;                        contentDescription = null,&#10;                        tint = getNotificationIconColor(notification.type),&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Notification content&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                // Header with visitor name and timestamp&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.Top&#10;                ) {&#10;                    Text(&#10;                        text = notification.visitorName,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        color = TextPrimary,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        modifier = Modifier.weight(1f),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = formatTimestamp(notification.timestamp),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;&#10;                // Notification message&#10;                Text(&#10;                    text = notification.message,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextPrimary,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                // Notification type badge&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = getNotificationIconColor(notification.type).copy(alpha = 0.1f)&#10;                    ),&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = notification.type.displayName,&#10;                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = getNotificationIconColor(notification.type),&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Unread indicator&#10;            if (!notification.isRead) {&#10;                Card(&#10;                    modifier = Modifier.size(8.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Primary),&#10;                    shape = CircleShape&#10;                ) {}&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyNotificationsState() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Card(&#10;            modifier = Modifier.size(120.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Secondary.copy(alpha = 0.1f)),&#10;            shape = CircleShape&#10;        ) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.NotificationsNone,&#10;                    contentDescription = null,&#10;                    tint = Secondary,&#10;                    modifier = Modifier.size(60.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = &quot;No Notifications&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;You're all caught up! New notifications will appear here.&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = TextSecondary,&#10;            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;// Helper functions&#10;private fun getNotificationIcon(type: NotificationType): ImageVector {&#10;    return when (type) {&#10;        NotificationType.VISITOR_REQUEST -&gt; Icons.Default.PersonAdd&#10;        NotificationType.VISITOR_APPROVED -&gt; Icons.Default.CheckCircle&#10;        NotificationType.VISITOR_REJECTED -&gt; Icons.Default.Cancel&#10;        NotificationType.VISITOR_ARRIVED -&gt; Icons.Default.Login&#10;        NotificationType.VISITOR_DEPARTED -&gt; Icons.Default.Logout&#10;        NotificationType.PASS_GENERATED -&gt; Icons.Default.QrCode&#10;        NotificationType.PASS_EXPIRED -&gt; Icons.Default.Schedule&#10;        NotificationType.SYSTEM -&gt; Icons.Default.Info&#10;    }&#10;}&#10;&#10;private fun getNotificationIconColor(type: NotificationType): Color {&#10;    return when (type) {&#10;        NotificationType.VISITOR_REQUEST -&gt; Secondary&#10;        NotificationType.VISITOR_APPROVED -&gt; Success&#10;        NotificationType.VISITOR_REJECTED -&gt; Error&#10;        NotificationType.VISITOR_ARRIVED -&gt; Primary&#10;        NotificationType.VISITOR_DEPARTED -&gt; Secondary&#10;        NotificationType.PASS_GENERATED -&gt; Primary&#10;        NotificationType.PASS_EXPIRED -&gt; Error&#10;        NotificationType.SYSTEM -&gt; Secondary&#10;    }&#10;}&#10;&#10;private fun formatTimestamp(timestamp: String): String {&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;MMM dd, HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(timestamp)&#10;        outputFormat.format(date ?: Date())&#10;    } catch (e: Exception) {&#10;        timestamp&#10;    }&#10;}&#10;&#10;// Data classes&#10;data class Notification(&#10;    val id: String,&#10;    val message: String,&#10;    val timestamp: String,&#10;    val visitorName: String,&#10;    val isRead: Boolean,&#10;    val type: NotificationType&#10;)&#10;&#10;enum class NotificationType(val displayName: String) {&#10;    VISITOR_REQUEST(&quot;New Request&quot;),&#10;    VISITOR_APPROVED(&quot;Approved&quot;),&#10;    VISITOR_REJECTED(&quot;Rejected&quot;),&#10;    VISITOR_ARRIVED(&quot;Arrived&quot;),&#10;    VISITOR_DEPARTED(&quot;Departed&quot;),&#10;    PASS_GENERATED(&quot;Pass Generated&quot;),&#10;    PASS_EXPIRED(&quot;Pass Expired&quot;),&#10;    SYSTEM(&quot;System&quot;)&#10;}&#10;&#10;// Dummy data function&#10;private fun getDummyNotifications(): List&lt;Notification&gt; {&#10;    return listOf(&#10;        Notification(&#10;            id = &quot;1&quot;,&#10;            message = &quot;New visitor request submitted for tomorrow's meeting&quot;,&#10;            timestamp = &quot;2024-12-15 14:30:00&quot;,&#10;            visitorName = &quot;Alice Johnson&quot;,&#10;            isRead = false,&#10;            type = NotificationType.VISITOR_REQUEST&#10;        ),&#10;        Notification(&#10;            id = &quot;2&quot;,&#10;            message = &quot;Visitor request has been approved and pass generated&quot;,&#10;            timestamp = &quot;2024-12-15 10:15:00&quot;,&#10;            visitorName = &quot;Bob Wilson&quot;,&#10;            isRead = false,&#10;            type = NotificationType.VISITOR_APPROVED&#10;        ),&#10;        Notification(&#10;            id = &quot;3&quot;,&#10;            message = &quot;Visitor has arrived at the main entrance&quot;,&#10;            timestamp = &quot;2024-12-15 09:45:00&quot;,&#10;            visitorName = &quot;Carol Davis&quot;,&#10;            isRead = true,&#10;            type = NotificationType.VISITOR_ARRIVED&#10;        ),&#10;        Notification(&#10;            id = &quot;4&quot;,&#10;            message = &quot;Digital pass has been generated successfully&quot;,&#10;            timestamp = &quot;2024-12-14 16:20:00&quot;,&#10;            visitorName = &quot;David Miller&quot;,&#10;            isRead = true,&#10;            type = NotificationType.PASS_GENERATED&#10;        ),&#10;        Notification(&#10;            id = &quot;5&quot;,&#10;            message = &quot;Visitor request was rejected due to incomplete information&quot;,&#10;            timestamp = &quot;2024-12-14 14:10:00&quot;,&#10;            visitorName = &quot;Eva Brown&quot;,&#10;            isRead = true,&#10;            type = NotificationType.VISITOR_REJECTED&#10;        ),&#10;        Notification(&#10;            id = &quot;6&quot;,&#10;            message = &quot;Visitor has departed from the premises&quot;,&#10;            timestamp = &quot;2024-12-14 12:30:00&quot;,&#10;            visitorName = &quot;Frank Garcia&quot;,&#10;            isRead = true,&#10;            type = NotificationType.VISITOR_DEPARTED&#10;        ),&#10;        Notification(&#10;            id = &quot;7&quot;,&#10;            message = &quot;Digital pass has expired. Please generate a new one if needed&quot;,&#10;            timestamp = &quot;2024-12-13 18:00:00&quot;,&#10;            visitorName = &quot;Grace Lee&quot;,&#10;            isRead = true,&#10;            type = NotificationType.PASS_EXPIRED&#10;        ),&#10;        Notification(&#10;            id = &quot;8&quot;,&#10;            message = &quot;System maintenance scheduled for tonight from 2 AM to 4 AM&quot;,&#10;            timestamp = &quot;2024-12-13 15:45:00&quot;,&#10;            visitorName = &quot;System Admin&quot;,&#10;            isRead = true,&#10;            type = NotificationType.SYSTEM&#10;        )&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;/**&#10; * Notifications Screen - View in-app notifications&#10; * Shows notification list with read/unread status and mark all as read functionality&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NotificationsScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    viewModel: NotificationsViewModel = hiltViewModel()&#10;) {&#10;    // Observe ViewModel state&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    &#10;    // Convert API notifications to UI notifications&#10;    val notifications = remember(uiState.notifications) {&#10;        uiState.notifications.map { apiNotification -&gt;&#10;            viewModel.convertToUiNotification(apiNotification)&#10;        }&#10;    }&#10;    &#10;    var isMarkingAllRead by remember { mutableStateOf(false) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Count unread notifications (all are unread since API doesn't provide read status)&#10;    val unreadCount = notifications.count { !it.isRead }&#10;&#10;    // Handle error state&#10;    uiState.errorMessage?.let { errorMessage -&gt;&#10;        LaunchedEffect(errorMessage) {&#10;            println(&quot;Error loading notifications: $errorMessage&quot;)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    // Mark all as read function (local UI state only)&#10;    fun markAllAsRead() {&#10;        scope.launch {&#10;            isMarkingAllRead = true&#10;            delay(1000) // Simulate API call&#10;            // In a real implementation, you would call an API to mark as read&#10;            isMarkingAllRead = false&#10;        }&#10;    }&#10;&#10;    // Mark single notification as read (local UI state only)  &#10;    fun markAsRead(notificationId: String) {&#10;        // In a real implementation, you would call an API to mark as read&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top App Bar&#10;            NotificationsTopBar(&#10;                onNavigateBack = onNavigateBack,&#10;                unreadCount = unreadCount&#10;            )&#10;&#10;            // Content&#10;            if (notifications.isEmpty()) {&#10;                // Empty state&#10;                EmptyNotificationsState()&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    // Mark all as read button (only show if there are unread notifications)&#10;                    if (unreadCount &gt; 0) {&#10;                        item {&#10;                            MarkAllAsReadButton(&#10;                                isLoading = isMarkingAllRead,&#10;                                unreadCount = unreadCount,&#10;                                onClick = { markAllAsRead() }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Notifications list&#10;                    items(notifications) { notification -&gt;&#10;                        NotificationCard(&#10;                            notification = notification,&#10;                            onMarkAsRead = { markAsRead(notification.id) }&#10;                        )&#10;                    }&#10;&#10;                    // Bottom spacing&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun NotificationsTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    unreadCount: Int&#10;) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        color = Surface,&#10;        shadowElevation = 4.dp,&#10;        tonalElevation = 4.dp&#10;    ) {&#10;        Column {&#10;            // Add status bar spacer&#10;            Spacer(modifier = Modifier.windowInsetsTopHeight(WindowInsets.statusBars))&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = onNavigateBack) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = &quot;Notifications&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        color = TextPrimary,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = if (unreadCount &gt; 0) &quot;$unreadCount unread notifications&quot; else &quot;All notifications read&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = if (unreadCount &gt; 0) Primary else TextSecondary&#10;                    )&#10;                }&#10;&#10;                // Notification bell icon with badge&#10;                if (unreadCount &gt; 0) {&#10;                    Box {&#10;                        IconButton(onClick = { /* TODO: Add notification settings */ }) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Notifications,&#10;                                contentDescription = &quot;Notifications&quot;,&#10;                                tint = Primary&#10;                            )&#10;                        }&#10;                        // Unread count badge&#10;                        Surface(&#10;                            modifier = Modifier&#10;                                .size(20.dp)&#10;                                .offset(x = 6.dp, y = 6.dp),&#10;                            color = Error,&#10;                            shape = CircleShape&#10;                        ) {&#10;                            Box(&#10;                                contentAlignment = Alignment.Center,&#10;                                modifier = Modifier.fillMaxSize()&#10;                            ) {&#10;                                Text(&#10;                                    text = if (unreadCount &gt; 99) &quot;99+&quot; else unreadCount.toString(),&#10;                                    color = OnError,&#10;                                    style = MaterialTheme.typography.labelSmall,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    IconButton(onClick = { /* TODO: Add notification settings */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.NotificationsNone,&#10;                            contentDescription = &quot;No notifications&quot;,&#10;                            tint = TextSecondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MarkAllAsReadButton(&#10;    isLoading: Boolean,&#10;    unreadCount: Int,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Button(&#10;            onClick = onClick,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(4.dp),&#10;            enabled = !isLoading,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color.Transparent,&#10;                contentColor = Primary&#10;            ),&#10;            elevation = null&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.size(16.dp),&#10;                    color = Primary,&#10;                    strokeWidth = 2.dp&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Marking as read...&quot;)&#10;            } else {&#10;                Icon(&#10;                    imageVector = Icons.Default.DoneAll,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(18.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Mark all $unreadCount as read&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NotificationCard(&#10;    notification: Notification,&#10;    onMarkAsRead: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (notification.isRead) Surface else Primary.copy(alpha = 0.05f)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = if (notification.isRead) 2.dp else 4.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = if (!notification.isRead) onMarkAsRead else { {} }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Notification icon&#10;            Card(&#10;                modifier = Modifier.size(48.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = getNotificationIconColor(notification.type).copy(alpha = 0.1f)&#10;                ),&#10;                shape = CircleShape&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = getNotificationIcon(notification.type),&#10;                        contentDescription = null,&#10;                        tint = getNotificationIconColor(notification.type),&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Notification content&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                // Header with visitor name and timestamp&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.Top&#10;                ) {&#10;                    Text(&#10;                        text = notification.visitorName,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        color = TextPrimary,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        modifier = Modifier.weight(1f),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = formatTimestamp(notification.timestamp),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;&#10;                // Notification message&#10;                Text(&#10;                    text = notification.message,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextPrimary,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                // Notification type badge&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = getNotificationIconColor(notification.type).copy(alpha = 0.1f)&#10;                    ),&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = notification.type.displayName,&#10;                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = getNotificationIconColor(notification.type),&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Unread indicator&#10;            if (!notification.isRead) {&#10;                Card(&#10;                    modifier = Modifier.size(8.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Primary),&#10;                    shape = CircleShape&#10;                ) {}&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyNotificationsState() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Card(&#10;            modifier = Modifier.size(120.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Secondary.copy(alpha = 0.1f)),&#10;            shape = CircleShape&#10;        ) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.NotificationsNone,&#10;                    contentDescription = null,&#10;                    tint = Secondary,&#10;                    modifier = Modifier.size(60.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = &quot;No Notifications&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;You're all caught up! New notifications will appear here.&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = TextSecondary,&#10;            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;// Helper functions&#10;private fun getNotificationIcon(type: NotificationType): ImageVector {&#10;    return when (type) {&#10;        NotificationType.VISITOR_REQUEST -&gt; Icons.Default.PersonAdd&#10;        NotificationType.VISITOR_APPROVED -&gt; Icons.Default.CheckCircle&#10;        NotificationType.VISITOR_REJECTED -&gt; Icons.Default.Cancel&#10;        NotificationType.VISITOR_ARRIVED -&gt; Icons.Default.Login&#10;        NotificationType.VISITOR_DEPARTED -&gt; Icons.Default.Logout&#10;        NotificationType.PASS_GENERATED -&gt; Icons.Default.QrCode&#10;        NotificationType.PASS_EXPIRED -&gt; Icons.Default.Schedule&#10;        NotificationType.SYSTEM -&gt; Icons.Default.Info&#10;    }&#10;}&#10;&#10;private fun getNotificationIconColor(type: NotificationType): Color {&#10;    return when (type) {&#10;        NotificationType.VISITOR_REQUEST -&gt; Secondary&#10;        NotificationType.VISITOR_APPROVED -&gt; Success&#10;        NotificationType.VISITOR_REJECTED -&gt; Error&#10;        NotificationType.VISITOR_ARRIVED -&gt; Primary&#10;        NotificationType.VISITOR_DEPARTED -&gt; Secondary&#10;        NotificationType.PASS_GENERATED -&gt; Primary&#10;        NotificationType.PASS_EXPIRED -&gt; Error&#10;        NotificationType.SYSTEM -&gt; Secondary&#10;    }&#10;}&#10;&#10;private fun formatTimestamp(timestamp: String): String {&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;MMM dd, HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(timestamp)&#10;        outputFormat.format(date ?: Date())&#10;    } catch (e: Exception) {&#10;        timestamp&#10;    }&#10;}&#10;&#10;// Data classes&#10;data class Notification(&#10;    val id: String,&#10;    val message: String,&#10;    val timestamp: String,&#10;    val visitorName: String,&#10;    val isRead: Boolean,&#10;    val type: NotificationType&#10;)&#10;&#10;enum class NotificationType(val displayName: String) {&#10;    VISITOR_REQUEST(&quot;New Request&quot;),&#10;    VISITOR_APPROVED(&quot;Approved&quot;),&#10;    VISITOR_REJECTED(&quot;Rejected&quot;),&#10;    VISITOR_ARRIVED(&quot;Arrived&quot;),&#10;    VISITOR_DEPARTED(&quot;Departed&quot;),&#10;    PASS_GENERATED(&quot;Pass Generated&quot;),&#10;    PASS_EXPIRED(&quot;Pass Expired&quot;),&#10;    SYSTEM(&quot;System&quot;)&#10;}&#10;&#10;// Dummy data function&#10;private fun getDummyNotifications(): List&lt;Notification&gt; {&#10;    return listOf(&#10;        Notification(&#10;            id = &quot;1&quot;,&#10;            message = &quot;New visitor request submitted for tomorrow's meeting&quot;,&#10;            timestamp = &quot;2024-12-15 14:30:00&quot;,&#10;            visitorName = &quot;Alice Johnson&quot;,&#10;            isRead = false,&#10;            type = NotificationType.VISITOR_REQUEST&#10;        ),&#10;        Notification(&#10;            id = &quot;2&quot;,&#10;            message = &quot;Visitor request has been approved and pass generated&quot;,&#10;            timestamp = &quot;2024-12-15 10:15:00&quot;,&#10;            visitorName = &quot;Bob Wilson&quot;,&#10;            isRead = false,&#10;            type = NotificationType.VISITOR_APPROVED&#10;        ),&#10;        Notification(&#10;            id = &quot;3&quot;,&#10;            message = &quot;Visitor has arrived at the main entrance&quot;,&#10;            timestamp = &quot;2024-12-15 09:45:00&quot;,&#10;            visitorName = &quot;Carol Davis&quot;,&#10;            isRead = true,&#10;            type = NotificationType.VISITOR_ARRIVED&#10;        ),&#10;        Notification(&#10;            id = &quot;4&quot;,&#10;            message = &quot;Digital pass has been generated successfully&quot;,&#10;            timestamp = &quot;2024-12-14 16:20:00&quot;,&#10;            visitorName = &quot;David Miller&quot;,&#10;            isRead = true,&#10;            type = NotificationType.PASS_GENERATED&#10;        ),&#10;        Notification(&#10;            id = &quot;5&quot;,&#10;            message = &quot;Visitor request was rejected due to incomplete information&quot;,&#10;            timestamp = &quot;2024-12-14 14:10:00&quot;,&#10;            visitorName = &quot;Eva Brown&quot;,&#10;            isRead = true,&#10;            type = NotificationType.VISITOR_REJECTED&#10;        ),&#10;        Notification(&#10;            id = &quot;6&quot;,&#10;            message = &quot;Visitor has departed from the premises&quot;,&#10;            timestamp = &quot;2024-12-14 12:30:00&quot;,&#10;            visitorName = &quot;Frank Garcia&quot;,&#10;            isRead = true,&#10;            type = NotificationType.VISITOR_DEPARTED&#10;        ),&#10;        Notification(&#10;            id = &quot;7&quot;,&#10;            message = &quot;Digital pass has expired. Please generate a new one if needed&quot;,&#10;            timestamp = &quot;2024-12-13 18:00:00&quot;,&#10;            visitorName = &quot;Grace Lee&quot;,&#10;            isRead = true,&#10;            type = NotificationType.PASS_EXPIRED&#10;        ),&#10;        Notification(&#10;            id = &quot;8&quot;,&#10;            message = &quot;System maintenance scheduled for tonight from 2 AM to 4 AM&quot;,&#10;            timestamp = &quot;2024-12-13 15:45:00&quot;,&#10;            visitorName = &quot;System Admin&quot;,&#10;            isRead = true,&#10;            type = NotificationType.SYSTEM&#10;        )&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/NotificationsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/NotificationsViewModel.kt" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.permitely.data.models.NotificationData&#10;import com.example.permitely.data.repository.VisitorRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * UI State for Notifications Screen&#10; */&#10;data class NotificationsUiState(&#10;    val isLoading: Boolean = false,&#10;    val notifications: List&lt;NotificationData&gt; = emptyList(),&#10;    val errorMessage: String? = null&#10;)&#10;&#10;/**&#10; * ViewModel for Notifications Screen&#10; * Manages fetching notifications from the API&#10; */&#10;@HiltViewModel&#10;class NotificationsViewModel @Inject constructor(&#10;    private val visitorRepository: VisitorRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(NotificationsUiState())&#10;    val uiState: StateFlow&lt;NotificationsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        // Load notifications when ViewModel is created&#10;        loadNotifications()&#10;    }&#10;&#10;    /**&#10;     * Load notifications from the API&#10;     */&#10;    fun loadNotifications() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(&#10;                isLoading = true,&#10;                errorMessage = null&#10;            )&#10;&#10;            visitorRepository.getNotifications().collect { result -&gt;&#10;                result.fold(&#10;                    onSuccess = { notifications -&gt;&#10;                        println(&quot;DEBUG: Successfully loaded ${notifications.size} notifications&quot;)&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            notifications = notifications,&#10;                            errorMessage = null&#10;                        )&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        println(&quot;DEBUG: Failed to load notifications: ${exception.message}&quot;)&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            errorMessage = exception.message&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Refresh notifications&#10;     */&#10;    fun refreshNotifications() {&#10;        loadNotifications()&#10;    }&#10;&#10;    /**&#10;     * Clear error message&#10;     */&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(errorMessage = null)&#10;    }&#10;&#10;    /**&#10;     * Convert API NotificationData to UI Notification model&#10;     * Only extracts fields needed for UI: name, created_at, status, content&#10;     */&#10;    fun convertToUiNotification(apiNotification: NotificationData): Notification {&#10;        return Notification(&#10;            id = apiNotification.notificationId.toString(),&#10;            message = apiNotification.content,&#10;            timestamp = formatTimestamp(apiNotification.createdAt),&#10;            visitorName = apiNotification.visitor?.name ?: &quot;System Admin&quot;,&#10;            isRead = false, // API doesn't provide read status, default to false&#10;            type = determineNotificationType(apiNotification)&#10;        )&#10;    }&#10;&#10;    /**&#10;     * Format ISO timestamp to readable format&#10;     */&#10;    private fun formatTimestamp(isoTimestamp: String): String {&#10;        return try {&#10;            // Convert &quot;2025-08-10T10:30:00Z&quot; to &quot;2025-08-10 10:30:00&quot;&#10;            isoTimestamp.replace(&quot;T&quot;, &quot; &quot;).replace(&quot;Z&quot;, &quot;&quot;)&#10;        } catch (e: Exception) {&#10;            isoTimestamp&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Determine notification type based on content and visitor status&#10;     */&#10;    private fun determineNotificationType(notification: NotificationData): NotificationType {&#10;        return when {&#10;            notification.visitor == null -&gt; NotificationType.SYSTEM&#10;            notification.content.contains(&quot;approved&quot;, ignoreCase = true) -&gt; NotificationType.VISITOR_APPROVED&#10;            notification.content.contains(&quot;rejected&quot;, ignoreCase = true) -&gt; NotificationType.VISITOR_REJECTED&#10;            notification.content.contains(&quot;pass&quot;, ignoreCase = true) -&gt; NotificationType.PASS_GENERATED&#10;            notification.content.contains(&quot;arrived&quot;, ignoreCase = true) -&gt; NotificationType.VISITOR_ARRIVED&#10;            notification.content.contains(&quot;departed&quot;, ignoreCase = true) -&gt; NotificationType.VISITOR_DEPARTED&#10;            else -&gt; NotificationType.VISITOR_REQUEST&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorDetailsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorDetailsScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Visitor Details Screen - Detailed view of specific visitor&#10; * Shows visitor information, status timeline, QR code, and action buttons&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VisitorDetailsScreen(&#10;    visitor: Visitor,&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onEditVisitor: (Visitor) -&gt; Unit = {},&#10;    onDeleteVisitor: (String) -&gt; Unit = {},&#10;    onGeneratePass: (String) -&gt; Unit = {},&#10;    onShareQRCode: () -&gt; Unit = {}&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Dialog states&#10;    var showDeleteDialog by remember { mutableStateOf(false) }&#10;    var showQRDialog by remember { mutableStateOf(false) }&#10;    var showGeneratePassDialog by remember { mutableStateOf(false) }&#10;    var isGeneratingPass by remember { mutableStateOf(false) }&#10;&#10;    // Pass generation state (simulate if visitor has a pass)&#10;    var hasPass by remember { mutableStateOf(visitor.status == VisitorStatus.APPROVED) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(scrollState)&#10;        ) {&#10;            // Top App Bar&#10;            VisitorDetailsTopBar(&#10;                visitorName = visitor.name,&#10;                onNavigateBack = onNavigateBack&#10;            )&#10;&#10;            // Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Visitor Information Card&#10;                VisitorInfoCard(visitor = visitor)&#10;&#10;                // Status Timeline Card&#10;                StatusTimelineCard(visitor = visitor)&#10;&#10;                // QR Code and Pass Card (if approved)&#10;                if (visitor.status == VisitorStatus.APPROVED) {&#10;                    QRCodePassCard(&#10;                        visitor = visitor,&#10;                        hasPass = hasPass,&#10;                        onShowQR = { showQRDialog = true },&#10;                        onGeneratePass = { showGeneratePassDialog = true }&#10;                    )&#10;                }&#10;&#10;                // Action Buttons&#10;                ActionButtonsSection(&#10;                    visitor = visitor,&#10;                    hasPass = hasPass,&#10;                    onEdit = { onEditVisitor(visitor) },&#10;                    onDelete = { showDeleteDialog = true },&#10;                    onGeneratePass = { showGeneratePassDialog = true },&#10;                    onShareQR = { showQRDialog = true }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Delete Confirmation Dialog&#10;    if (showDeleteDialog) {&#10;        DeleteVisitorDialog(&#10;            visitorName = visitor.name,&#10;            onConfirm = {&#10;                onDeleteVisitor(visitor.id)&#10;                showDeleteDialog = false&#10;                onNavigateBack()&#10;            },&#10;            onDismiss = { showDeleteDialog = false }&#10;        )&#10;    }&#10;&#10;    // QR Code Dialog&#10;    if (showQRDialog) {&#10;        QRCodeDialog(&#10;            visitor = visitor,&#10;            onDismiss = { showQRDialog = false },&#10;            onShare = {&#10;                onShareQRCode()&#10;                showQRDialog = false&#10;            }&#10;        )&#10;    }&#10;&#10;    // Generate Pass Dialog&#10;    if (showGeneratePassDialog) {&#10;        GeneratePassDialog(&#10;            visitor = visitor,&#10;            isLoading = isGeneratingPass,&#10;            onConfirm = {&#10;                scope.launch {&#10;                    isGeneratingPass = true&#10;                    delay(2000) // Simulate API call&#10;                    hasPass = true&#10;                    isGeneratingPass = false&#10;                    showGeneratePassDialog = false&#10;                    onGeneratePass(visitor.id)&#10;                }&#10;            },&#10;            onDismiss = { showGeneratePassDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun VisitorDetailsTopBar(&#10;    visitorName: String,&#10;    onNavigateBack: () -&gt; Unit&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            Column {&#10;                Text(&#10;                    text = &quot;Visitor Details&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;                Text(&#10;                    text = visitorName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;        },&#10;        navigationIcon = {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = TextPrimary&#10;                )&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = Background&#10;        )&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun VisitorInfoCard(visitor: Visitor) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Header with status&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Visitor Information&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;&#10;                StatusBadge(status = visitor.status)&#10;            }&#10;&#10;            // Profile section&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Profile icon&#10;                Card(&#10;                    modifier = Modifier.size(60.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                    shape = CircleShape&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = Primary,&#10;                            modifier = Modifier.size(30.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Name and basic info&#10;                Column {&#10;                    Text(&#10;                        text = visitor.name,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        color = TextPrimary,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = &quot;ID: ${visitor.id}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;            }&#10;&#10;            Divider(color = Secondary.copy(alpha = 0.2f))&#10;&#10;            // Contact details&#10;            InfoRow(&#10;                icon = Icons.Default.Email,&#10;                label = &quot;Email&quot;,&#10;                value = visitor.email&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.Phone,&#10;                label = &quot;Phone&quot;,&#10;                value = visitor.phone&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.Business,&#10;                label = &quot;Purpose&quot;,&#10;                value = visitor.purpose&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.DateRange,&#10;                label = &quot;Visit Date&quot;,&#10;                value = visitor.date&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.Schedule,&#10;                label = &quot;Visit Time&quot;,&#10;                value = visitor.time&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.Create,&#10;                label = &quot;Created&quot;,&#10;                value = visitor.createdAt&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusBadge(status: VisitorStatus) {&#10;    val (backgroundColor, textColor) = when (status) {&#10;        VisitorStatus.PENDING -&gt; Secondary.copy(alpha = 0.1f) to Secondary&#10;        VisitorStatus.APPROVED -&gt; Success.copy(alpha = 0.1f) to Success&#10;        VisitorStatus.REJECTED -&gt; Error.copy(alpha = 0.1f) to Error&#10;        VisitorStatus.EXPIRED -&gt; Color.Gray.copy(alpha = 0.1f) to Color.Gray&#10;    }&#10;&#10;    Card(&#10;        colors = CardDefaults.cardColors(containerColor = backgroundColor),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Text(&#10;            text = status.displayName.uppercase(),&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = textColor,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusTimelineCard(visitor: Visitor) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Status Timeline&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;&#10;            // Timeline items (simulated)&#10;            TimelineItem(&#10;                icon = Icons.Default.Create,&#10;                title = &quot;Request Created&quot;,&#10;                subtitle = &quot;Visitor registration submitted&quot;,&#10;                time = visitor.createdAt,&#10;                isActive = true&#10;            )&#10;&#10;            if (visitor.status != VisitorStatus.PENDING) {&#10;                TimelineItem(&#10;                    icon = when (visitor.status) {&#10;                        VisitorStatus.APPROVED -&gt; Icons.Default.CheckCircle&#10;                        VisitorStatus.REJECTED -&gt; Icons.Default.Cancel&#10;                        VisitorStatus.EXPIRED -&gt; Icons.Default.Schedule&#10;                        else -&gt; Icons.Default.Info&#10;                    },&#10;                    title = when (visitor.status) {&#10;                        VisitorStatus.APPROVED -&gt; &quot;Request Approved&quot;&#10;                        VisitorStatus.REJECTED -&gt; &quot;Request Rejected&quot;&#10;                        VisitorStatus.EXPIRED -&gt; &quot;Visit Expired&quot;&#10;                        else -&gt; &quot;Status Updated&quot;&#10;                    },&#10;                    subtitle = &quot;Status changed by host&quot;,&#10;                    time = &quot;Today, 10:30 AM&quot;,&#10;                    isActive = true&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TimelineItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    subtitle: String,&#10;    time: String,&#10;    isActive: Boolean&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        verticalAlignment = Alignment.Top&#10;    ) {&#10;        Card(&#10;            modifier = Modifier.size(40.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = if (isActive) Primary.copy(alpha = 0.1f) else Secondary.copy(alpha = 0.1f)&#10;            ),&#10;            shape = CircleShape&#10;        ) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = null,&#10;                    tint = if (isActive) Primary else Secondary,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = subtitle,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;            Text(&#10;                text = time,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QRCodePassCard(&#10;    visitor: Visitor,&#10;    hasPass: Boolean,&#10;    onShowQR: () -&gt; Unit,&#10;    onGeneratePass: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Success.copy(alpha = 0.05f)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Digital Pass&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;&#10;                Icon(&#10;                    imageVector = Icons.Default.QrCode,&#10;                    contentDescription = null,&#10;                    tint = Success,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            if (visitor.hasQRCode &amp;&amp; visitor.qrCodeUrl != null) {&#10;                // Pass details with QR code URL&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Pass Generated Successfully&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = Success,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    // Pass Information&#10;                    visitor.passId?.let { passId -&gt;&#10;                        InfoRow(&#10;                            icon = Icons.Default.Badge,&#10;                            label = &quot;Pass ID&quot;,&#10;                            value = &quot;PASS-$passId&quot;&#10;                        )&#10;                    }&#10;&#10;                    visitor.expiryTime?.let { expiryTime -&gt;&#10;                        InfoRow(&#10;                            icon = Icons.Default.Schedule,&#10;                            label = &quot;Valid Until&quot;,&#10;                            value = formatDateTime(expiryTime)&#10;                        )&#10;                    }&#10;&#10;                    // QR Code URL Section&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.05f)),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.QrCode,&#10;                                    contentDescription = &quot;QR Code&quot;,&#10;                                    tint = Primary,&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;QR Code Access&quot;,&#10;                                    style = MaterialTheme.typography.titleSmall,&#10;                                    color = TextPrimary,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                            }&#10;&#10;                            // QR Code URL Link&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = Surface),&#10;                                shape = RoundedCornerShape(8.dp),&#10;                                onClick = onShowQR&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(12.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;QR Code URL:&quot;,&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        color = TextSecondary,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(4.dp))&#10;                                    Text(&#10;                                        text = visitor.qrCodeUrl,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = Primary,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Text(&#10;                                text = &quot; QR code has been emailed to visitor&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = Success,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Action Buttons&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = onShowQR,&#10;                            modifier = Modifier.weight(1f),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = Primary,&#10;                                contentColor = OnPrimary&#10;                            )&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.QrCode,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Text(&quot;View QR&quot;)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { /* Share QR Code URL */ },&#10;                            modifier = Modifier.weight(1f),&#10;                            colors = ButtonDefaults.outlinedButtonColors(&#10;                                contentColor = Primary&#10;                            )&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Share,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Text(&quot;Share&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            } else if (hasPass) {&#10;                // Legacy pass without QR code URL (fallback)&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Pass Generated Successfully&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = Success,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Valid until: ${visitor.date} ${visitor.time}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = TextSecondary&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Pass ID: PASS-${visitor.id.uppercase()}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;&#10;                // QR Code preview placeholder&#10;                Card(&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .align(Alignment.CenterHorizontally),&#10;                    colors = CardDefaults.cardColors(containerColor = Surface),&#10;                    onClick = onShowQR&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.QrCode,&#10;                                contentDescription = &quot;QR Code&quot;,&#10;                                tint = Primary,&#10;                                modifier = Modifier.size(40.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;Tap to view&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = TextSecondary,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                Text(&#10;                    text = &quot;No pass generated yet. Generate a digital pass for easy entry.&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;&#10;                Button(&#10;                    onClick = onGeneratePass,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Success,&#10;                        contentColor = OnSuccess&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.QrCode,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Generate Digital Pass&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper composable for displaying information rows&#10;@Composable&#10;private fun InfoRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = label,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(16.dp)&#10;        )&#10;        Text(&#10;            text = &quot;$label:&quot;,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextTertiary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextSecondary,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;// Helper function to format date time&#10;private fun formatDateTime(isoDateTime: String): String {&#10;    return try {&#10;        // Simple formatting - you can enhance this with proper date formatting&#10;        val parts = isoDateTime.split(&quot;T&quot;)&#10;        if (parts.size &gt;= 2) {&#10;            val date = parts[0]&#10;            val time = parts[1].split(&quot;Z&quot;)[0].substring(0, 5) // Get HH:mm&#10;            &quot;$date at $time&quot;&#10;        } else {&#10;            isoDateTime&#10;        }&#10;    } catch (e: Exception) {&#10;        isoDateTime&#10;    }&#10;}&#10;&#10;// Missing ActionButtonsSection function&#10;@Composable&#10;private fun ActionButtonsSection(&#10;    visitor: Visitor,&#10;    hasPass: Boolean,&#10;    onEdit: () -&gt; Unit,&#10;    onDelete: () -&gt; Unit,&#10;    onGeneratePass: () -&gt; Unit,&#10;    onShareQR: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Actions&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                // Edit Button&#10;                OutlinedButton(&#10;                    onClick = onEdit,&#10;                    modifier = Modifier.weight(1f),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = Primary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&quot;Edit&quot;)&#10;                }&#10;&#10;                // Delete Button&#10;                OutlinedButton(&#10;                    onClick = onDelete,&#10;                    modifier = Modifier.weight(1f),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = Error&#10;                    ),&#10;                    border = androidx.compose.foundation.BorderStroke(1.dp, Error)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Delete,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&quot;Delete&quot;)&#10;                }&#10;            }&#10;&#10;            if (!hasPass &amp;&amp; visitor.status == VisitorStatus.APPROVED) {&#10;                Button(&#10;                    onClick = onGeneratePass,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Success,&#10;                        contentColor = OnSuccess&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.QrCode,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Generate Digital Pass&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Missing DeleteVisitorDialog function&#10;@Composable&#10;private fun DeleteVisitorDialog(&#10;    visitorName: String,&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Warning,&#10;                    contentDescription = &quot;Warning&quot;,&#10;                    tint = Error,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Delete Visitor&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Are you sure you want to delete $visitorName? This action cannot be undone.&quot;,&#10;                color = TextSecondary,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Error,&#10;                    contentColor = OnError&#10;                )&#10;            ) {&#10;                Text(&quot;Delete&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = TextSecondary)&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}&#10;&#10;// Missing QRCodeDialog function&#10;@Composable&#10;private fun QRCodeDialog(&#10;    visitor: Visitor,&#10;    onDismiss: () -&gt; Unit,&#10;    onShare: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.QrCode,&#10;                    contentDescription = &quot;QR Code&quot;,&#10;                    tint = Primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;QR Code&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // QR Code placeholder&#10;                Card(&#10;                    modifier = Modifier.size(200.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Surface),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.QrCode,&#10;                                contentDescription = &quot;QR Code&quot;,&#10;                                tint = Primary,&#10;                                modifier = Modifier.size(80.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;QR Code for ${visitor.name}&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = TextSecondary,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                visitor.qrCodeUrl?.let { url -&gt;&#10;                    Text(&#10;                        text = &quot;URL: $url&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Primary,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onShare,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Primary,&#10;                    contentColor = OnPrimary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Share,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Share&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Close&quot;, color = TextSecondary)&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}&#10;&#10;// Missing GeneratePassDialog function&#10;@Composable&#10;private fun GeneratePassDialog(&#10;    visitor: Visitor,&#10;    isLoading: Boolean,&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = if (isLoading) { {} } else onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.QrCode,&#10;                    contentDescription = &quot;Generate Pass&quot;,&#10;                    tint = Success,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Generate Digital Pass&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Generate a digital pass for ${visitor.name}?&quot;,&#10;                    color = TextSecondary,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;This will create a QR code that the visitor can use for entry.&quot;,&#10;                    color = TextTertiary,&#10;                    style = MaterialTheme.typography.bodySmall&#10;                )&#10;&#10;                if (isLoading) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(16.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = Primary&#10;                        )&#10;                        Text(&#10;                            text = &quot;Generating pass...&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = TextSecondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                enabled = !isLoading,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Success,&#10;                    contentColor = OnSuccess&#10;                )&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        strokeWidth = 2.dp,&#10;                        color = OnSuccess&#10;                    )&#10;                } else {&#10;                    Text(&quot;Generate&quot;)&#10;                }&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(&#10;                onClick = onDismiss,&#10;                enabled = !isLoading&#10;            ) {&#10;                Text(&quot;Cancel&quot;, color = TextSecondary)&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Visitor Details Screen - Detailed view of specific visitor&#10; * Shows visitor information, status timeline, QR code, and action buttons&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VisitorDetailsScreen(&#10;    visitorId: String,&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onEditVisitor: (Visitor) -&gt; Unit = {},&#10;    onDeleteVisitor: (String) -&gt; Unit = {},&#10;    onGeneratePass: (String) -&gt; Unit = {},&#10;    onShareQRCode: () -&gt; Unit = {},&#10;    viewModel: VisitorDetailsViewModel = hiltViewModel()&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Observe ViewModel state&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Load visitor details when the screen is first composed&#10;    LaunchedEffect(visitorId) {&#10;        viewModel.loadVisitorDetails(visitorId)&#10;    }&#10;&#10;    // Convert API data to UI visitor when available&#10;    val visitor = uiState.visitorData?.let { visitorData -&gt;&#10;        viewModel.convertToUiVisitor(visitorData)&#10;    }&#10;&#10;    // Dialog states&#10;    var showDeleteDialog by remember { mutableStateOf(false) }&#10;    var showQRDialog by remember { mutableStateOf(false) }&#10;    var showGeneratePassDialog by remember { mutableStateOf(false) }&#10;    var isGeneratingPass by remember { mutableStateOf(false) }&#10;&#10;    // Pass generation state (simulate if visitor has a pass)&#10;    var hasPass by remember(visitor) { mutableStateOf(visitor?.status == VisitorStatus.APPROVED) }&#10;&#10;    // Handle error state&#10;    uiState.errorMessage?.let { errorMessage -&gt;&#10;        LaunchedEffect(errorMessage) {&#10;            println(&quot;Error loading visitor details: $errorMessage&quot;)&#10;            // You can show a snackbar or alert dialog here&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    // Show loading state&#10;    if (uiState.isLoading) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator(color = Primary)&#10;        }&#10;        return&#10;    }&#10;&#10;    // Show error state if visitor not found&#10;    if (uiState.errorMessage != null &amp;&amp; visitor == null) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Error,&#10;                contentDescription = &quot;Error&quot;,&#10;                tint = Error,&#10;                modifier = Modifier.size(64.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Failed to load visitor details&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextSecondary&#10;            )&#10;            Text(&#10;                text = uiState.errorMessage ?: &quot;Unknown error&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextTertiary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Button(&#10;                onClick = { viewModel.refreshVisitorDetails(visitorId) },&#10;                colors = ButtonDefaults.buttonColors(containerColor = Primary)&#10;            ) {&#10;                Text(&quot;Retry&quot;)&#10;            }&#10;        }&#10;        return&#10;    }&#10;&#10;    // Show main content when visitor data is available&#10;    visitor?.let { visitorData -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Background)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(scrollState)&#10;            ) {&#10;                // Top App Bar&#10;                VisitorDetailsTopBar(&#10;                    visitorName = visitorData.name,&#10;                    onNavigateBack = onNavigateBack&#10;                )&#10;&#10;                // Content&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Visitor Information Card&#10;                    VisitorInfoCard(visitor = visitorData)&#10;&#10;                    // Status Timeline Card&#10;                    StatusTimelineCard(visitor = visitorData)&#10;&#10;                    // QR Code and Pass Card (if approved)&#10;                    if (visitorData.status == VisitorStatus.APPROVED) {&#10;                        QRCodePassCard(&#10;                            visitor = visitorData,&#10;                            hasPass = hasPass,&#10;                            onShowQR = { showQRDialog = true },&#10;                            onGeneratePass = { showGeneratePassDialog = true }&#10;                        )&#10;                    }&#10;&#10;                    // Action Buttons&#10;                    ActionButtonsSection(&#10;                        visitor = visitorData,&#10;                        hasPass = hasPass,&#10;                        onEdit = { onEditVisitor(visitorData) },&#10;                        onDelete = { showDeleteDialog = true },&#10;                        onGeneratePass = { showGeneratePassDialog = true },&#10;                        onShareQR = { showQRDialog = true }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Delete Confirmation Dialog&#10;        if (showDeleteDialog) {&#10;            DeleteVisitorDialog(&#10;                visitorName = visitor.name,&#10;                onConfirm = {&#10;                    onDeleteVisitor(visitor.id)&#10;                    showDeleteDialog = false&#10;                    onNavigateBack()&#10;                },&#10;                onDismiss = { showDeleteDialog = false }&#10;            )&#10;        }&#10;&#10;        // QR Code Dialog&#10;        if (showQRDialog) {&#10;            QRCodeDialog(&#10;                visitor = visitor,&#10;                onDismiss = { showQRDialog = false },&#10;                onShare = {&#10;                    onShareQRCode()&#10;                    showQRDialog = false&#10;                }&#10;            )&#10;        }&#10;&#10;        // Generate Pass Dialog&#10;        if (showGeneratePassDialog) {&#10;            GeneratePassDialog(&#10;                visitor = visitor,&#10;                isLoading = isGeneratingPass,&#10;                onConfirm = {&#10;                    scope.launch {&#10;                        isGeneratingPass = true&#10;                        delay(2000) // Simulate API call&#10;                        hasPass = true&#10;                        isGeneratingPass = false&#10;                        showGeneratePassDialog = false&#10;                        onGeneratePass(visitor.id)&#10;                    }&#10;                },&#10;                onDismiss = { showGeneratePassDialog = false }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun VisitorDetailsTopBar(&#10;    visitorName: String,&#10;    onNavigateBack: () -&gt; Unit&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            Column {&#10;                Text(&#10;                    text = &quot;Visitor Details&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;                Text(&#10;                    text = visitorName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;        },&#10;        navigationIcon = {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = TextPrimary&#10;                )&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = Background&#10;        )&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun VisitorInfoCard(visitor: Visitor) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Header with status&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Visitor Information&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;&#10;                StatusBadge(status = visitor.status)&#10;            }&#10;&#10;            // Profile section&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Profile icon&#10;                Card(&#10;                    modifier = Modifier.size(60.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                    shape = CircleShape&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = Primary,&#10;                            modifier = Modifier.size(30.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Name and basic info&#10;                Column {&#10;                    Text(&#10;                        text = visitor.name,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        color = TextPrimary,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = &quot;ID: ${visitor.id}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;            }&#10;&#10;            Divider(color = Secondary.copy(alpha = 0.2f))&#10;&#10;            // Contact details&#10;            InfoRow(&#10;                icon = Icons.Default.Email,&#10;                label = &quot;Email&quot;,&#10;                value = visitor.email&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.Phone,&#10;                label = &quot;Phone&quot;,&#10;                value = visitor.phone&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.Business,&#10;                label = &quot;Purpose&quot;,&#10;                value = visitor.purpose&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.DateRange,&#10;                label = &quot;Visit Date&quot;,&#10;                value = visitor.date&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.Schedule,&#10;                label = &quot;Visit Time&quot;,&#10;                value = visitor.time&#10;            )&#10;&#10;            InfoRow(&#10;                icon = Icons.Default.Create,&#10;                label = &quot;Created&quot;,&#10;                value = visitor.createdAt&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusBadge(status: VisitorStatus) {&#10;    val (backgroundColor, textColor) = when (status) {&#10;        VisitorStatus.PENDING -&gt; Secondary.copy(alpha = 0.1f) to Secondary&#10;        VisitorStatus.APPROVED -&gt; Success.copy(alpha = 0.1f) to Success&#10;        VisitorStatus.REJECTED -&gt; Error.copy(alpha = 0.1f) to Error&#10;        VisitorStatus.EXPIRED -&gt; Color.Gray.copy(alpha = 0.1f) to Color.Gray&#10;    }&#10;&#10;    Card(&#10;        colors = CardDefaults.cardColors(containerColor = backgroundColor),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Text(&#10;            text = status.displayName.uppercase(),&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = textColor,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusTimelineCard(visitor: Visitor) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Status Timeline&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;&#10;            // Timeline items (simulated)&#10;            TimelineItem(&#10;                icon = Icons.Default.Create,&#10;                title = &quot;Request Created&quot;,&#10;                subtitle = &quot;Visitor registration submitted&quot;,&#10;                time = visitor.createdAt,&#10;                isActive = true&#10;            )&#10;&#10;            if (visitor.status != VisitorStatus.PENDING) {&#10;                TimelineItem(&#10;                    icon = when (visitor.status) {&#10;                        VisitorStatus.APPROVED -&gt; Icons.Default.CheckCircle&#10;                        VisitorStatus.REJECTED -&gt; Icons.Default.Cancel&#10;                        VisitorStatus.EXPIRED -&gt; Icons.Default.Schedule&#10;                        else -&gt; Icons.Default.Info&#10;                    },&#10;                    title = when (visitor.status) {&#10;                        VisitorStatus.APPROVED -&gt; &quot;Request Approved&quot;&#10;                        VisitorStatus.REJECTED -&gt; &quot;Request Rejected&quot;&#10;                        VisitorStatus.EXPIRED -&gt; &quot;Visit Expired&quot;&#10;                        else -&gt; &quot;Status Updated&quot;&#10;                    },&#10;                    subtitle = &quot;Status changed by host&quot;,&#10;                    time = &quot;Today, 10:30 AM&quot;,&#10;                    isActive = true&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TimelineItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    subtitle: String,&#10;    time: String,&#10;    isActive: Boolean&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        verticalAlignment = Alignment.Top&#10;    ) {&#10;        Card(&#10;            modifier = Modifier.size(40.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = if (isActive) Primary.copy(alpha = 0.1f) else Secondary.copy(alpha = 0.1f)&#10;            ),&#10;            shape = CircleShape&#10;        ) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = null,&#10;                    tint = if (isActive) Primary else Secondary,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = subtitle,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;            Text(&#10;                text = time,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QRCodePassCard(&#10;    visitor: Visitor,&#10;    hasPass: Boolean,&#10;    onShowQR: () -&gt; Unit,&#10;    onGeneratePass: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Success.copy(alpha = 0.05f)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Digital Pass&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;&#10;                Icon(&#10;                    imageVector = Icons.Default.QrCode,&#10;                    contentDescription = null,&#10;                    tint = Success,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            if (visitor.hasQRCode &amp;&amp; visitor.qrCodeUrl != null) {&#10;                // Pass details with QR code URL&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Pass Generated Successfully&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = Success,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    // Pass Information&#10;                    visitor.passId?.let { passId -&gt;&#10;                        InfoRow(&#10;                            icon = Icons.Default.Badge,&#10;                            label = &quot;Pass ID&quot;,&#10;                            value = &quot;PASS-$passId&quot;&#10;                        )&#10;                    }&#10;&#10;                    visitor.expiryTime?.let { expiryTime -&gt;&#10;                        InfoRow(&#10;                            icon = Icons.Default.Schedule,&#10;                            label = &quot;Valid Until&quot;,&#10;                            value = formatDateTime(expiryTime)&#10;                        )&#10;                    }&#10;&#10;                    // QR Code URL Section&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.05f)),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.QrCode,&#10;                                    contentDescription = &quot;QR Code&quot;,&#10;                                    tint = Primary,&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;QR Code Access&quot;,&#10;                                    style = MaterialTheme.typography.titleSmall,&#10;                                    color = TextPrimary,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                            }&#10;&#10;                            // QR Code URL Link&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = Surface),&#10;                                shape = RoundedCornerShape(8.dp),&#10;                                onClick = onShowQR&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(12.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;QR Code URL:&quot;,&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        color = TextSecondary,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(4.dp))&#10;                                    Text(&#10;                                        text = visitor.qrCodeUrl,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = Primary,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Text(&#10;                                text = &quot; QR code has been emailed to visitor&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = Success,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Action Buttons&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = onShowQR,&#10;                            modifier = Modifier.weight(1f),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = Primary,&#10;                                contentColor = OnPrimary&#10;                            )&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.QrCode,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Text(&quot;View QR&quot;)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { /* Share QR Code URL */ },&#10;                            modifier = Modifier.weight(1f),&#10;                            colors = ButtonDefaults.outlinedButtonColors(&#10;                                contentColor = Primary&#10;                            )&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Share,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Text(&quot;Share&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            } else if (hasPass) {&#10;                // Legacy pass without QR code URL (fallback)&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Pass Generated Successfully&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = Success,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Valid until: ${visitor.date} ${visitor.time}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = TextSecondary&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Pass ID: PASS-${visitor.id.uppercase()}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;&#10;                // QR Code preview placeholder&#10;                Card(&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .align(Alignment.CenterHorizontally),&#10;                    colors = CardDefaults.cardColors(containerColor = Surface),&#10;                    onClick = onShowQR&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.QrCode,&#10;                                contentDescription = &quot;QR Code&quot;,&#10;                                tint = Primary,&#10;                                modifier = Modifier.size(40.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;Tap to view&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = TextSecondary,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                Text(&#10;                    text = &quot;No pass generated yet. Generate a digital pass for easy entry.&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;&#10;                Button(&#10;                    onClick = onGeneratePass,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Success,&#10;                        contentColor = OnSuccess&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.QrCode,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Generate Digital Pass&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper composable for displaying information rows&#10;@Composable&#10;private fun InfoRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = label,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(16.dp)&#10;        )&#10;        Text(&#10;            text = &quot;$label:&quot;,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextTertiary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextSecondary,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;// Helper function to format date time&#10;private fun formatDateTime(isoDateTime: String): String {&#10;    return try {&#10;        // Simple formatting - you can enhance this with proper date formatting&#10;        val parts = isoDateTime.split(&quot;T&quot;)&#10;        if (parts.size &gt;= 2) {&#10;            val date = parts[0]&#10;            val time = parts[1].split(&quot;Z&quot;)[0].substring(0, 5) // Get HH:mm&#10;            &quot;$date at $time&quot;&#10;        } else {&#10;            isoDateTime&#10;        }&#10;    } catch (e: Exception) {&#10;        isoDateTime&#10;    }&#10;}&#10;&#10;// Missing ActionButtonsSection function&#10;@Composable&#10;private fun ActionButtonsSection(&#10;    visitor: Visitor,&#10;    hasPass: Boolean,&#10;    onEdit: () -&gt; Unit,&#10;    onDelete: () -&gt; Unit,&#10;    onGeneratePass: () -&gt; Unit,&#10;    onShareQR: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Actions&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                // Edit Button&#10;                OutlinedButton(&#10;                    onClick = onEdit,&#10;                    modifier = Modifier.weight(1f),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = Primary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&quot;Edit&quot;)&#10;                }&#10;&#10;                // Delete Button&#10;                OutlinedButton(&#10;                    onClick = onDelete,&#10;                    modifier = Modifier.weight(1f),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = Error&#10;                    ),&#10;                    border = androidx.compose.foundation.BorderStroke(1.dp, Error)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Delete,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&quot;Delete&quot;)&#10;                }&#10;            }&#10;&#10;            if (!hasPass &amp;&amp; visitor.status == VisitorStatus.APPROVED) {&#10;                Button(&#10;                    onClick = onGeneratePass,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Success,&#10;                        contentColor = OnSuccess&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.QrCode,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Generate Digital Pass&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Missing DeleteVisitorDialog function&#10;@Composable&#10;private fun DeleteVisitorDialog(&#10;    visitorName: String,&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Warning,&#10;                    contentDescription = &quot;Warning&quot;,&#10;                    tint = Error,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Delete Visitor&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Are you sure you want to delete $visitorName? This action cannot be undone.&quot;,&#10;                color = TextSecondary,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Error,&#10;                    contentColor = OnError&#10;                )&#10;            ) {&#10;                Text(&quot;Delete&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;, color = TextSecondary)&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}&#10;&#10;// Missing QRCodeDialog function&#10;@Composable&#10;private fun QRCodeDialog(&#10;    visitor: Visitor,&#10;    onDismiss: () -&gt; Unit,&#10;    onShare: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.QrCode,&#10;                    contentDescription = &quot;QR Code&quot;,&#10;                    tint = Primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;QR Code&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // QR Code placeholder&#10;                Card(&#10;                    modifier = Modifier.size(200.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Surface),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.QrCode,&#10;                                contentDescription = &quot;QR Code&quot;,&#10;                                tint = Primary,&#10;                                modifier = Modifier.size(80.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;QR Code for ${visitor.name}&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = TextSecondary,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                visitor.qrCodeUrl?.let { url -&gt;&#10;                    Text(&#10;                        text = &quot;URL: $url&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Primary,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onShare,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Primary,&#10;                    contentColor = OnPrimary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Share,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Share&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Close&quot;, color = TextSecondary)&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}&#10;&#10;// Missing GeneratePassDialog function&#10;@Composable&#10;private fun GeneratePassDialog(&#10;    visitor: Visitor,&#10;    isLoading: Boolean,&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = if (isLoading) { {} } else onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.QrCode,&#10;                    contentDescription = &quot;Generate Pass&quot;,&#10;                    tint = Success,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Generate Digital Pass&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Generate a digital pass for ${visitor.name}?&quot;,&#10;                    color = TextSecondary,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;This will create a QR code that the visitor can use for entry.&quot;,&#10;                    color = TextTertiary,&#10;                    style = MaterialTheme.typography.bodySmall&#10;                )&#10;&#10;                if (isLoading) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(16.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = Primary&#10;                        )&#10;                        Text(&#10;                            text = &quot;Generating pass...&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = TextSecondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                enabled = !isLoading,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Success,&#10;                    contentColor = OnSuccess&#10;                )&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        strokeWidth = 2.dp,&#10;                        color = OnSuccess&#10;                    )&#10;                } else {&#10;                    Text(&quot;Generate&quot;)&#10;                }&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(&#10;                onClick = onDismiss,&#10;                enabled = !isLoading&#10;            ) {&#10;                Text(&quot;Cancel&quot;, color = TextSecondary)&#10;            }&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorDetailsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorDetailsViewModel.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.permitely.data.models.GetVisitorByIdData&#10;import com.example.permitely.data.repository.VisitorRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * UI State for Visitor Details Screen&#10; */&#10;data class VisitorDetailsUiState(&#10;    val isLoading: Boolean = false,&#10;    val visitorData: GetVisitorByIdData? = null,&#10;    val errorMessage: String? = null&#10;)&#10;&#10;/**&#10; * ViewModel for Visitor Details Screen&#10; * Manages fetching detailed visitor information by ID from the API&#10; */&#10;@HiltViewModel&#10;class VisitorDetailsViewModel @Inject constructor(&#10;    private val visitorRepository: VisitorRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(VisitorDetailsUiState())&#10;    val uiState: StateFlow&lt;VisitorDetailsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    /**&#10;     * Load visitor details by ID from the API&#10;     * @param visitorId The ID of the visitor to fetch&#10;     */&#10;    fun loadVisitorDetails(visitorId: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(&#10;                isLoading = true,&#10;                errorMessage = null&#10;            )&#10;&#10;            visitorRepository.getVisitorById(visitorId).collect { result -&gt;&#10;                result.fold(&#10;                    onSuccess = { visitorData -&gt;&#10;                        println(&quot;DEBUG: Successfully loaded visitor details for ID: $visitorId&quot;)&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            visitorData = visitorData,&#10;                            errorMessage = null&#10;                        )&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        println(&quot;DEBUG: Failed to load visitor details: ${exception.message}&quot;)&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            errorMessage = exception.message&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Refresh visitor details&#10;     */&#10;    fun refreshVisitorDetails(visitorId: String) {&#10;        loadVisitorDetails(visitorId)&#10;    }&#10;&#10;    /**&#10;     * Clear error message&#10;     */&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(errorMessage = null)&#10;    }&#10;&#10;    /**&#10;     * Convert API VisitorData to UI Visitor model&#10;     */&#10;    fun convertToUiVisitor(visitorData: GetVisitorByIdData): Visitor {&#10;        val visitor = visitorData.visitor&#10;        val pass = visitorData.pass&#10;&#10;        return Visitor(&#10;            id = visitor.visitorId.toString(),&#10;            name = visitor.name,&#10;            email = visitor.email,&#10;            phone = visitor.phoneNumber,&#10;            purpose = visitor.purposeOfVisit,&#10;            date = visitor.createdAt.split(&quot;T&quot;)[0], // Extract date part&#10;            time = visitor.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0], // Extract time part&#10;            status = when(visitor.status) {&#10;                &quot;PENDING&quot; -&gt; VisitorStatus.PENDING&#10;                &quot;APPROVED&quot; -&gt; VisitorStatus.APPROVED&#10;                &quot;REJECTED&quot; -&gt; VisitorStatus.REJECTED&#10;                &quot;EXPIRED&quot; -&gt; VisitorStatus.EXPIRED&#10;                else -&gt; VisitorStatus.PENDING&#10;            },&#10;            createdAt = visitor.createdAt,&#10;            hasQRCode = pass != null,&#10;            qrCodeUrl = pass?.qrCodeUrl,&#10;            passId = pass?.passId?.toString(),&#10;            expiryTime = pass?.expiryTime&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.permitely.data.models.GetVisitorByIdData&#10;import com.example.permitely.data.repository.VisitorRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * UI State for Visitor Details Screen&#10; */&#10;data class VisitorDetailsUiState(&#10;    val isLoading: Boolean = false,&#10;    val visitorData: GetVisitorByIdData? = null,&#10;    val errorMessage: String? = null&#10;)&#10;&#10;/**&#10; * ViewModel for Visitor Details Screen&#10; * Manages fetching detailed visitor information by ID from the API&#10; */&#10;@HiltViewModel&#10;class VisitorDetailsViewModel @Inject constructor(&#10;    private val visitorRepository: VisitorRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(VisitorDetailsUiState())&#10;    val uiState: StateFlow&lt;VisitorDetailsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    /**&#10;     * Load visitor details by ID from the API&#10;     * @param visitorId The ID of the visitor to fetch&#10;     */&#10;    fun loadVisitorDetails(visitorId: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(&#10;                isLoading = true,&#10;                errorMessage = null&#10;            )&#10;&#10;            visitorRepository.getVisitorById(visitorId).collect { result -&gt;&#10;                result.fold(&#10;                    onSuccess = { visitorData -&gt;&#10;                        println(&quot;DEBUG: Successfully loaded visitor details for ID: $visitorId&quot;)&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            visitorData = visitorData,&#10;                            errorMessage = null&#10;                        )&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        println(&quot;DEBUG: Failed to load visitor details: ${exception.message}&quot;)&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            errorMessage = exception.message&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Refresh visitor details&#10;     */&#10;    fun refreshVisitorDetails(visitorId: String) {&#10;        loadVisitorDetails(visitorId)&#10;    }&#10;&#10;    /**&#10;     * Clear error message&#10;     */&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(errorMessage = null)&#10;    }&#10;&#10;    /**&#10;     * Convert API VisitorData to UI Visitor model&#10;     */&#10;    fun convertToUiVisitor(visitorData: GetVisitorByIdData): Visitor {&#10;        val visitor = visitorData.visitor&#10;        val latestPass = visitor.passes.firstOrNull() // Get newest pass (first in array)&#10;        &#10;        return Visitor(&#10;            id = visitor.visitorId.toString(),&#10;            name = visitor.name,&#10;            email = visitor.email,&#10;            phone = visitor.phoneNumber,&#10;            purpose = visitor.purposeOfVisit,&#10;            date = visitor.createdAt.split(&quot;T&quot;)[0], // Extract date part&#10;            time = visitor.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0], // Extract time part&#10;            status = when(visitor.status) {&#10;                &quot;PENDING&quot; -&gt; VisitorStatus.PENDING&#10;                &quot;APPROVED&quot; -&gt; VisitorStatus.APPROVED&#10;                &quot;REJECTED&quot; -&gt; VisitorStatus.REJECTED&#10;                &quot;EXPIRED&quot; -&gt; VisitorStatus.EXPIRED&#10;                else -&gt; VisitorStatus.PENDING&#10;            },&#10;            createdAt = visitor.createdAt,&#10;            // Pass information from latest pass&#10;            hasQRCode = latestPass != null,&#10;            qrCodeUrl = latestPass?.qrCodeData, // This is the actual QR code URL&#10;            passId = latestPass?.passId?.toString(),&#10;            expiryTime = latestPass?.expiryTime&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorsListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorsListScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.common.PermitelySearchAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Visitors List Screen - View all visitors hosted by this host&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VisitorsListScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onVisitorClick: (Visitor) -&gt; Unit = {},&#10;    viewModel: VisitorsListViewModel = hiltViewModel()&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedFilter by remember { mutableStateOf(VisitorFilter.ALL) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Observe ViewModel state&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Convert API visitors to UI visitors&#10;    val allVisitors = remember(uiState.visitors) {&#10;        uiState.visitors.map { apiVisitor -&gt;&#10;            viewModel.convertToUiVisitor(apiVisitor)&#10;        }&#10;    }&#10;&#10;    // Handle filter changes and trigger API calls&#10;    LaunchedEffect(selectedFilter) {&#10;        val statusFilter = when (selectedFilter) {&#10;            VisitorFilter.ALL -&gt; null&#10;            VisitorFilter.PENDING -&gt; &quot;PENDING&quot;&#10;            VisitorFilter.APPROVED -&gt; &quot;APPROVED&quot;&#10;            VisitorFilter.REJECTED -&gt; &quot;REJECTED&quot;&#10;            VisitorFilter.EXPIRED -&gt; &quot;EXPIRED&quot;&#10;        }&#10;        viewModel.filterByStatus(statusFilter)&#10;    }&#10;&#10;    // Filter visitors based on search (client-side filtering)&#10;    val filteredVisitors = remember(searchQuery, allVisitors) {&#10;        if (searchQuery.isEmpty()) {&#10;            allVisitors&#10;        } else {&#10;            allVisitors.filter { visitor -&gt;&#10;                visitor.name.contains(searchQuery, ignoreCase = true) ||&#10;                        visitor.email.contains(searchQuery, ignoreCase = true)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Show error if any&#10;    uiState.errorMessage?.let { errorMessage -&gt;&#10;        LaunchedEffect(errorMessage) {&#10;            // You can show a snackbar or toast here&#10;            println(&quot;Error loading visitors: $errorMessage&quot;)&#10;            // Clear error after showing&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top App Bar&#10;            VisitorsListTopBar(&#10;                onNavigateBack = onNavigateBack,&#10;                visitorsCount = filteredVisitors.size&#10;            )&#10;&#10;            // Search and Filters&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Search Bar&#10;                SearchBar(&#10;                    searchQuery = searchQuery,&#10;                    onSearchChange = { searchQuery = it }&#10;                )&#10;&#10;                // Filter Chips&#10;                FilterChips(&#10;                    selectedFilter = selectedFilter,&#10;                    onFilterChange = { selectedFilter = it },&#10;                    visitorCounts = getVisitorCounts(allVisitors)&#10;                )&#10;            }&#10;&#10;            // Visitors List&#10;            if (filteredVisitors.isEmpty()) {&#10;                EmptyState(&#10;                    searchQuery = searchQuery,&#10;                    selectedFilter = selectedFilter&#10;                )&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(horizontal = 16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(filteredVisitors) { visitor -&gt;&#10;                        VisitorCard(&#10;                            visitor = visitor,&#10;                            onVisitorClick = { onVisitorClick(visitor) },&#10;                            onApprove = {&#10;                                // TODO: Implement approve logic&#10;                                scope.launch {&#10;                                    // Simulate API call&#10;                                }&#10;                            },&#10;                            onReject = {&#10;                                // TODO: Implement reject logic&#10;                                scope.launch {&#10;                                    // Simulate API call&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    // Bottom spacing&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorsListTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    visitorsCount: Int&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;All Visitors&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;$visitorsCount visitors found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            IconButton(onClick = { /* TODO: Add sort/filter options */ }) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Sort,&#10;                    contentDescription = &quot;Sort&quot;,&#10;                    tint = TextSecondary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SearchBar(&#10;    searchQuery: String,&#10;    onSearchChange: (String) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Search&quot;,&#10;                tint = TextTertiary,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            PermitelyTextField(&#10;                value = searchQuery,&#10;                onValueChange = onSearchChange,&#10;                label = &quot;Search by name or email...&quot;,&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .background(Color.Transparent)&#10;            )&#10;&#10;            if (searchQuery.isNotEmpty()) {&#10;                IconButton(&#10;                    onClick = { onSearchChange(&quot;&quot;) },&#10;                    modifier = Modifier.size(24.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Clear,&#10;                        contentDescription = &quot;Clear&quot;,&#10;                        tint = TextTertiary,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FilterChips(&#10;    selectedFilter: VisitorFilter,&#10;    onFilterChange: (VisitorFilter) -&gt; Unit,&#10;    visitorCounts: Map&lt;VisitorFilter, Int&gt;&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;        contentPadding = PaddingValues(horizontal = 4.dp)&#10;    ) {&#10;        items(VisitorFilter.values()) { filter -&gt;&#10;            FilterChip(&#10;                filter = filter,&#10;                isSelected = selectedFilter == filter,&#10;                count = visitorCounts[filter] ?: 0,&#10;                onClick = { onFilterChange(filter) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FilterChip(&#10;    filter: VisitorFilter,&#10;    isSelected: Boolean,&#10;    count: Int,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) Primary else Surface&#10;    val contentColor = if (isSelected) OnPrimary else TextSecondary&#10;&#10;    FilterChip(&#10;        selected = isSelected,&#10;        onClick = onClick,&#10;        label = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Text(&#10;                    text = filter.displayName,&#10;                    color = contentColor,&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Medium&#10;                )&#10;                if (count &gt; 0) {&#10;                    Surface(&#10;                        color = if (isSelected) OnPrimary.copy(alpha = 0.2f) else Primary.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ) {&#10;                        Text(&#10;                            text = count.toString(),&#10;                            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = if (isSelected) OnPrimary else Primary,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        colors = FilterChipDefaults.filterChipColors(&#10;            selectedContainerColor = backgroundColor,&#10;            selectedLabelColor = contentColor,&#10;            containerColor = backgroundColor,&#10;            labelColor = contentColor&#10;        ),&#10;        border = FilterChipDefaults.filterChipBorder(&#10;            enabled = true,&#10;            selected = isSelected,&#10;            borderColor = if (isSelected) Primary else BorderLight,&#10;            selectedBorderColor = Primary&#10;        )&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun VisitorCard(&#10;    visitor: Visitor,&#10;    onVisitorClick: () -&gt; Unit,&#10;    onApprove: () -&gt; Unit,&#10;    onReject: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        onClick = onVisitorClick&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Header Row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                // Visitor Info&#10;                Row(&#10;                    modifier = Modifier.weight(1f),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Avatar&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(48.dp)&#10;                            .background(&#10;                                brush = Brush.radialGradient(&#10;                                    colors = listOf(&#10;                                        getStatusColor(visitor.status),&#10;                                        getStatusColor(visitor.status).copy(alpha = 0.7f)&#10;                                    )&#10;                                ),&#10;                                shape = CircleShape&#10;                            ),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = visitor.name.first().toString().uppercase(),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = OnPrimary,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    // Name and Email&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = visitor.name,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = TextPrimary,&#10;                            fontWeight = FontWeight.Bold,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = visitor.email,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = TextSecondary,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Status Badge&#10;                StatusBadge(status = visitor.status)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Visitor Details&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Phone,&#10;                label = &quot;Phone&quot;,&#10;                value = visitor.phone&#10;            )&#10;&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Description,&#10;                label = &quot;Purpose&quot;,&#10;                value = visitor.purpose&#10;            )&#10;&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Schedule,&#10;                label = &quot;Visit Time&quot;,&#10;                value = &quot;${visitor.date} at ${visitor.time}&quot;&#10;            )&#10;&#10;            // Action Buttons for Pending Visitors&#10;            if (visitor.status == VisitorStatus.PENDING) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    // Reject Button&#10;                    OutlinedButton(&#10;                        onClick = onReject,&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            contentColor = Error,&#10;                            containerColor = Error.copy(alpha = 0.05f)&#10;                        ),&#10;                        border = androidx.compose.foundation.BorderStroke(1.dp, Error)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Close,&#10;                            contentDescription = &quot;Reject&quot;,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&quot;Reject&quot;)&#10;                    }&#10;&#10;                    // Approve Button&#10;                    Button(&#10;                        onClick = onApprove,&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Success,&#10;                            contentColor = OnSuccess&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Check,&#10;                            contentDescription = &quot;Approve&quot;,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&quot;Approve&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorDetailsRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = label,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(16.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;&#10;        Text(&#10;            text = &quot;$label: &quot;,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextTertiary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextSecondary,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusBadge(status: VisitorStatus) {&#10;    val (backgroundColor, textColor, icon) = when (status) {&#10;        VisitorStatus.PENDING -&gt; Triple(Warning.copy(alpha = 0.1f), Warning, Icons.Default.Schedule)&#10;        VisitorStatus.APPROVED -&gt; Triple(Success.copy(alpha = 0.1f), Success, Icons.Default.CheckCircle)&#10;        VisitorStatus.REJECTED -&gt; Triple(Error.copy(alpha = 0.1f), Error, Icons.Default.Cancel)&#10;        VisitorStatus.EXPIRED -&gt; Triple(TextTertiary.copy(alpha = 0.1f), TextTertiary, Icons.Default.Timer)&#10;    }&#10;&#10;    Surface(&#10;        color = backgroundColor,&#10;        shape = RoundedCornerShape(20.dp),&#10;        modifier = Modifier.clip(RoundedCornerShape(20.dp))&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = status.name,&#10;                tint = textColor,&#10;                modifier = Modifier.size(12.dp)&#10;            )&#10;            Text(&#10;                text = status.displayName,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = textColor,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyState(&#10;    searchQuery: String,&#10;    selectedFilter: VisitorFilter&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = if (searchQuery.isNotEmpty()) Icons.Default.SearchOff else Icons.Default.PersonOff,&#10;            contentDescription = &quot;No visitors&quot;,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = if (searchQuery.isNotEmpty()) {&#10;                &quot;No visitors found&quot;&#10;            } else {&#10;                &quot;No ${selectedFilter.displayName.lowercase()} visitors&quot;&#10;            },&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextSecondary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Text(&#10;            text = if (searchQuery.isNotEmpty()) {&#10;                &quot;Try adjusting your search terms&quot;&#10;            } else {&#10;                &quot;Create a new visitor appointment to get started&quot;&#10;            },&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = TextTertiary&#10;        )&#10;    }&#10;}&#10;&#10;// Helper functions and data classes&#10;private fun getStatusColor(status: VisitorStatus): Color {&#10;    return when (status) {&#10;        VisitorStatus.PENDING -&gt; Warning&#10;        VisitorStatus.APPROVED -&gt; Success&#10;        VisitorStatus.REJECTED -&gt; Error&#10;        VisitorStatus.EXPIRED -&gt; TextTertiary&#10;    }&#10;}&#10;&#10;private fun getVisitorCounts(visitors: List&lt;Visitor&gt;): Map&lt;VisitorFilter, Int&gt; {&#10;    return mapOf(&#10;        VisitorFilter.ALL to visitors.size,&#10;        VisitorFilter.PENDING to visitors.count { it.status == VisitorStatus.PENDING },&#10;        VisitorFilter.APPROVED to visitors.count { it.status == VisitorStatus.APPROVED },&#10;        VisitorFilter.REJECTED to visitors.count { it.status == VisitorStatus.REJECTED },&#10;        VisitorFilter.EXPIRED to visitors.count { it.status == VisitorStatus.EXPIRED }&#10;    )&#10;}&#10;&#10;// Data classes and enums&#10;data class Visitor(&#10;    val id: String,&#10;    val name: String,&#10;    val email: String,&#10;    val phone: String,&#10;    val purpose: String,&#10;    val date: String,&#10;    val time: String,&#10;    val status: VisitorStatus,&#10;    val createdAt: String,&#10;    // QR Code and Pass information&#10;    val hasQRCode: Boolean = false,&#10;    val qrCodeUrl: String? = null,&#10;    val passId: String? = null,&#10;    val expiryTime: String? = null&#10;)&#10;&#10;enum class VisitorStatus(val displayName: String) {&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;)&#10;}&#10;&#10;enum class VisitorFilter(val displayName: String) {&#10;    ALL(&quot;All&quot;),&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;)&#10;}&#10;&#10;// Dummy data function&#10;private fun getDummyVisitors(): List&lt;Visitor&gt; {&#10;    return listOf(&#10;        Visitor(&#10;            id = &quot;1&quot;,&#10;            name = &quot;Alice Johnson&quot;,&#10;            email = &quot;alice.johnson@email.com&quot;,&#10;            phone = &quot;+1 (555) 123-4567&quot;,&#10;            purpose = &quot;Business Meeting&quot;,&#10;            date = &quot;Dec 15, 2024&quot;,&#10;            time = &quot;2:30 PM&quot;,&#10;            status = VisitorStatus.PENDING,&#10;            createdAt = &quot;2024-12-14&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;2&quot;,&#10;            name = &quot;Bob Wilson&quot;,&#10;            email = &quot;bob.wilson@email.com&quot;,&#10;            phone = &quot;+1 (555) 234-5678&quot;,&#10;            purpose = &quot;Delivery&quot;,&#10;            date = &quot;Dec 14, 2024&quot;,&#10;            time = &quot;1:45 PM&quot;,&#10;            status = VisitorStatus.APPROVED,&#10;            createdAt = &quot;2024-12-13&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;3&quot;,&#10;            name = &quot;Carol Davis&quot;,&#10;            email = &quot;carol.davis@email.com&quot;,&#10;            phone = &quot;+1 (555) 345-6789&quot;,&#10;            purpose = &quot;Maintenance Work&quot;,&#10;            date = &quot;Dec 16, 2024&quot;,&#10;            time = &quot;10:00 AM&quot;,&#10;            status = VisitorStatus.PENDING,&#10;            createdAt = &quot;2024-12-14&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;4&quot;,&#10;            name = &quot;David Brown&quot;,&#10;            email = &quot;david.brown@email.com&quot;,&#10;            phone = &quot;+1 (555) 456-7890&quot;,&#10;            purpose = &quot;Guest Visit&quot;,&#10;            date = &quot;Dec 12, 2024&quot;,&#10;            time = &quot;11:30 AM&quot;,&#10;            status = VisitorStatus.REJECTED,&#10;            createdAt = &quot;2024-12-11&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;5&quot;,&#10;            name = &quot;Emma Taylor&quot;,&#10;            email = &quot;emma.taylor@email.com&quot;,&#10;            phone = &quot;+1 (555) 567-8901&quot;,&#10;            purpose = &quot;Business Consultation&quot;,&#10;            date = &quot;Dec 10, 2024&quot;,&#10;            time = &quot;3:15 PM&quot;,&#10;            status = VisitorStatus.EXPIRED,&#10;            createdAt = &quot;2024-12-09&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;6&quot;,&#10;            name = &quot;Frank Miller&quot;,&#10;            email = &quot;frank.miller@email.com&quot;,&#10;            phone = &quot;+1 (555) 678-9012&quot;,&#10;            purpose = &quot;Technical Support&quot;,&#10;            date = &quot;Dec 17, 2024&quot;,&#10;            time = &quot;9:00 AM&quot;,&#10;            status = VisitorStatus.APPROVED,&#10;            createdAt = &quot;2024-12-14&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;7&quot;,&#10;            name = &quot;Grace Lee&quot;,&#10;            email = &quot;grace.lee@email.com&quot;,&#10;            phone = &quot;+1 (555) 789-0123&quot;,&#10;            purpose = &quot;Interview&quot;,&#10;            date = &quot;Dec 18, 2024&quot;,&#10;            time = &quot;2:00 PM&quot;,&#10;            status = VisitorStatus.PENDING,&#10;            createdAt = &quot;2024-12-15&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;8&quot;,&#10;            name = &quot;Henry Clark&quot;,&#10;            email = &quot;henry.clark@email.com&quot;,&#10;            phone = &quot;+1 (555) 890-1234&quot;,&#10;            purpose = &quot;Package Pickup&quot;,&#10;            date = &quot;Dec 13, 2024&quot;,&#10;            time = &quot;4:30 PM&quot;,&#10;            status = VisitorStatus.APPROVED,&#10;            createdAt = &quot;2024-12-12&quot;&#10;        )&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.common.PermitelySearchAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Visitors List Screen - View all visitors hosted by this host&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VisitorsListScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onVisitorClick: (Visitor) -&gt; Unit = {},&#10;    viewModel: VisitorsListViewModel = hiltViewModel()&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedFilter by remember { mutableStateOf(VisitorFilter.ALL) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Observe ViewModel state&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Convert API visitors to UI visitors&#10;    val allVisitors = remember(uiState.visitors) {&#10;        uiState.visitors.map { apiVisitor -&gt;&#10;            viewModel.convertToUiVisitor(apiVisitor)&#10;        }&#10;    }&#10;&#10;    // Handle filter changes and trigger API calls&#10;    LaunchedEffect(selectedFilter) {&#10;        val statusFilter = when (selectedFilter) {&#10;            VisitorFilter.ALL -&gt; null&#10;            VisitorFilter.PENDING -&gt; &quot;PENDING&quot;&#10;            VisitorFilter.APPROVED -&gt; &quot;APPROVED&quot;&#10;            VisitorFilter.REJECTED -&gt; &quot;REJECTED&quot;&#10;            VisitorFilter.EXPIRED -&gt; &quot;EXPIRED&quot;&#10;        }&#10;        viewModel.filterByStatus(statusFilter)&#10;    }&#10;&#10;    // Filter visitors based on search (client-side filtering)&#10;    val filteredVisitors = remember(searchQuery, allVisitors) {&#10;        if (searchQuery.isEmpty()) {&#10;            allVisitors&#10;        } else {&#10;            allVisitors.filter { visitor -&gt;&#10;                visitor.name.contains(searchQuery, ignoreCase = true) ||&#10;                        visitor.email.contains(searchQuery, ignoreCase = true)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Show error if any&#10;    uiState.errorMessage?.let { errorMessage -&gt;&#10;        LaunchedEffect(errorMessage) {&#10;            // You can show a snackbar or toast here&#10;            println(&quot;Error loading visitors: $errorMessage&quot;)&#10;            // Clear error after showing&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top App Bar&#10;            VisitorsListTopBar(&#10;                onNavigateBack = onNavigateBack,&#10;                visitorsCount = filteredVisitors.size&#10;            )&#10;&#10;            // Search and Filters&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Search Bar&#10;                SearchBar(&#10;                    searchQuery = searchQuery,&#10;                    onSearchChange = { searchQuery = it }&#10;                )&#10;&#10;                // Filter Chips&#10;                FilterChips(&#10;                    selectedFilter = selectedFilter,&#10;                    onFilterChange = { selectedFilter = it },&#10;                    visitorCounts = getVisitorCounts(allVisitors)&#10;                )&#10;            }&#10;&#10;            // Visitors List&#10;            if (filteredVisitors.isEmpty()) {&#10;                EmptyState(&#10;                    searchQuery = searchQuery,&#10;                    selectedFilter = selectedFilter&#10;                )&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(horizontal = 16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(filteredVisitors) { visitor -&gt;&#10;                        VisitorCard(&#10;                            visitor = visitor,&#10;                            onVisitorClick = { onVisitorClick(visitor) },&#10;                            onApprove = {&#10;                                // TODO: Implement approve logic&#10;                                scope.launch {&#10;                                    // Simulate API call&#10;                                }&#10;                            },&#10;                            onReject = {&#10;                                // TODO: Implement reject logic&#10;                                scope.launch {&#10;                                    // Simulate API call&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    // Bottom spacing&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorsListTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    visitorsCount: Int&#10;) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        color = Surface,&#10;        shadowElevation = 4.dp,&#10;        tonalElevation = 4.dp&#10;    ) {&#10;        Column {&#10;            // Add status bar spacer&#10;            Spacer(modifier = Modifier.windowInsetsTopHeight(WindowInsets.statusBars))&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = onNavigateBack) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = &quot;All Visitors&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        color = TextPrimary,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = &quot;$visitorsCount visitors found&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;&#10;                IconButton(onClick = { /* TODO: Add sort/filter options */ }) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Sort,&#10;                        contentDescription = &quot;Sort&quot;,&#10;                        tint = TextSecondary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SearchBar(&#10;    searchQuery: String,&#10;    onSearchChange: (String) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Search&quot;,&#10;                tint = TextTertiary,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            PermitelyTextField(&#10;                value = searchQuery,&#10;                onValueChange = onSearchChange,&#10;                label = &quot;Search by name or email...&quot;,&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .background(Color.Transparent)&#10;            )&#10;&#10;            if (searchQuery.isNotEmpty()) {&#10;                IconButton(&#10;                    onClick = { onSearchChange(&quot;&quot;) },&#10;                    modifier = Modifier.size(24.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Clear,&#10;                        contentDescription = &quot;Clear&quot;,&#10;                        tint = TextTertiary,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FilterChips(&#10;    selectedFilter: VisitorFilter,&#10;    onFilterChange: (VisitorFilter) -&gt; Unit,&#10;    visitorCounts: Map&lt;VisitorFilter, Int&gt;&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;        contentPadding = PaddingValues(horizontal = 4.dp)&#10;    ) {&#10;        items(VisitorFilter.values()) { filter -&gt;&#10;            FilterChip(&#10;                filter = filter,&#10;                isSelected = selectedFilter == filter,&#10;                count = visitorCounts[filter] ?: 0,&#10;                onClick = { onFilterChange(filter) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FilterChip(&#10;    filter: VisitorFilter,&#10;    isSelected: Boolean,&#10;    count: Int,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) Primary else Surface&#10;    val contentColor = if (isSelected) OnPrimary else TextSecondary&#10;&#10;    FilterChip(&#10;        selected = isSelected,&#10;        onClick = onClick,&#10;        label = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Text(&#10;                    text = filter.displayName,&#10;                    color = contentColor,&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Medium&#10;                )&#10;                if (count &gt; 0) {&#10;                    Surface(&#10;                        color = if (isSelected) OnPrimary.copy(alpha = 0.2f) else Primary.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ) {&#10;                        Text(&#10;                            text = count.toString(),&#10;                            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = if (isSelected) OnPrimary else Primary,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        colors = FilterChipDefaults.filterChipColors(&#10;            selectedContainerColor = backgroundColor,&#10;            selectedLabelColor = contentColor,&#10;            containerColor = backgroundColor,&#10;            labelColor = contentColor&#10;        ),&#10;        border = FilterChipDefaults.filterChipBorder(&#10;            enabled = true,&#10;            selected = isSelected,&#10;            borderColor = if (isSelected) Primary else BorderLight,&#10;            selectedBorderColor = Primary&#10;        )&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun VisitorCard(&#10;    visitor: Visitor,&#10;    onVisitorClick: () -&gt; Unit,&#10;    onApprove: () -&gt; Unit,&#10;    onReject: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        onClick = onVisitorClick&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Header Row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                // Visitor Info&#10;                Row(&#10;                    modifier = Modifier.weight(1f),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Avatar&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(48.dp)&#10;                            .background(&#10;                                brush = Brush.radialGradient(&#10;                                    colors = listOf(&#10;                                        getStatusColor(visitor.status),&#10;                                        getStatusColor(visitor.status).copy(alpha = 0.7f)&#10;                                    )&#10;                                ),&#10;                                shape = CircleShape&#10;                            ),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = visitor.name.first().toString().uppercase(),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = OnPrimary,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    // Name and Email&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = visitor.name,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = TextPrimary,&#10;                            fontWeight = FontWeight.Bold,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = visitor.email,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = TextSecondary,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Status Badge&#10;                StatusBadge(status = visitor.status)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Visitor Details&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Phone,&#10;                label = &quot;Phone&quot;,&#10;                value = visitor.phone&#10;            )&#10;&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Description,&#10;                label = &quot;Purpose&quot;,&#10;                value = visitor.purpose&#10;            )&#10;&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Schedule,&#10;                label = &quot;Visit Time&quot;,&#10;                value = &quot;${visitor.date} at ${visitor.time}&quot;&#10;            )&#10;&#10;            // Action Buttons for Pending Visitors&#10;            if (visitor.status == VisitorStatus.PENDING) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    // Reject Button&#10;                    OutlinedButton(&#10;                        onClick = onReject,&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            contentColor = Error,&#10;                            containerColor = Error.copy(alpha = 0.05f)&#10;                        ),&#10;                        border = androidx.compose.foundation.BorderStroke(1.dp, Error)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Close,&#10;                            contentDescription = &quot;Reject&quot;,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&quot;Reject&quot;)&#10;                    }&#10;&#10;                    // Approve Button&#10;                    Button(&#10;                        onClick = onApprove,&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Success,&#10;                            contentColor = OnSuccess&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Check,&#10;                            contentDescription = &quot;Approve&quot;,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&quot;Approve&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorDetailsRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = label,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(16.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;&#10;        Text(&#10;            text = &quot;$label: &quot;,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextTertiary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextSecondary,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusBadge(status: VisitorStatus) {&#10;    val (backgroundColor, textColor, icon) = when (status) {&#10;        VisitorStatus.PENDING -&gt; Triple(Warning.copy(alpha = 0.1f), Warning, Icons.Default.Schedule)&#10;        VisitorStatus.APPROVED -&gt; Triple(Success.copy(alpha = 0.1f), Success, Icons.Default.CheckCircle)&#10;        VisitorStatus.REJECTED -&gt; Triple(Error.copy(alpha = 0.1f), Error, Icons.Default.Cancel)&#10;        VisitorStatus.EXPIRED -&gt; Triple(TextTertiary.copy(alpha = 0.1f), TextTertiary, Icons.Default.Timer)&#10;    }&#10;&#10;    Surface(&#10;        color = backgroundColor,&#10;        shape = RoundedCornerShape(20.dp),&#10;        modifier = Modifier.clip(RoundedCornerShape(20.dp))&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = status.name,&#10;                tint = textColor,&#10;                modifier = Modifier.size(12.dp)&#10;            )&#10;            Text(&#10;                text = status.displayName,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = textColor,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyState(&#10;    searchQuery: String,&#10;    selectedFilter: VisitorFilter&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = if (searchQuery.isNotEmpty()) Icons.Default.SearchOff else Icons.Default.PersonOff,&#10;            contentDescription = &quot;No visitors&quot;,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = if (searchQuery.isNotEmpty()) {&#10;                &quot;No visitors found&quot;&#10;            } else {&#10;                &quot;No ${selectedFilter.displayName.lowercase()} visitors&quot;&#10;            },&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextSecondary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Text(&#10;            text = if (searchQuery.isNotEmpty()) {&#10;                &quot;Try adjusting your search terms&quot;&#10;            } else {&#10;                &quot;Create a new visitor appointment to get started&quot;&#10;            },&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = TextTertiary&#10;        )&#10;    }&#10;}&#10;&#10;// Helper functions and data classes&#10;private fun getStatusColor(status: VisitorStatus): Color {&#10;    return when (status) {&#10;        VisitorStatus.PENDING -&gt; Warning&#10;        VisitorStatus.APPROVED -&gt; Success&#10;        VisitorStatus.REJECTED -&gt; Error&#10;        VisitorStatus.EXPIRED -&gt; TextTertiary&#10;    }&#10;}&#10;&#10;private fun getVisitorCounts(visitors: List&lt;Visitor&gt;): Map&lt;VisitorFilter, Int&gt; {&#10;    return mapOf(&#10;        VisitorFilter.ALL to visitors.size,&#10;        VisitorFilter.PENDING to visitors.count { it.status == VisitorStatus.PENDING },&#10;        VisitorFilter.APPROVED to visitors.count { it.status == VisitorStatus.APPROVED },&#10;        VisitorFilter.REJECTED to visitors.count { it.status == VisitorStatus.REJECTED },&#10;        VisitorFilter.EXPIRED to visitors.count { it.status == VisitorStatus.EXPIRED }&#10;    )&#10;}&#10;&#10;// Data classes and enums&#10;data class Visitor(&#10;    val id: String,&#10;    val name: String,&#10;    val email: String,&#10;    val phone: String,&#10;    val purpose: String,&#10;    val date: String,&#10;    val time: String,&#10;    val status: VisitorStatus,&#10;    val createdAt: String,&#10;    // QR Code and Pass information&#10;    val hasQRCode: Boolean = false,&#10;    val qrCodeUrl: String? = null,&#10;    val passId: String? = null,&#10;    val expiryTime: String? = null&#10;)&#10;&#10;enum class VisitorStatus(val displayName: String) {&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;)&#10;}&#10;&#10;enum class VisitorFilter(val displayName: String) {&#10;    ALL(&quot;All&quot;),&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;)&#10;}&#10;&#10;// Dummy data function&#10;private fun getDummyVisitors(): List&lt;Visitor&gt; {&#10;    return listOf(&#10;        Visitor(&#10;            id = &quot;1&quot;,&#10;            name = &quot;Alice Johnson&quot;,&#10;            email = &quot;alice.johnson@email.com&quot;,&#10;            phone = &quot;+1 (555) 123-4567&quot;,&#10;            purpose = &quot;Business Meeting&quot;,&#10;            date = &quot;Dec 15, 2024&quot;,&#10;            time = &quot;2:30 PM&quot;,&#10;            status = VisitorStatus.PENDING,&#10;            createdAt = &quot;2024-12-14&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;2&quot;,&#10;            name = &quot;Bob Wilson&quot;,&#10;            email = &quot;bob.wilson@email.com&quot;,&#10;            phone = &quot;+1 (555) 234-5678&quot;,&#10;            purpose = &quot;Delivery&quot;,&#10;            date = &quot;Dec 14, 2024&quot;,&#10;            time = &quot;1:45 PM&quot;,&#10;            status = VisitorStatus.APPROVED,&#10;            createdAt = &quot;2024-12-13&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;3&quot;,&#10;            name = &quot;Carol Davis&quot;,&#10;            email = &quot;carol.davis@email.com&quot;,&#10;            phone = &quot;+1 (555) 345-6789&quot;,&#10;            purpose = &quot;Maintenance Work&quot;,&#10;            date = &quot;Dec 16, 2024&quot;,&#10;            time = &quot;10:00 AM&quot;,&#10;            status = VisitorStatus.PENDING,&#10;            createdAt = &quot;2024-12-14&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;4&quot;,&#10;            name = &quot;David Brown&quot;,&#10;            email = &quot;david.brown@email.com&quot;,&#10;            phone = &quot;+1 (555) 456-7890&quot;,&#10;            purpose = &quot;Guest Visit&quot;,&#10;            date = &quot;Dec 12, 2024&quot;,&#10;            time = &quot;11:30 AM&quot;,&#10;            status = VisitorStatus.REJECTED,&#10;            createdAt = &quot;2024-12-11&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;5&quot;,&#10;            name = &quot;Emma Taylor&quot;,&#10;            email = &quot;emma.taylor@email.com&quot;,&#10;            phone = &quot;+1 (555) 567-8901&quot;,&#10;            purpose = &quot;Business Consultation&quot;,&#10;            date = &quot;Dec 10, 2024&quot;,&#10;            time = &quot;3:15 PM&quot;,&#10;            status = VisitorStatus.EXPIRED,&#10;            createdAt = &quot;2024-12-09&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;6&quot;,&#10;            name = &quot;Frank Miller&quot;,&#10;            email = &quot;frank.miller@email.com&quot;,&#10;            phone = &quot;+1 (555) 678-9012&quot;,&#10;            purpose = &quot;Technical Support&quot;,&#10;            date = &quot;Dec 17, 2024&quot;,&#10;            time = &quot;9:00 AM&quot;,&#10;            status = VisitorStatus.APPROVED,&#10;            createdAt = &quot;2024-12-14&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;7&quot;,&#10;            name = &quot;Grace Lee&quot;,&#10;            email = &quot;grace.lee@email.com&quot;,&#10;            phone = &quot;+1 (555) 789-0123&quot;,&#10;            purpose = &quot;Interview&quot;,&#10;            date = &quot;Dec 18, 2024&quot;,&#10;            time = &quot;2:00 PM&quot;,&#10;            status = VisitorStatus.PENDING,&#10;            createdAt = &quot;2024-12-15&quot;&#10;        ),&#10;        Visitor(&#10;            id = &quot;8&quot;,&#10;            name = &quot;Henry Clark&quot;,&#10;            email = &quot;henry.clark@email.com&quot;,&#10;            phone = &quot;+1 (555) 890-1234&quot;,&#10;            purpose = &quot;Package Pickup&quot;,&#10;            date = &quot;Dec 13, 2024&quot;,&#10;            time = &quot;4:30 PM&quot;,&#10;            status = VisitorStatus.APPROVED,&#10;            createdAt = &quot;2024-12-12&quot;&#10;        )&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorsListViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorsListViewModel.kt" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.permitely.data.models.VisitorData&#10;import com.example.permitely.data.repository.VisitorRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * UI State for Visitors List Screen&#10; */&#10;data class VisitorsListUiState(&#10;    val isLoading: Boolean = false,&#10;    val visitors: List&lt;VisitorData&gt; = emptyList(),&#10;    val isRefreshing: Boolean = false,&#10;    val errorMessage: String? = null&#10;)&#10;&#10;/**&#10; * ViewModel for Visitors List Screen&#10; * Manages fetching and filtering of visitors from the API&#10; */&#10;@HiltViewModel&#10;class VisitorsListViewModel @Inject constructor(&#10;    private val visitorRepository: VisitorRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(VisitorsListUiState())&#10;    val uiState: StateFlow&lt;VisitorsListUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        // Load all visitors when ViewModel is created&#10;        loadVisitors()&#10;    }&#10;&#10;    /**&#10;     * Load all visitors from the API&#10;     * @param status Optional filter by visitor status&#10;     * @param isRefresh Whether this is a refresh operation&#10;     */&#10;    fun loadVisitors(status: String? = null, isRefresh: Boolean = false) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(&#10;                isLoading = !isRefresh,&#10;                isRefreshing = isRefresh,&#10;                errorMessage = null&#10;            )&#10;&#10;            visitorRepository.getAllVisitors(status).collect { result -&gt;&#10;                result.fold(&#10;                    onSuccess = { visitors -&gt;&#10;                        println(&quot;DEBUG: Successfully loaded ${visitors.size} visitors&quot;)&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            isRefreshing = false,&#10;                            visitors = visitors,&#10;                            errorMessage = null&#10;                        )&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        println(&quot;DEBUG: Failed to load visitors: ${exception.message}&quot;)&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            isRefreshing = false,&#10;                            errorMessage = exception.message&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Refresh visitors list&#10;     */&#10;    fun refreshVisitors(status: String? = null) {&#10;        loadVisitors(status, isRefresh = true)&#10;    }&#10;&#10;    /**&#10;     * Filter visitors by status&#10;     */&#10;    fun filterByStatus(status: String?) {&#10;        loadVisitors(status)&#10;    }&#10;&#10;    /**&#10;     * Clear error message&#10;     */&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(errorMessage = null)&#10;    }&#10;&#10;    /**&#10;     * Convert API VisitorData to UI Visitor model&#10;     */&#10;    fun convertToUiVisitor(visitorData: VisitorData): Visitor {&#10;        return Visitor(&#10;            id = visitorData.visitorId.toString(),&#10;            name = visitorData.name,&#10;            email = visitorData.email,&#10;            phone = visitorData.phoneNumber,&#10;            purpose = visitorData.purposeOfVisit,&#10;            date = visitorData.createdAt.split(&quot;T&quot;)[0], // Extract date part&#10;            time = visitorData.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0], // Extract time part&#10;            status = when(visitorData.status) {&#10;                &quot;PENDING&quot; -&gt; VisitorStatus.PENDING&#10;                &quot;APPROVED&quot; -&gt; VisitorStatus.APPROVED&#10;                &quot;REJECTED&quot; -&gt; VisitorStatus.REJECTED&#10;                &quot;EXPIRED&quot; -&gt; VisitorStatus.EXPIRED&#10;                else -&gt; VisitorStatus.PENDING&#10;            },&#10;            createdAt = visitorData.createdAt,&#10;            hasQRCode = false, // Will be updated when we have pass information&#10;            qrCodeUrl = null,&#10;            passId = null,&#10;            expiryTime = null&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/main/MainNavigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/main/MainNavigation.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.main&#10;&#10;import androidx.compose.runtime.*&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.permitely.data.storage.TokenStorage&#10;import com.example.permitely.ui.host.*&#10;&#10;/**&#10; * Main navigation controller for the authenticated part of the app&#10; * Handles routing between all main app screens with proper back navigation&#10; */&#10;@Composable&#10;fun MainNavigation(&#10;    navController: NavHostController = rememberNavController(),&#10;    userInfo: TokenStorage.UserInfo?,&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;dashboard&quot;&#10;    ) {&#10;        // Dashboard screen&#10;        composable(&quot;dashboard&quot;) {&#10;            when (userInfo?.role?.lowercase()) {&#10;                &quot;host&quot;, &quot;&quot;, null -&gt; {&#10;                    HostDashboardScreen(&#10;                        onCreateVisitor = {&#10;                            navController.navigate(&quot;create_visitor&quot;)&#10;                        },&#10;                        onViewAllVisitors = {&#10;                            navController.navigate(&quot;visitors_list&quot;)&#10;                        },&#10;                        onViewNotifications = {&#10;                            navController.navigate(&quot;notifications&quot;)&#10;                        },&#10;                        onViewProfile = {&#10;                            navController.navigate(&quot;profile&quot;)&#10;                        },&#10;                        onLogout = onLogout&#10;                    )&#10;                }&#10;                &quot;admin&quot; -&gt; {&#10;                    // TODO: Implement admin dashboard when available&#10;                    // For now, show host dashboard&#10;                    HostDashboardScreen(&#10;                        onCreateVisitor = {&#10;                            navController.navigate(&quot;create_visitor&quot;)&#10;                        },&#10;                        onViewAllVisitors = {&#10;                            navController.navigate(&quot;visitors_list&quot;)&#10;                        },&#10;                        onViewNotifications = {&#10;                            navController.navigate(&quot;notifications&quot;)&#10;                        },&#10;                        onViewProfile = {&#10;                            navController.navigate(&quot;profile&quot;)&#10;                        },&#10;                        onLogout = onLogout&#10;                    )&#10;                }&#10;                &quot;guard&quot; -&gt; {&#10;                    // TODO: Implement guard dashboard when available&#10;                    // For now, show host dashboard&#10;                    HostDashboardScreen(&#10;                        onCreateVisitor = {&#10;                            navController.navigate(&quot;create_visitor&quot;)&#10;                        },&#10;                        onViewAllVisitors = {&#10;                            navController.navigate(&quot;visitors_list&quot;)&#10;                        },&#10;                        onViewNotifications = {&#10;                            navController.navigate(&quot;notifications&quot;)&#10;                        },&#10;                        onViewProfile = {&#10;                            navController.navigate(&quot;profile&quot;)&#10;                        },&#10;                        onLogout = onLogout&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Create visitor screen&#10;        composable(&quot;create_visitor&quot;) {&#10;            CreateVisitorScreen(&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                },&#10;                onVisitorCreated = { visitorData -&gt;&#10;                    try {&#10;                        // Navigate to visitor details using the visitor ID from the created visitor&#10;                        val visitorId = visitorData.visitor.visitorId.toString()&#10;                        navController.navigate(&quot;visitor_details/$visitorId&quot;)&#10;                    } catch (e: Exception) {&#10;                        println(&quot;Error processing visitor data: ${e.message}&quot;)&#10;                        e.printStackTrace()&#10;                        // On error, just go back to dashboard&#10;                        navController.popBackStack()&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        // Visitors list screen&#10;        composable(&quot;visitors_list&quot;) {&#10;            VisitorsListScreen(&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                },&#10;                onVisitorClick = { visitor -&gt;&#10;                    // Pass only the visitor ID, not the entire visitor data&#10;                    navController.navigate(&quot;visitor_details/${visitor.id}&quot;)&#10;                }&#10;            )&#10;        }&#10;&#10;        // Visitor details screen - now takes visitor ID as parameter&#10;        composable(&quot;visitor_details/{visitorId}&quot;) { backStackEntry -&gt;&#10;            val visitorId = backStackEntry.arguments?.getString(&quot;visitorId&quot;)&#10;            visitorId?.let { id -&gt;&#10;                VisitorDetailsScreen(&#10;                    visitorId = id,&#10;                    onNavigateBack = {&#10;                        navController.popBackStack()&#10;                    },&#10;                    onEditVisitor = { visitorToEdit -&gt;&#10;                        // TODO: Navigate to edit screen when implemented&#10;                        // navController.navigate(&quot;edit_visitor/${visitorToEdit.id}&quot;)&#10;                    },&#10;                    onDeleteVisitor = { visitorId -&gt;&#10;                        // TODO: Implement visitor deletion logic&#10;                        navController.popBackStack()&#10;                    },&#10;                    onGeneratePass = { visitorId -&gt;&#10;                        // TODO: Implement pass generation logic&#10;                    },&#10;                    onShareQRCode = {&#10;                        // TODO: Implement QR code sharing logic&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Notifications screen&#10;        composable(&quot;notifications&quot;) {&#10;            NotificationsScreen(&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                }&#10;            )&#10;        }&#10;&#10;        // Profile screen&#10;        composable(&quot;profile&quot;) {&#10;            HostProfileScreen(&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                },&#10;                onLogout = onLogout&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// Helper functions to serialize/deserialize visitor data for navigation&#10;private fun createVisitorJson(visitorData: com.example.permitely.data.models.CreateVisitorResponseData): String {&#10;    // Create a simplified JSON string for navigation&#10;    val visitor = visitorData.visitor&#10;    val pass = visitorData.pass&#10;&#10;    return buildString {&#10;        append(&quot;{&quot;)&#10;        append(&quot;\&quot;id\&quot;:\&quot;${visitor.visitorId}\&quot;,&quot;)&#10;        append(&quot;\&quot;name\&quot;:\&quot;${visitor.name}\&quot;,&quot;)&#10;        append(&quot;\&quot;email\&quot;:\&quot;${visitor.email}\&quot;,&quot;)&#10;        append(&quot;\&quot;phone\&quot;:\&quot;${visitor.phoneNumber}\&quot;,&quot;)&#10;        append(&quot;\&quot;purpose\&quot;:\&quot;${visitor.purposeOfVisit}\&quot;,&quot;)&#10;        append(&quot;\&quot;date\&quot;:\&quot;${visitor.createdAt.split(&quot;T&quot;)[0]}\&quot;,&quot;)&#10;        append(&quot;\&quot;time\&quot;:\&quot;${visitor.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0]}\&quot;,&quot;)&#10;        append(&quot;\&quot;status\&quot;:\&quot;${visitor.status}\&quot;,&quot;)&#10;        append(&quot;\&quot;createdAt\&quot;:\&quot;${visitor.createdAt}\&quot;,&quot;)&#10;        append(&quot;\&quot;hasQRCode\&quot;:${pass != null},&quot;)&#10;        append(&quot;\&quot;qrCodeUrl\&quot;:\&quot;${pass?.qrCodeUrl ?: &quot;&quot;}\&quot;,&quot;)&#10;        append(&quot;\&quot;passId\&quot;:\&quot;${pass?.passId ?: &quot;&quot;}\&quot;,&quot;)&#10;        append(&quot;\&quot;expiryTime\&quot;:\&quot;${pass?.expiryTime ?: &quot;&quot;}\&quot;&quot;)&#10;        append(&quot;}&quot;)&#10;    }&#10;}&#10;&#10;private fun createVisitorJsonFromVisitor(visitor: com.example.permitely.ui.host.Visitor): String {&#10;    return buildString {&#10;        append(&quot;{&quot;)&#10;        append(&quot;\&quot;id\&quot;:\&quot;${visitor.id}\&quot;,&quot;)&#10;        append(&quot;\&quot;name\&quot;:\&quot;${visitor.name}\&quot;,&quot;)&#10;        append(&quot;\&quot;email\&quot;:\&quot;${visitor.email}\&quot;,&quot;)&#10;        append(&quot;\&quot;phone\&quot;:\&quot;${visitor.phone}\&quot;,&quot;)&#10;        append(&quot;\&quot;purpose\&quot;:\&quot;${visitor.purpose}\&quot;,&quot;)&#10;        append(&quot;\&quot;date\&quot;:\&quot;${visitor.date}\&quot;,&quot;)&#10;        append(&quot;\&quot;time\&quot;:\&quot;${visitor.time}\&quot;,&quot;)&#10;        append(&quot;\&quot;status\&quot;:\&quot;${visitor.status}\&quot;,&quot;)&#10;        append(&quot;\&quot;createdAt\&quot;:\&quot;${visitor.createdAt}\&quot;,&quot;)&#10;        append(&quot;\&quot;hasQRCode\&quot;:${visitor.hasQRCode},&quot;)&#10;        append(&quot;\&quot;qrCodeUrl\&quot;:\&quot;${visitor.qrCodeUrl ?: &quot;&quot;}\&quot;,&quot;)&#10;        append(&quot;\&quot;passId\&quot;:\&quot;${visitor.passId ?: &quot;&quot;}\&quot;,&quot;)&#10;        append(&quot;\&quot;expiryTime\&quot;:\&quot;${visitor.expiryTime ?: &quot;&quot;}\&quot;&quot;)&#10;        append(&quot;}&quot;)&#10;    }&#10;}&#10;&#10;private fun parseVisitorFromJson(json: String): com.example.permitely.ui.host.Visitor? {&#10;    return try {&#10;        // Simple JSON parsing - in production, consider using Gson&#10;        val cleanJson = json.removeSurrounding(&quot;{&quot;, &quot;}&quot;)&#10;        val pairs = cleanJson.split(&quot;,&quot;).associate { pair -&gt;&#10;            val (key, value) = pair.split(&quot;:&quot;, limit = 2)&#10;            key.trim('&quot;') to value.trim('&quot;')&#10;        }&#10;&#10;        com.example.permitely.ui.host.Visitor(&#10;            id = pairs[&quot;id&quot;] ?: &quot;&quot;,&#10;            name = pairs[&quot;name&quot;] ?: &quot;&quot;,&#10;            email = pairs[&quot;email&quot;] ?: &quot;&quot;,&#10;            phone = pairs[&quot;phone&quot;] ?: &quot;&quot;,&#10;            purpose = pairs[&quot;purpose&quot;] ?: &quot;&quot;,&#10;            date = pairs[&quot;date&quot;] ?: &quot;&quot;,&#10;            time = pairs[&quot;time&quot;] ?: &quot;&quot;,&#10;            status = when(pairs[&quot;status&quot;]) {&#10;                &quot;PENDING&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                &quot;APPROVED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.APPROVED&#10;                &quot;REJECTED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.REJECTED&#10;                &quot;EXPIRED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.EXPIRED&#10;                else -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;            },&#10;            createdAt = pairs[&quot;createdAt&quot;] ?: &quot;&quot;,&#10;            hasQRCode = pairs[&quot;hasQRCode&quot;]?.toBoolean() ?: false,&#10;            qrCodeUrl = pairs[&quot;qrCodeUrl&quot;]?.takeIf { it.isNotEmpty() },&#10;            passId = pairs[&quot;passId&quot;]?.takeIf { it.isNotEmpty() },&#10;            expiryTime = pairs[&quot;expiryTime&quot;]?.takeIf { it.isNotEmpty() }&#10;        )&#10;    } catch (e: Exception) {&#10;        println(&quot;Error parsing visitor JSON: ${e.message}&quot;)&#10;        null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.main&#10;&#10;import androidx.compose.runtime.*&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.permitely.data.storage.TokenStorage&#10;import com.example.permitely.ui.host.*&#10;&#10;/**&#10; * Main navigation controller for the authenticated part of the app&#10; * Handles routing between all main app screens with proper back navigation&#10; */&#10;@Composable&#10;fun MainNavigation(&#10;    navController: NavHostController = rememberNavController(),&#10;    userInfo: TokenStorage.UserInfo?,&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;dashboard&quot;&#10;    ) {&#10;        // Dashboard screen&#10;        composable(&quot;dashboard&quot;) {&#10;            when (userInfo?.role?.lowercase()) {&#10;                &quot;host&quot;, &quot;&quot;, null -&gt; {&#10;                    HostDashboardScreen(&#10;                        onCreateVisitor = {&#10;                            navController.navigate(&quot;create_visitor&quot;)&#10;                        },&#10;                        onViewAllVisitors = {&#10;                            navController.navigate(&quot;visitors_list&quot;)&#10;                        },&#10;                        onViewNotifications = {&#10;                            navController.navigate(&quot;notifications&quot;)&#10;                        },&#10;                        onViewProfile = {&#10;                            navController.navigate(&quot;profile&quot;)&#10;                        },&#10;                        onLogout = onLogout&#10;                    )&#10;                }&#10;                &quot;admin&quot; -&gt; {&#10;                    // TODO: Implement admin dashboard when available&#10;                    // For now, show host dashboard&#10;                    HostDashboardScreen(&#10;                        onCreateVisitor = {&#10;                            navController.navigate(&quot;create_visitor&quot;)&#10;                        },&#10;                        onViewAllVisitors = {&#10;                            navController.navigate(&quot;visitors_list&quot;)&#10;                        },&#10;                        onViewNotifications = {&#10;                            navController.navigate(&quot;notifications&quot;)&#10;                        },&#10;                        onViewProfile = {&#10;                            navController.navigate(&quot;profile&quot;)&#10;                        },&#10;                        onLogout = onLogout&#10;                    )&#10;                }&#10;                &quot;guard&quot; -&gt; {&#10;                    // TODO: Implement guard dashboard when available&#10;                    // For now, show host dashboard&#10;                    HostDashboardScreen(&#10;                        onCreateVisitor = {&#10;                            navController.navigate(&quot;create_visitor&quot;)&#10;                        },&#10;                        onViewAllVisitors = {&#10;                            navController.navigate(&quot;visitors_list&quot;)&#10;                        },&#10;                        onViewNotifications = {&#10;                            navController.navigate(&quot;notifications&quot;)&#10;                        },&#10;                        onViewProfile = {&#10;                            navController.navigate(&quot;profile&quot;)&#10;                        },&#10;                        onLogout = onLogout&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Create visitor screen&#10;        composable(&quot;create_visitor&quot;) {&#10;            CreateVisitorScreen(&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                },&#10;                onVisitorCreated = { visitorData -&gt;&#10;                    try {&#10;                        // Navigate to visitor details using the visitor ID from the created visitor&#10;                        val visitorId = visitorData.visitor.visitorId.toString()&#10;                        navController.navigate(&quot;visitor_details/$visitorId&quot;)&#10;                    } catch (e: Exception) {&#10;                        println(&quot;Error processing visitor data: ${e.message}&quot;)&#10;                        e.printStackTrace()&#10;                        // On error, just go back to dashboard&#10;                        navController.popBackStack()&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        // Visitors list screen&#10;        composable(&quot;visitors_list&quot;) {&#10;            VisitorsListScreen(&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                },&#10;                onVisitorClick = { visitor -&gt;&#10;                    // Pass only the visitor ID, not the entire visitor data&#10;                    navController.navigate(&quot;visitor_details/${visitor.id}&quot;)&#10;                }&#10;            )&#10;        }&#10;&#10;        // Visitor details screen - now takes visitor ID as parameter&#10;        composable(&quot;visitor_details/{visitorId}&quot;) { backStackEntry -&gt;&#10;            val visitorId = backStackEntry.arguments?.getString(&quot;visitorId&quot;)&#10;            visitorId?.let { id -&gt;&#10;                VisitorDetailsScreen(&#10;                    visitorId = id,&#10;                    onNavigateBack = {&#10;                        navController.popBackStack()&#10;                    },&#10;                    onEditVisitor = { visitorToEdit -&gt;&#10;                        // TODO: Navigate to edit screen when implemented&#10;                        // navController.navigate(&quot;edit_visitor/${visitorToEdit.id}&quot;)&#10;                    },&#10;                    onDeleteVisitor = { visitorId -&gt;&#10;                        // TODO: Implement visitor deletion logic&#10;                        navController.popBackStack()&#10;                    },&#10;                    onGeneratePass = { visitorId -&gt;&#10;                        // TODO: Implement pass generation logic&#10;                    },&#10;                    onShareQRCode = {&#10;                        // TODO: Implement QR code sharing logic&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Notifications screen&#10;        composable(&quot;notifications&quot;) {&#10;            NotificationsScreen(&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                }&#10;            )&#10;        }&#10;&#10;        // Profile screen&#10;        composable(&quot;profile&quot;) {&#10;            HostProfileScreen(&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                },&#10;                onLogout = onLogout&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// Helper functions to serialize/deserialize visitor data for navigation&#10;private fun createVisitorJson(visitorData: com.example.permitely.data.models.CreateVisitorResponseData): String {&#10;    // Create a simplified JSON string for navigation&#10;    val visitor = visitorData.visitor&#10;    val latestPass = visitor.passes.firstOrNull() // Get newest pass from passes array&#10;    &#10;    return buildString {&#10;        append(&quot;{&quot;)&#10;        append(&quot;\&quot;id\&quot;:\&quot;${visitor.visitorId}\&quot;,&quot;)&#10;        append(&quot;\&quot;name\&quot;:\&quot;${visitor.name}\&quot;,&quot;)&#10;        append(&quot;\&quot;email\&quot;:\&quot;${visitor.email}\&quot;,&quot;)&#10;        append(&quot;\&quot;phone\&quot;:\&quot;${visitor.phoneNumber}\&quot;,&quot;)&#10;        append(&quot;\&quot;purpose\&quot;:\&quot;${visitor.purposeOfVisit}\&quot;,&quot;)&#10;        append(&quot;\&quot;date\&quot;:\&quot;${visitor.createdAt.split(&quot;T&quot;)[0]}\&quot;,&quot;)&#10;        append(&quot;\&quot;time\&quot;:\&quot;${visitor.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0]}\&quot;,&quot;)&#10;        append(&quot;\&quot;status\&quot;:\&quot;${visitor.status}\&quot;,&quot;)&#10;        append(&quot;\&quot;createdAt\&quot;:\&quot;${visitor.createdAt}\&quot;,&quot;)&#10;        append(&quot;\&quot;hasQRCode\&quot;:${latestPass != null},&quot;)&#10;        append(&quot;\&quot;qrCodeUrl\&quot;:\&quot;${latestPass?.qrCodeData ?: &quot;&quot;}\&quot;,&quot;)&#10;        append(&quot;\&quot;passId\&quot;:\&quot;${latestPass?.passId ?: &quot;&quot;}\&quot;,&quot;)&#10;        append(&quot;\&quot;expiryTime\&quot;:\&quot;${latestPass?.expiryTime ?: &quot;&quot;}\&quot;&quot;)&#10;        append(&quot;}&quot;)&#10;    }&#10;}&#10;&#10;private fun createVisitorJsonFromVisitor(visitor: com.example.permitely.ui.host.Visitor): String {&#10;    return buildString {&#10;        append(&quot;{&quot;)&#10;        append(&quot;\&quot;id\&quot;:\&quot;${visitor.id}\&quot;,&quot;)&#10;        append(&quot;\&quot;name\&quot;:\&quot;${visitor.name}\&quot;,&quot;)&#10;        append(&quot;\&quot;email\&quot;:\&quot;${visitor.email}\&quot;,&quot;)&#10;        append(&quot;\&quot;phone\&quot;:\&quot;${visitor.phone}\&quot;,&quot;)&#10;        append(&quot;\&quot;purpose\&quot;:\&quot;${visitor.purpose}\&quot;,&quot;)&#10;        append(&quot;\&quot;date\&quot;:\&quot;${visitor.date}\&quot;,&quot;)&#10;        append(&quot;\&quot;time\&quot;:\&quot;${visitor.time}\&quot;,&quot;)&#10;        append(&quot;\&quot;status\&quot;:\&quot;${visitor.status}\&quot;,&quot;)&#10;        append(&quot;\&quot;createdAt\&quot;:\&quot;${visitor.createdAt}\&quot;,&quot;)&#10;        append(&quot;\&quot;hasQRCode\&quot;:${visitor.hasQRCode},&quot;)&#10;        append(&quot;\&quot;qrCodeUrl\&quot;:\&quot;${visitor.qrCodeUrl ?: &quot;&quot;}\&quot;,&quot;)&#10;        append(&quot;\&quot;passId\&quot;:\&quot;${visitor.passId ?: &quot;&quot;}\&quot;,&quot;)&#10;        append(&quot;\&quot;expiryTime\&quot;:\&quot;${visitor.expiryTime ?: &quot;&quot;}\&quot;&quot;)&#10;        append(&quot;}&quot;)&#10;    }&#10;}&#10;&#10;private fun parseVisitorFromJson(json: String): com.example.permitely.ui.host.Visitor? {&#10;    return try {&#10;        // Simple JSON parsing - in production, consider using Gson&#10;        val cleanJson = json.removeSurrounding(&quot;{&quot;, &quot;}&quot;)&#10;        val pairs = cleanJson.split(&quot;,&quot;).associate { pair -&gt;&#10;            val (key, value) = pair.split(&quot;:&quot;, limit = 2)&#10;            key.trim('&quot;') to value.trim('&quot;')&#10;        }&#10;&#10;        com.example.permitely.ui.host.Visitor(&#10;            id = pairs[&quot;id&quot;] ?: &quot;&quot;,&#10;            name = pairs[&quot;name&quot;] ?: &quot;&quot;,&#10;            email = pairs[&quot;email&quot;] ?: &quot;&quot;,&#10;            phone = pairs[&quot;phone&quot;] ?: &quot;&quot;,&#10;            purpose = pairs[&quot;purpose&quot;] ?: &quot;&quot;,&#10;            date = pairs[&quot;date&quot;] ?: &quot;&quot;,&#10;            time = pairs[&quot;time&quot;] ?: &quot;&quot;,&#10;            status = when(pairs[&quot;status&quot;]) {&#10;                &quot;PENDING&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                &quot;APPROVED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.APPROVED&#10;                &quot;REJECTED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.REJECTED&#10;                &quot;EXPIRED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.EXPIRED&#10;                else -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;            },&#10;            createdAt = pairs[&quot;createdAt&quot;] ?: &quot;&quot;,&#10;            hasQRCode = pairs[&quot;hasQRCode&quot;]?.toBoolean() ?: false,&#10;            qrCodeUrl = pairs[&quot;qrCodeUrl&quot;]?.takeIf { it.isNotEmpty() },&#10;            passId = pairs[&quot;passId&quot;]?.takeIf { it.isNotEmpty() },&#10;            expiryTime = pairs[&quot;expiryTime&quot;]?.takeIf { it.isNotEmpty() }&#10;        )&#10;    } catch (e: Exception) {&#10;        println(&quot;Error parsing visitor JSON: ${e.message}&quot;)&#10;        null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/splash/SplashScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/splash/SplashScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.splash&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.draw.blur&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.drawBehind&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.draw.scale&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.geometry.Rect&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.*&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.semantics.semantics&#10;import androidx.compose.ui.semantics.testTag&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlin.math.PI&#10;import kotlin.math.cos&#10;import kotlin.math.min&#10;import kotlin.math.sin&#10;import kotlin.random.Random&#10;&#10;/**&#10; * Enhanced, production-ready Permitly splash screen.&#10; *&#10; * Key upgrades vs. previous version:&#10; * - Tighter, more polished brand mark with a &quot;secure gate / pass&quot; motif&#10; * - Radar sweep + segmented ring build-in animation (reads as security scanning)&#10; * - Subtle corporate grid background with parallax shimmer&#10; * - Clean loading card that resembles a visitor pass with a scanning line&#10; * - Faster, snappier timings and gentle motion curves&#10; * - Strictly uses existing color palette: Primary, Secondary, Accent, Background, TextPrimary, TextSecondary, OnPrimary&#10; */&#10;@Composable&#10;fun SplashScreen(&#10;    onSplashFinished: () -&gt; Unit&#10;) {&#10;    var phase by remember { mutableStateOf(SplashPhase.Initial) }&#10;&#10;    // Phase timeline (≈ 2.8s total)&#10;    LaunchedEffect(Unit) {&#10;        delay(120)&#10;        phase = SplashPhase.BrandIn&#10;        delay(900)&#10;        phase = SplashPhase.ContentIn&#10;        delay(900)&#10;        phase = SplashPhase.Loading&#10;        delay(700)&#10;        phase = SplashPhase.Exit&#10;        delay(200)&#10;        onSplashFinished()&#10;    }&#10;&#10;    // Scene&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.radialGradient(&#10;                    colors = listOf(&#10;                        Primary.copy(alpha = 0.10f),&#10;                        Background,&#10;                        Color(0xFF060A1C).copy(alpha = 0.85f)&#10;                    ),&#10;                    radius = 1200f&#10;                )&#10;            )&#10;            .semantics { testTag = &quot;PermitlySplash&quot; }&#10;    ) {&#10;        CorporateGridBackground(visible = phase &gt;= SplashPhase.BrandIn)&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp)&#10;                .padding(top = 48.dp, bottom = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Spacer(modifier = Modifier.height(1.dp))&#10;&#10;            // Centerpiece brand mark&#10;            BrandMark(modifier = Modifier, phase = phase)&#10;&#10;            // Title + Tagline&#10;            Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                AnimatedVisibility(&#10;                    visible = phase &gt;= SplashPhase.ContentIn,&#10;                    enter = fadeIn(tween(500)) + slideInVertically { it / 4 },&#10;                ) {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&#10;                            text = &quot;Permitly&quot;,&#10;                            fontSize = 40.sp,&#10;                            fontWeight = FontWeight.ExtraBold,&#10;                            color = TextPrimary,&#10;                            textAlign = TextAlign.Center,&#10;                            letterSpacing = 1.5.sp,&#10;                            modifier = Modifier.semantics { testTag = &quot;BrandTitle&quot; }&#10;                        )&#10;                        Spacer(Modifier.height(8.dp))&#10;                        UnderlineAccent()&#10;                        Spacer(Modifier.height(12.dp))&#10;                        Text(&#10;                            text = &quot;Secure • Efficient • Reliable&quot;,&#10;                            fontSize = 16.sp,&#10;                            color = TextSecondary,&#10;                            textAlign = TextAlign.Center,&#10;                            fontWeight = FontWeight.Medium,&#10;                            letterSpacing = 0.6.sp&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(36.dp))&#10;&#10;                // Loading card as a visitor pass&#10;                AnimatedVisibility(&#10;                    visible = phase &gt;= SplashPhase.Loading,&#10;                    enter = fadeIn(tween(400)) + scaleIn(tween(400, easing = FastOutSlowInEasing)),&#10;                ) {&#10;                    VisitorPassLoader()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Light brand particles (kept minimal to stay corporate)&#10;        SubtleParticles(visible = phase &gt;= SplashPhase.ContentIn)&#10;    }&#10;}&#10;&#10;private enum class SplashPhase { Initial, BrandIn, ContentIn, Loading, Exit }&#10;&#10;// ---------------------- Background ---------------------- //&#10;@Composable&#10;private fun CorporateGridBackground(visible: Boolean) {&#10;    val inf = rememberInfiniteTransition(label = &quot;grid&quot;)&#10;    val shift by inf.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(tween(6000, easing = LinearEasing)),&#10;        label = &quot;grid_shift&quot;&#10;    )&#10;&#10;    AnimatedVisibility(visible = visible, enter = fadeIn(tween(500))) {&#10;        Canvas(&#10;            Modifier&#10;                .fillMaxSize()&#10;                .alpha(0.12f)&#10;        ) {&#10;            val step = 28.dp.toPx()&#10;            val offset = step * shift&#10;            val w = size.width&#10;            val h = size.height&#10;            val gridColor = Primary.copy(alpha = 0.35f)&#10;&#10;            // Diagonal grid (\\ lines)&#10;            var x = -h&#10;            while (x &lt; w + h) {&#10;                drawLine(&#10;                    color = gridColor,&#10;                    start = Offset(x + offset, 0f),&#10;                    end = Offset(x - h + offset, h),&#10;                    strokeWidth = 1.dp.toPx()&#10;                )&#10;                x += step&#10;            }&#10;            // Soft vignette&#10;            drawRect(&#10;                brush = Brush.radialGradient(&#10;                    listOf(Color.Transparent, Color.Black.copy(alpha = 0.25f)),&#10;                    center = center,&#10;                    radius = min(size.width, size.height)&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SubtleParticles(visible: Boolean) {&#10;    val inf = rememberInfiniteTransition(label = &quot;particles&quot;)&#10;    val t by inf.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(tween(16000, easing = LinearEasing)),&#10;        label = &quot;particles_t&quot;&#10;    )&#10;    val dots = remember {&#10;        List(8) {&#10;            Particle(&#10;                base = Offset(Random.nextFloat(), Random.nextFloat()),&#10;                r = Random.nextFloat() * 18f + 8f,&#10;                speed = Random.nextFloat() * 0.35f + 0.15f,&#10;                alpha = Random.nextFloat() * 0.15f + 0.06f&#10;            )&#10;        }&#10;    }&#10;&#10;    AnimatedVisibility(visible = visible, enter = fadeIn(tween(400))) {&#10;        Canvas(Modifier.fillMaxSize()) {&#10;            dots.forEach { p -&gt;&#10;                val x = (p.base.x + t * p.speed).mod(1f)&#10;                val y = (p.base.y + sin(t * 2 * PI * p.speed).toFloat() * 0.07f).mod(1f)&#10;                drawCircle(&#10;                    color = Primary.copy(alpha = p.alpha),&#10;                    radius = p.r,&#10;                    center = Offset(x * size.width, y * size.height)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private data class Particle(&#10;    val base: Offset,&#10;    val r: Float,&#10;    val speed: Float,&#10;    val alpha: Float&#10;)&#10;&#10;// ---------------------- Brand Mark ---------------------- //&#10;@Composable&#10;private fun BrandMark(modifier: Modifier = Modifier, phase: SplashPhase) {&#10;    val inf = rememberInfiniteTransition(label = &quot;brand&quot;)&#10;&#10;    // Pulse for subtle life&#10;    val pulse by inf.animateFloat(&#10;        initialValue = 0.96f,&#10;        targetValue = 1.04f,&#10;        animationSpec = infiniteRepeatable(tween(1800, easing = FastOutSlowInEasing), RepeatMode.Reverse),&#10;        label = &quot;brand_pulse&quot;&#10;    )&#10;&#10;    // Radar sweep rotation&#10;    val sweep by inf.animateFloat(&#10;        0f, 360f,&#10;        animationSpec = infiniteRepeatable(tween(4200, easing = LinearEasing)),&#10;        label = &quot;radar_sweep&quot;&#10;    )&#10;&#10;    val visible by animateFloatAsState(&#10;        targetValue = if (phase &gt;= SplashPhase.BrandIn) 1f else 0f,&#10;        animationSpec = spring(dampingRatio = Spring.DampingRatioLowBouncy, stiffness = Spring.StiffnessLow),&#10;        label = &quot;brand_visible&quot;&#10;    )&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .size(220.dp)&#10;            .scale(pulse * visible)&#10;            .alpha(visible),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Segmented security ring build-in&#10;        SegmentedRing(progress = visible)&#10;&#10;        // Core mark: shield + stylized P + check&#10;        Surface(&#10;            modifier = Modifier.size(120.dp),&#10;            shape = CircleShape,&#10;            color = Primary,&#10;            tonalElevation = 8.dp,&#10;            shadowElevation = 18.dp&#10;        ) {&#10;            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                Canvas(Modifier.fillMaxSize()) {&#10;                    drawPermitlyMark(this)&#10;&#10;                    // Radar sweep sector (security scan vibe)&#10;                    rotate(sweep) {&#10;                        val pad = size.minDimension * 0.08f&#10;                        drawArc(&#10;                            brush = Brush.radialGradient(&#10;                                listOf(Color.White.copy(alpha = 0.22f), Color.Transparent)&#10;                            ),&#10;                            startAngle = -10f,&#10;                            sweepAngle = 40f,&#10;                            useCenter = true,&#10;                            topLeft = Offset(pad, pad),&#10;                            size = Size(size.width - 2 * pad, size.height - 2 * pad)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Outer soft glows (concentric, very subtle)&#10;        repeat(2) { i -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .size((160 + i * 26).dp)&#10;                    .clip(CircleShape)&#10;                    .background(Primary.copy(alpha = 0.06f - (i * 0.02f)))&#10;                    .blur((3 + i).dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;private fun drawPermitlyMark(scope: DrawScope) = with(scope) {&#10;    val w = size.width&#10;    val h = size.height&#10;    val cx = w / 2&#10;    val cy = h / 2&#10;&#10;    // Shield base&#10;    val shieldPath = Path().apply {&#10;        val top = Offset(cx, h * 0.18f)&#10;        val left = Offset(w * 0.22f, h * 0.36f)&#10;        val right = Offset(w * 0.78f, h * 0.36f)&#10;        val bottom = Offset(cx, h * 0.82f)&#10;        moveTo(top.x, top.y)&#10;        cubicTo(w * 0.30f, h * 0.28f, w * 0.26f, h * 0.46f, cx, h * 0.60f)&#10;        cubicTo(w * 0.74f, h * 0.46f, w * 0.70f, h * 0.28f, right.x, right.y)&#10;        lineTo(left.x, left.y)&#10;        close()&#10;    }&#10;    drawPath(shieldPath, color = OnPrimary.copy(alpha = 0.08f))&#10;&#10;    // Stylized &quot;P&quot; path (visitor Pass / Permit)&#10;    val pStroke = Stroke(width = w * 0.08f, cap = StrokeCap.Round, join = StrokeJoin.Round)&#10;    val pPath = Path().apply {&#10;        val start = Offset(w * 0.30f, h * 0.42f)&#10;        moveTo(start.x, start.y)&#10;        // Vertical stem&#10;        lineTo(w * 0.30f, h * 0.72f)&#10;        // Bowl&#10;        moveTo(w * 0.30f, h * 0.42f)&#10;        quadraticBezierTo(w * 0.64f, h * 0.34f, w * 0.60f, h * 0.52f)&#10;        quadraticBezierTo(w * 0.58f, h * 0.62f, w * 0.42f, h * 0.60f)&#10;    }&#10;    drawPath(pPath, color = OnPrimary.copy(alpha = 0.90f), style = pStroke)&#10;&#10;    // Secure checkmark overlay (admission granted)&#10;    val check = Path().apply {&#10;        moveTo(w * 0.38f, h * 0.58f)&#10;        lineTo(w * 0.46f, h * 0.66f)&#10;        lineTo(w * 0.64f, h * 0.46f)&#10;    }&#10;    drawPath(check, color = Secondary, style = Stroke(width = w * 0.065f, cap = StrokeCap.Round))&#10;}&#10;&#10;@Composable&#10;private fun SegmentedRing(progress: Float) {&#10;    // Shows as four secure gates lighting on&#10;    Canvas(Modifier.size(190.dp)) {&#10;        val stroke = 5.dp.toPx()&#10;        val inset = 10.dp.toPx()&#10;        val rect = Rect(Offset(inset, inset), Size(size.width - inset * 2, size.height - inset * 2))&#10;        val segments = 4&#10;        val gap = 18f&#10;        val sweepPer = (360f - segments * gap) / segments&#10;        for (i in 0 until segments) {&#10;            val start = i * (sweepPer + gap) - 90f&#10;            val segProgress = (progress * segments) - i&#10;            val shown = segProgress.coerceIn(0f, 1f)&#10;            if (shown &gt; 0f) {&#10;                drawArc(&#10;                    brush = Brush.sweepGradient(listOf(Primary, Secondary, Primary)),&#10;                    startAngle = start,&#10;                    sweepAngle = sweepPer * shown,&#10;                    useCenter = false,&#10;                    style = Stroke(width = stroke, cap = StrokeCap.Round),&#10;                    topLeft = rect.topLeft,&#10;                    size = rect.size&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun UnderlineAccent() {&#10;    val inf = rememberInfiniteTransition(label = &quot;underline&quot;)&#10;    val width by inf.animateFloat(0.6f, 1f, infiniteRepeatable(tween(1600), RepeatMode.Reverse), label = &quot;underline_w&quot;)&#10;    Box(&#10;        modifier = Modifier&#10;            .height(4.dp)&#10;            .width((110 * width).dp)&#10;            .clip(RoundedCornerShape(2.dp))&#10;            .background(&#10;                brush = Brush.horizontalGradient(&#10;                    listOf(Color.Transparent, Primary, Secondary, Primary, Color.Transparent)&#10;                )&#10;            )&#10;    )&#10;}&#10;&#10;// ---------------------- Visitor Pass Loader ---------------------- //&#10;@Composable&#10;private fun VisitorPassLoader() {&#10;    val inf = rememberInfiniteTransition(label = &quot;pass&quot;)&#10;    val scanX by inf.animateFloat(0f, 1f, infiniteRepeatable(tween(1600, easing = LinearEasing)), label = &quot;scan_x&quot;)&#10;&#10;    Surface(&#10;        modifier = Modifier&#10;            .width(220.dp)&#10;            .height(120.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        tonalElevation = 6.dp,&#10;        shadowElevation = 10.dp,&#10;        color = Background.copy(alpha = 0.85f)&#10;    ) {&#10;        Box(Modifier.fillMaxSize()) {&#10;            // Top strip (like an ID lanyard accent)&#10;            Box(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(10.dp)&#10;                    .background(Primary)&#10;            )&#10;&#10;            // Barcode placeholder&#10;            Canvas(&#10;                Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 14.dp)&#10;                    .width(160.dp)&#10;                    .height(28.dp)&#10;            ) {&#10;                val barW = 4.dp.toPx()&#10;                val space = 2.dp.toPx()&#10;                var x = 0f&#10;                while (x &lt; size.width) {&#10;                    drawRect(color = TextPrimary.copy(alpha = 0.5f), topLeft = Offset(x, 0f), size = Size(barW, size.height))&#10;                    x += barW + space&#10;                }&#10;            }&#10;&#10;            // Scanning line&#10;            Canvas(&#10;                Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 16.dp, vertical = 10.dp)&#10;            ) {&#10;                val y = size.height * 0.55f&#10;                val left = 0f&#10;                val right = size.width&#10;                drawLine(&#10;                    brush = Brush.horizontalGradient(&#10;                        listOf(Color.Transparent, Accent.copy(alpha = 0.8f), Color.Transparent)&#10;                    ),&#10;                    start = Offset(left + (right - left) * (scanX * 0.9f), y),&#10;                    end = Offset(left + (right - left) * (scanX * 0.9f + 0.15f), y),&#10;                    strokeWidth = 4.dp.toPx(),&#10;                    cap = StrokeCap.Round&#10;                )&#10;            }&#10;&#10;            // Labels&#10;            Column(&#10;                Modifier&#10;                    .fillMaxSize()&#10;                    .padding(top = 20.dp, start = 16.dp, end = 16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Visitor Pass&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    fontSize = 14.sp&#10;                )&#10;                Spacer(Modifier.height(6.dp))&#10;                Text(&#10;                    text = &quot;Validating access…&quot;,&#10;                    color = TextSecondary,&#10;                    fontSize = 12.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.splash&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.draw.blur&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.drawBehind&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.draw.scale&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.geometry.Rect&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.*&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.graphics.drawscope.rotate&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.semantics.semantics&#10;import androidx.compose.ui.semantics.testTag&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlin.math.PI&#10;import kotlin.math.cos&#10;import kotlin.math.min&#10;import kotlin.math.sin&#10;import kotlin.random.Random&#10;&#10;/**&#10; * Enhanced, production-ready Permitly splash screen.&#10; *&#10; * Key upgrades vs. previous version:&#10; * - Tighter, more polished brand mark with a &quot;secure gate / pass&quot; motif&#10; * - Radar sweep + segmented ring build-in animation (reads as security scanning)&#10; * - Subtle corporate grid background with parallax shimmer&#10; * - Clean loading card that resembles a visitor pass with a scanning line&#10; * - Faster, snappier timings and gentle motion curves&#10; * - Strictly uses existing color palette: Primary, Secondary, Accent, Background, TextPrimary, TextSecondary, OnPrimary&#10; */&#10;@Composable&#10;fun SplashScreen(&#10;    onSplashFinished: () -&gt; Unit&#10;) {&#10;    var phase by remember { mutableStateOf(SplashPhase.Initial) }&#10;&#10;    // Phase timeline (≈ 2.8s total)&#10;    LaunchedEffect(Unit) {&#10;        delay(120)&#10;        phase = SplashPhase.BrandIn&#10;        delay(900)&#10;        phase = SplashPhase.ContentIn&#10;        delay(900)&#10;        phase = SplashPhase.Loading&#10;        delay(700)&#10;        phase = SplashPhase.Exit&#10;        delay(200)&#10;        onSplashFinished()&#10;    }&#10;&#10;    // Scene&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.radialGradient(&#10;                    colors = listOf(&#10;                        Primary.copy(alpha = 0.10f),&#10;                        Background,&#10;                        Color(0xFF060A1C).copy(alpha = 0.85f)&#10;                    ),&#10;                    radius = 1200f&#10;                )&#10;            )&#10;            .semantics { testTag = &quot;PermitlySplash&quot; }&#10;    ) {&#10;        CorporateGridBackground(visible = phase &gt;= SplashPhase.BrandIn)&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 24.dp)&#10;                .padding(top = 48.dp, bottom = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Spacer(modifier = Modifier.height(1.dp))&#10;&#10;            // Centerpiece brand mark&#10;            BrandMark(modifier = Modifier, phase = phase)&#10;&#10;            // Title + Tagline&#10;            Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                AnimatedVisibility(&#10;                    visible = phase &gt;= SplashPhase.ContentIn,&#10;                    enter = fadeIn(tween(500)) + slideInVertically { it / 4 },&#10;                ) {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&#10;                            text = &quot;Permitly&quot;,&#10;                            fontSize = 40.sp,&#10;                            fontWeight = FontWeight.ExtraBold,&#10;                            color = TextPrimary,&#10;                            textAlign = TextAlign.Center,&#10;                            letterSpacing = 1.5.sp,&#10;                            modifier = Modifier.semantics { testTag = &quot;BrandTitle&quot; }&#10;                        )&#10;                        Spacer(Modifier.height(8.dp))&#10;                        UnderlineAccent()&#10;                        Spacer(Modifier.height(12.dp))&#10;                        Text(&#10;                            text = &quot;Secure • Efficient • Reliable&quot;,&#10;                            fontSize = 16.sp,&#10;                            color = TextSecondary,&#10;                            textAlign = TextAlign.Center,&#10;                            fontWeight = FontWeight.Medium,&#10;                            letterSpacing = 0.6.sp&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(36.dp))&#10;&#10;                // Loading card as a visitor pass&#10;                AnimatedVisibility(&#10;                    visible = phase &gt;= SplashPhase.Loading,&#10;                    enter = fadeIn(tween(400)) + scaleIn(tween(400, easing = FastOutSlowInEasing)),&#10;                ) {&#10;                    VisitorPassLoader()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Light brand particles (kept minimal to stay corporate)&#10;        SubtleParticles(visible = phase &gt;= SplashPhase.ContentIn)&#10;    }&#10;}&#10;&#10;private enum class SplashPhase { Initial, BrandIn, ContentIn, Loading, Exit }&#10;&#10;// ---------------------- Background ---------------------- //&#10;@Composable&#10;private fun CorporateGridBackground(visible: Boolean) {&#10;    val inf = rememberInfiniteTransition(label = &quot;grid&quot;)&#10;    val shift by inf.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(tween(6000, easing = LinearEasing)),&#10;        label = &quot;grid_shift&quot;&#10;    )&#10;&#10;    AnimatedVisibility(visible = visible, enter = fadeIn(tween(500))) {&#10;        Canvas(&#10;            Modifier&#10;                .fillMaxSize()&#10;                .alpha(0.12f)&#10;        ) {&#10;            val step = 28.dp.toPx()&#10;            val offset = step * shift&#10;            val w = size.width&#10;            val h = size.height&#10;            val gridColor = Primary.copy(alpha = 0.35f)&#10;&#10;            // Diagonal grid (\\ lines)&#10;            var x = -h&#10;            while (x &lt; w + h) {&#10;                drawLine(&#10;                    color = gridColor,&#10;                    start = Offset(x + offset, 0f),&#10;                    end = Offset(x - h + offset, h),&#10;                    strokeWidth = 1.dp.toPx()&#10;                )&#10;                x += step&#10;            }&#10;            // Soft vignette&#10;            drawRect(&#10;                brush = Brush.radialGradient(&#10;                    listOf(Color.Transparent, Color.Black.copy(alpha = 0.25f)),&#10;                    center = center,&#10;                    radius = min(size.width, size.height)&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SubtleParticles(visible: Boolean) {&#10;    val inf = rememberInfiniteTransition(label = &quot;particles&quot;)&#10;    val t by inf.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(tween(16000, easing = LinearEasing)),&#10;        label = &quot;particles_t&quot;&#10;    )&#10;    val dots = remember {&#10;        List(8) {&#10;            Particle(&#10;                base = Offset(Random.nextFloat(), Random.nextFloat()),&#10;                r = Random.nextFloat() * 18f + 8f,&#10;                speed = Random.nextFloat() * 0.35f + 0.15f,&#10;                alpha = Random.nextFloat() * 0.15f + 0.06f&#10;            )&#10;        }&#10;    }&#10;&#10;    AnimatedVisibility(visible = visible, enter = fadeIn(tween(400))) {&#10;        Canvas(Modifier.fillMaxSize()) {&#10;            dots.forEach { p -&gt;&#10;                val x = (p.base.x + t * p.speed).mod(1f)&#10;                val y = (p.base.y + sin(t * 2 * PI * p.speed).toFloat() * 0.07f).mod(1f)&#10;                drawCircle(&#10;                    color = Primary.copy(alpha = p.alpha),&#10;                    radius = p.r,&#10;                    center = Offset(x * size.width, y * size.height)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private data class Particle(&#10;    val base: Offset,&#10;    val r: Float,&#10;    val speed: Float,&#10;    val alpha: Float&#10;)&#10;&#10;// ---------------------- Brand Mark ---------------------- //&#10;@Composable&#10;private fun BrandMark(modifier: Modifier = Modifier, phase: SplashPhase) {&#10;    val inf = rememberInfiniteTransition(label = &quot;brand&quot;)&#10;&#10;    // Pulse for subtle life&#10;    val pulse by inf.animateFloat(&#10;        initialValue = 0.96f,&#10;        targetValue = 1.04f,&#10;        animationSpec = infiniteRepeatable(tween(1800, easing = FastOutSlowInEasing), RepeatMode.Reverse),&#10;        label = &quot;brand_pulse&quot;&#10;    )&#10;&#10;    // Radar sweep rotation&#10;    val sweep by inf.animateFloat(&#10;        0f, 360f,&#10;        animationSpec = infiniteRepeatable(tween(4200, easing = LinearEasing)),&#10;        label = &quot;radar_sweep&quot;&#10;    )&#10;&#10;    val visible by animateFloatAsState(&#10;        targetValue = if (phase &gt;= SplashPhase.BrandIn) 1f else 0f,&#10;        animationSpec = spring(dampingRatio = Spring.DampingRatioLowBouncy, stiffness = Spring.StiffnessLow),&#10;        label = &quot;brand_visible&quot;&#10;    )&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .size(220.dp)&#10;            .scale(pulse * visible)&#10;            .alpha(visible),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Segmented security ring build-in&#10;        SegmentedRing(progress = visible)&#10;&#10;        // Core mark: shield + stylized P + check&#10;        Surface(&#10;            modifier = Modifier.size(120.dp),&#10;            shape = CircleShape,&#10;            color = Primary,&#10;            tonalElevation = 8.dp,&#10;            shadowElevation = 18.dp&#10;        ) {&#10;            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                Canvas(Modifier.fillMaxSize()) {&#10;                    drawPermitlyMark(this)&#10;&#10;                    // Radar sweep sector (security scan vibe)&#10;                    rotate(sweep) {&#10;                        val pad = size.minDimension * 0.08f&#10;                        drawArc(&#10;                            brush = Brush.radialGradient(&#10;                                listOf(Color.White.copy(alpha = 0.22f), Color.Transparent)&#10;                            ),&#10;                            startAngle = -10f,&#10;                            sweepAngle = 40f,&#10;                            useCenter = true,&#10;                            topLeft = Offset(pad, pad),&#10;                            size = Size(size.width - 2 * pad, size.height - 2 * pad)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Outer soft glows (concentric, very subtle)&#10;        repeat(2) { i -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .size((160 + i * 26).dp)&#10;                    .clip(CircleShape)&#10;                    .background(Primary.copy(alpha = 0.06f - (i * 0.02f)))&#10;                    .blur((3 + i).dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;private fun drawPermitlyMark(scope: DrawScope) = with(scope) {&#10;    val w = size.width&#10;    val h = size.height&#10;    val cx = w / 2&#10;    val cy = h / 2&#10;&#10;    // Shield base&#10;    val shieldPath = Path().apply {&#10;        val top = Offset(cx, h * 0.18f)&#10;        val left = Offset(w * 0.22f, h * 0.36f)&#10;        val right = Offset(w * 0.78f, h * 0.36f)&#10;        val bottom = Offset(cx, h * 0.82f)&#10;        moveTo(top.x, top.y)&#10;        cubicTo(w * 0.30f, h * 0.28f, w * 0.26f, h * 0.46f, cx, h * 0.60f)&#10;        cubicTo(w * 0.74f, h * 0.46f, w * 0.70f, h * 0.28f, right.x, right.y)&#10;        lineTo(left.x, left.y)&#10;        close()&#10;    }&#10;    drawPath(shieldPath, color = OnPrimary.copy(alpha = 0.08f))&#10;&#10;    // Stylized &quot;P&quot; path (visitor Pass / Permit)&#10;    val pStroke = Stroke(width = w * 0.08f, cap = StrokeCap.Round, join = StrokeJoin.Round)&#10;    val pPath = Path().apply {&#10;        val start = Offset(w * 0.30f, h * 0.42f)&#10;        moveTo(start.x, start.y)&#10;        // Vertical stem&#10;        lineTo(w * 0.30f, h * 0.72f)&#10;        // Bowl&#10;        moveTo(w * 0.30f, h * 0.42f)&#10;        quadraticBezierTo(w * 0.64f, h * 0.34f, w * 0.60f, h * 0.52f)&#10;        quadraticBezierTo(w * 0.58f, h * 0.62f, w * 0.42f, h * 0.60f)&#10;    }&#10;    drawPath(pPath, color = OnPrimary.copy(alpha = 0.90f), style = pStroke)&#10;&#10;    // Secure checkmark overlay (admission granted)&#10;    val check = Path().apply {&#10;        moveTo(w * 0.38f, h * 0.58f)&#10;        lineTo(w * 0.46f, h * 0.66f)&#10;        lineTo(w * 0.64f, h * 0.46f)&#10;    }&#10;    drawPath(check, color = Secondary, style = Stroke(width = w * 0.065f, cap = StrokeCap.Round))&#10;}&#10;&#10;@Composable&#10;private fun SegmentedRing(progress: Float) {&#10;    // Shows as four secure gates lighting on&#10;    Canvas(Modifier.size(190.dp)) {&#10;        val stroke = 5.dp.toPx()&#10;        val inset = 10.dp.toPx()&#10;        val rect = Rect(Offset(inset, inset), Size(size.width - inset * 2, size.height - inset * 2))&#10;        val segments = 4&#10;        val gap = 18f&#10;        val sweepPer = (360f - segments * gap) / segments&#10;        for (i in 0 until segments) {&#10;            val start = i * (sweepPer + gap) - 90f&#10;            val segProgress = (progress * segments) - i&#10;            val shown = segProgress.coerceIn(0f, 1f)&#10;            if (shown &gt; 0f) {&#10;                drawArc(&#10;                    brush = Brush.sweepGradient(listOf(Primary, Secondary, Primary)),&#10;                    startAngle = start,&#10;                    sweepAngle = sweepPer * shown,&#10;                    useCenter = false,&#10;                    style = Stroke(width = stroke, cap = StrokeCap.Round),&#10;                    topLeft = rect.topLeft,&#10;                    size = rect.size&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun UnderlineAccent() {&#10;    val inf = rememberInfiniteTransition(label = &quot;underline&quot;)&#10;    val width by inf.animateFloat(0.6f, 1f, infiniteRepeatable(tween(1600), RepeatMode.Reverse), label = &quot;underline_w&quot;)&#10;    Box(&#10;        modifier = Modifier&#10;            .height(4.dp)&#10;            .width((110 * width).dp)&#10;            .clip(RoundedCornerShape(2.dp))&#10;            .background(&#10;                brush = Brush.horizontalGradient(&#10;                    listOf(Color.Transparent, Primary, Secondary, Primary, Color.Transparent)&#10;                )&#10;            )&#10;    )&#10;}&#10;&#10;// ---------------------- Visitor Pass Loader ---------------------- //&#10;@Composable&#10;private fun VisitorPassLoader() {&#10;    val inf = rememberInfiniteTransition(label = &quot;pass&quot;)&#10;    val scanX by inf.animateFloat(0f, 1f, infiniteRepeatable(tween(1600, easing = LinearEasing)), label = &quot;scan_x&quot;)&#10;&#10;    Surface(&#10;        modifier = Modifier&#10;            .width(220.dp)&#10;            .height(120.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        tonalElevation = 6.dp,&#10;        shadowElevation = 10.dp,&#10;        color = Background.copy(alpha = 0.85f)&#10;    ) {&#10;        Box(Modifier.fillMaxSize()) {&#10;            // Top strip (like an ID lanyard accent)&#10;            Box(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(10.dp)&#10;                    .background(Primary)&#10;            )&#10;&#10;            // Barcode placeholder&#10;            Canvas(&#10;                Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 14.dp)&#10;                    .width(160.dp)&#10;                    .height(28.dp)&#10;            ) {&#10;                val barW = 4.dp.toPx()&#10;                val space = 2.dp.toPx()&#10;                var x = 0f&#10;                while (x &lt; size.width) {&#10;                    drawRect(color = TextPrimary.copy(alpha = 0.5f), topLeft = Offset(x, 0f), size = Size(barW, size.height))&#10;                    x += barW + space&#10;                }&#10;            }&#10;&#10;            // Scanning line&#10;            Canvas(&#10;                Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 16.dp, vertical = 10.dp)&#10;            ) {&#10;                val y = size.height * 0.55f&#10;                val left = 0f&#10;                val right = size.width&#10;                drawLine(&#10;                    brush = Brush.horizontalGradient(&#10;                        listOf(Color.Transparent, Accent.copy(alpha = 0.8f), Color.Transparent)&#10;                    ),&#10;                    start = Offset(left + (right - left) * (scanX * 0.9f), y),&#10;                    end = Offset(left + (right - left) * (scanX * 0.9f + 0.15f), y),&#10;                    strokeWidth = 4.dp.toPx(),&#10;                    cap = StrokeCap.Round&#10;                )&#10;            }&#10;&#10;            // Labels&#10;            Column(&#10;                Modifier&#10;                    .fillMaxSize()&#10;                    .padding(top = 20.dp, start = 16.dp, end = 16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Visitor Pass&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    fontSize = 14.sp&#10;                )&#10;                Spacer(Modifier.height(6.dp))&#10;                Text(&#10;                    text = &quot;Validating access…&quot;,&#10;                    color = TextSecondary,&#10;                    fontSize = 12.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>