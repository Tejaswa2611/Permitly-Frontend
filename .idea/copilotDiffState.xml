<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/models/VisitorModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/models/VisitorModels.kt" />
              <option name="originalContent" value="package com.example.permitely.data.models&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;/**&#10; * Visitor API response data model&#10; * Matches the API response from GET /api/visitors&#10; */&#10;data class VisitorApiResponse(&#10;    val status: String,&#10;    val results: Int,&#10;    val data: VisitorDataContainer&#10;)&#10;&#10;data class VisitorDataContainer(&#10;    val visitors: List&lt;VisitorData&gt;&#10;)&#10;&#10;/**&#10; * Individual visitor data from API&#10; */&#10;data class VisitorData(&#10;    @SerializedName(&quot;visitor_id&quot;)&#10;    val visitorId: Int,&#10;    val name: String,&#10;    val email: String,&#10;    @SerializedName(&quot;phone_number&quot;)&#10;    val phoneNumber: String,&#10;    @SerializedName(&quot;purpose_of_visit&quot;)&#10;    val purposeOfVisit: String,&#10;    @SerializedName(&quot;host_id&quot;)&#10;    val hostId: Int,&#10;    val status: String, // &quot;PENDING&quot;, &quot;APPROVED&quot;, &quot;REJECTED&quot;, &quot;EXPIRED&quot;&#10;    @SerializedName(&quot;entry_time&quot;)&#10;    val entryTime: String?, // ISO format or null&#10;    @SerializedName(&quot;exit_time&quot;)&#10;    val exitTime: String?, // ISO format or null&#10;    @SerializedName(&quot;created_at&quot;)&#10;    val createdAt: String, // ISO format&#10;    @SerializedName(&quot;updated_at&quot;)&#10;    val updatedAt: String // ISO format&#10;)&#10;&#10;/**&#10; * Visitor status enum&#10; */&#10;enum class VisitorStatus(val displayName: String) {&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;);&#10;&#10;    companion object {&#10;        fun fromString(status: String): VisitorStatus {&#10;            return when (status.uppercase()) {&#10;                &quot;PENDING&quot; -&gt; PENDING&#10;                &quot;APPROVED&quot; -&gt; APPROVED&#10;                &quot;REJECTED&quot; -&gt; REJECTED&#10;                &quot;EXPIRED&quot; -&gt; EXPIRED&#10;                else -&gt; PENDING&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Visitor filter enum&#10; */&#10;enum class VisitorFilter(val displayName: String) {&#10;    ALL(&quot;All&quot;),&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;)&#10;}&#10;&#10;/**&#10; * UI model for visitor display&#10; */&#10;data class Visitor(&#10;    val id: Int,&#10;    val name: String,&#10;    val email: String,&#10;    val phone: String,&#10;    val purpose: String,&#10;    val hostId: Int,&#10;    val status: VisitorStatus,&#10;    val entryTime: String?,&#10;    val exitTime: String?,&#10;    val createdAt: String,&#10;    val updatedAt: String,&#10;    val date: String, // Formatted date for display&#10;    val time: String  // Formatted time for display&#10;)&#10;&#10;/**&#10; * UI state for visitors list&#10; */&#10;data class VisitorsListUiState(&#10;    val visitors: List&lt;Visitor&gt; = emptyList(),&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val searchQuery: String = &quot;&quot;,&#10;    val selectedFilter: VisitorFilter = VisitorFilter.ALL&#10;)&#10;&#10;/**&#10; * Extension function to convert API data to UI model&#10; */&#10;fun VisitorData.toVisitor(): Visitor {&#10;    val dateTimeFormatter = java.text.SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss'Z'&quot;, java.util.Locale.getDefault())&#10;    val displayDateFormatter = java.text.SimpleDateFormat(&quot;MMM dd, yyyy&quot;, java.util.Locale.getDefault())&#10;    val displayTimeFormatter = java.text.SimpleDateFormat(&quot;HH:mm&quot;, java.util.Locale.getDefault())&#10;&#10;    val createdDate = try {&#10;        dateTimeFormatter.parse(createdAt)&#10;    } catch (e: Exception) {&#10;        java.util.Date()&#10;    }&#10;&#10;    return Visitor(&#10;        id = visitorId,&#10;        name = name,&#10;        email = email,&#10;        phone = phoneNumber,&#10;        purpose = purposeOfVisit,&#10;        hostId = hostId,&#10;        status = VisitorStatus.fromString(status),&#10;        entryTime = entryTime,&#10;        exitTime = exitTime,&#10;        createdAt = createdAt,&#10;        updatedAt = updatedAt,&#10;        date = displayDateFormatter.format(createdDate ?: java.util.Date()),&#10;        time = displayTimeFormatter.format(createdDate ?: java.util.Date())&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.data.models&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;/**&#10; * Create visitor request model&#10; */&#10;data class CreateVisitorRequest(&#10;    val name: String,&#10;    @SerializedName(&quot;phone_number&quot;) val phoneNumber: String,&#10;    val email: String,&#10;    @SerializedName(&quot;purpose_of_visit&quot;) val purposeOfVisit: String,&#10;    @SerializedName(&quot;expiry_time&quot;) val expiryTime: String? = null // Optional ISO string format&#10;)&#10;&#10;/**&#10; * Create visitor response models&#10; */&#10;data class CreateVisitorResponse(&#10;    val status: String,&#10;    val message: String,&#10;    val data: CreateVisitorResponseData?&#10;)&#10;&#10;data class CreateVisitorResponseData(&#10;    val visitor: CreatedVisitor&#10;)&#10;&#10;data class CreatedVisitor(&#10;    @SerializedName(&quot;visitor_id&quot;) val visitorId: Int,&#10;    val name: String,&#10;    val email: String,&#10;    @SerializedName(&quot;phone_number&quot;) val phoneNumber: String,&#10;    @SerializedName(&quot;purpose_of_visit&quot;) val purposeOfVisit: String,&#10;    @SerializedName(&quot;host_id&quot;) val hostId: Int,&#10;    val status: String,&#10;    @SerializedName(&quot;created_at&quot;) val createdAt: String,&#10;    @SerializedName(&quot;updated_at&quot;) val updatedAt: String&#10;)&#10;&#10;/**&#10; * Get all visitors response models - NEW for getAllVisitors API&#10; */&#10;data class VisitorApiResponse(&#10;    val status: String,&#10;    val results: Int,&#10;    val data: VisitorDataContainer&#10;)&#10;&#10;data class VisitorDataContainer(&#10;    val visitors: List&lt;VisitorData&gt;&#10;)&#10;&#10;data class VisitorData(&#10;    @SerializedName(&quot;visitor_id&quot;)&#10;    val visitorId: Int,&#10;    val name: String,&#10;    val email: String,&#10;    @SerializedName(&quot;phone_number&quot;)&#10;    val phoneNumber: String,&#10;    @SerializedName(&quot;purpose_of_visit&quot;)&#10;    val purposeOfVisit: String,&#10;    @SerializedName(&quot;host_id&quot;)&#10;    val hostId: Int,&#10;    val status: String, // &quot;PENDING&quot;, &quot;APPROVED&quot;, &quot;REJECTED&quot;, &quot;EXPIRED&quot;&#10;    @SerializedName(&quot;entry_time&quot;)&#10;    val entryTime: String?, // ISO format or null&#10;    @SerializedName(&quot;exit_time&quot;)&#10;    val exitTime: String?, // ISO format or null&#10;    @SerializedName(&quot;created_at&quot;)&#10;    val createdAt: String, // ISO format&#10;    @SerializedName(&quot;updated_at&quot;)&#10;    val updatedAt: String // ISO format&#10;)&#10;&#10;/**&#10; * Visitor status enum&#10; */&#10;enum class VisitorStatus(val displayName: String) {&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;);&#10;&#10;    companion object {&#10;        fun fromString(status: String): VisitorStatus {&#10;            return when (status.uppercase()) {&#10;                &quot;PENDING&quot; -&gt; PENDING&#10;                &quot;APPROVED&quot; -&gt; APPROVED&#10;                &quot;REJECTED&quot; -&gt; REJECTED&#10;                &quot;EXPIRED&quot; -&gt; EXPIRED&#10;                else -&gt; PENDING&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Visitor filter enum&#10; */&#10;enum class VisitorFilter(val displayName: String) {&#10;    ALL(&quot;All&quot;),&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;)&#10;}&#10;&#10;/**&#10; * UI model for visitor display&#10; */&#10;data class Visitor(&#10;    val id: Int,&#10;    val name: String,&#10;    val email: String,&#10;    val phone: String,&#10;    val purpose: String,&#10;    val hostId: Int,&#10;    val status: VisitorStatus,&#10;    val entryTime: String?,&#10;    val exitTime: String?,&#10;    val createdAt: String,&#10;    val updatedAt: String,&#10;    val date: String, // Formatted date for display&#10;    val time: String  // Formatted time for display&#10;)&#10;&#10;/**&#10; * UI state for visitors list&#10; */&#10;data class VisitorsListUiState(&#10;    val visitors: List&lt;Visitor&gt; = emptyList(),&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val searchQuery: String = &quot;&quot;,&#10;    val selectedFilter: VisitorFilter = VisitorFilter.ALL&#10;)&#10;&#10;/**&#10; * Extension function to convert API data to UI model&#10; */&#10;fun VisitorData.toVisitor(): Visitor {&#10;    val dateTimeFormatter = java.text.SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss'Z'&quot;, java.util.Locale.getDefault())&#10;    val displayDateFormatter = java.text.SimpleDateFormat(&quot;MMM dd, yyyy&quot;, java.util.Locale.getDefault())&#10;    val displayTimeFormatter = java.text.SimpleDateFormat(&quot;HH:mm&quot;, java.util.Locale.getDefault())&#10;&#10;    val createdDate = try {&#10;        dateTimeFormatter.parse(createdAt)&#10;    } catch (e: Exception) {&#10;        java.util.Date()&#10;    }&#10;&#10;    return Visitor(&#10;        id = visitorId,&#10;        name = name,&#10;        email = email,&#10;        phone = phoneNumber,&#10;        purpose = purposeOfVisit,&#10;        hostId = hostId,&#10;        status = VisitorStatus.fromString(status),&#10;        entryTime = entryTime,&#10;        exitTime = exitTime,&#10;        createdAt = createdAt,&#10;        updatedAt = updatedAt,&#10;        date = displayDateFormatter.format(createdDate ?: java.util.Date()),&#10;        time = displayTimeFormatter.format(createdDate ?: java.util.Date())&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/network/VisitorApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/network/VisitorApiService.kt" />
              <option name="originalContent" value="package com.example.permitely.data.network&#10;&#10;import com.example.permitely.data.models.CreateVisitorRequest&#10;import com.example.permitely.data.models.CreateVisitorResponse&#10;import com.example.permitely.data.models.VisitorApiResponse&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;/**&#10; * Retrofit API service interface for visitor endpoints&#10; */&#10;interface VisitorApiService {&#10;&#10;    /**&#10;     * Create a new visitor&#10;     * POST /api/visitors/&#10;     */&#10;    @POST(&quot;api/visitors/&quot;)&#10;    suspend fun createVisitor(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body request: CreateVisitorRequest&#10;    ): Response&lt;CreateVisitorResponse&gt;&#10;&#10;    /**&#10;     * Get all visitors for the authenticated host&#10;     * @param authorization Bearer token for authentication&#10;     * @param status Optional filter by visitor status (PENDING, APPROVED, REJECTED, EXPIRED)&#10;     * @return Response containing list of visitors&#10;     */&#10;    @GET(&quot;api/visitors&quot;)&#10;    suspend fun getAllVisitors(&#10;        @Header(&quot;Authorization&quot;) authorization: String,&#10;        @Query(&quot;status&quot;) status: String? = null&#10;    ): Response&lt;VisitorApiResponse&gt;&#10;&#10;    // TODO: Add other visitor endpoints as needed&#10;    // GET /api/visitors/ - Get all visitors&#10;    // GET /api/visitors/{id} - Get visitor by ID&#10;    // PUT /api/visitors/{id} - Update visitor&#10;    // DELETE /api/visitors/{id} - Delete visitor&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.data.network&#10;&#10;import com.example.permitely.data.models.VisitorApiResponse&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Header&#10;import retrofit2.http.Query&#10;&#10;/**&#10; * API service interface for visitor-related endpoints&#10; */&#10;interface VisitorApiService {&#10;&#10;    /**&#10;     * Get all visitors for the authenticated host&#10;     * @param authorization Bearer token for authentication&#10;     * @param status Optional filter by visitor status (PENDING, APPROVED, REJECTED, EXPIRED)&#10;     * @return Response containing list of visitors&#10;     */&#10;    @GET(&quot;api/visitors&quot;)&#10;    suspend fun getAllVisitors(&#10;        @Header(&quot;Authorization&quot;) authorization: String,&#10;        @Query(&quot;status&quot;) status: String? = null&#10;    ): Response&lt;VisitorApiResponse&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/repository/VisitorRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/repository/VisitorRepository.kt" />
              <option name="originalContent" value="package com.example.permitely.data.repository&#10;&#10;import com.example.permitely.data.models.CreateVisitorRequest&#10;import com.example.permitely.data.models.CreateVisitorResponseData&#10;import com.example.permitely.data.models.Visitor&#10;import com.example.permitely.data.models.VisitorFilter&#10;import com.example.permitely.data.models.toVisitor&#10;import com.example.permitely.data.network.VisitorApiService&#10;import com.example.permitely.data.storage.TokenStorage&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import kotlinx.coroutines.flow.first&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Repository for visitor-related operations&#10; * Handles visitor creation, management, and API communications&#10; */&#10;@Singleton&#10;class VisitorRepository @Inject constructor(&#10;    private val visitorApiService: VisitorApiService,&#10;    private val tokenStorage: TokenStorage&#10;) {&#10;&#10;    /**&#10;     * Create a new visitor&#10;     * @param request CreateVisitorRequest containing visitor details&#10;     * @return Flow&lt;Result&lt;CreateVisitorResponseData&gt;&gt; - Flow containing success/failure results&#10;     */&#10;    fun createVisitor(request: CreateVisitorRequest): Flow&lt;Result&lt;CreateVisitorResponseData&gt;&gt; = flow {&#10;        try {&#10;            val token = tokenStorage.getAccessToken().first()&#10;            if (token == null || token.isEmpty()) {&#10;                emit(Result.failure(Exception(&quot;No access token available&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            println(&quot;DEBUG: Creating visitor - Name: ${request.name}, Email: ${request.email}&quot;)&#10;&#10;            val response = visitorApiService.createVisitor(&quot;Bearer $token&quot;, request)&#10;&#10;            println(&quot;DEBUG: Create visitor API response code: ${response.code()}&quot;)&#10;            println(&quot;DEBUG: Create visitor API response successful: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val body = response.body()&#10;                println(&quot;DEBUG: Create visitor response body: $body&quot;)&#10;&#10;                if (body?.status == &quot;success&quot; &amp;&amp; body.data != null) {&#10;                    println(&quot;DEBUG: Visitor created successfully - ID: ${body.data.visitor.visitorId}&quot;)&#10;                    emit(Result.success(body.data))&#10;                } else {&#10;                    val errorMessage = body?.message ?: &quot;Failed to create visitor&quot;&#10;                    println(&quot;DEBUG: Create visitor failed: $errorMessage&quot;)&#10;                    emit(Result.failure(Exception(errorMessage)))&#10;                }&#10;            } else {&#10;                // Handle HTTP error responses - Parse JSON error response from backend&#10;                val errorBody = response.errorBody()?.string()&#10;                println(&quot;DEBUG: Create visitor HTTP error ${response.code()}: $errorBody&quot;)&#10;&#10;                // Try to parse the JSON error response from backend&#10;                val errorMessage = try {&#10;                    if (errorBody != null) {&#10;                        // Parse the JSON error response: {&quot;status&quot;: &quot;error&quot;, &quot;message&quot;: &quot;error message&quot;}&#10;                        val gson = com.google.gson.Gson()&#10;                        val errorResponse = gson.fromJson(errorBody, com.google.gson.JsonObject::class.java)&#10;&#10;                        // Extract the message field from the error response&#10;                        val backendMessage = errorResponse.get(&quot;message&quot;)?.asString&#10;&#10;                        if (!backendMessage.isNullOrEmpty()) {&#10;                            backendMessage // Use the exact error message from backend&#10;                        } else {&#10;                            // Fallback to HTTP status code based messages&#10;                            when (response.code()) {&#10;                                400 -&gt; &quot;Invalid visitor information provided&quot;&#10;                                409 -&gt; &quot;This visitor already has an active or pending visit&quot;&#10;                                401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                                403 -&gt; &quot;You don't have permission to create visitors&quot;&#10;                                500 -&gt; &quot;Server error. Please try again later&quot;&#10;                                else -&gt; &quot;Failed to create visitor. Please try again&quot;&#10;                            }&#10;                        }&#10;                    } else {&#10;                        &quot;Failed to create visitor. Please try again&quot;&#10;                    }&#10;                } catch (jsonException: Exception) {&#10;                    println(&quot;DEBUG: Failed to parse JSON error response: ${jsonException.message}&quot;)&#10;                    // Fallback to HTTP status code based messages if JSON parsing fails&#10;                    when (response.code()) {&#10;                        400 -&gt; &quot;Invalid visitor information provided&quot;&#10;                        409 -&gt; &quot;This visitor already has an active or pending visit&quot;&#10;                        401 -&gt; &quot;Authentication failed. Please login again&quot;&#10;                        403 -&gt; &quot;You don't have permission to create visitors&quot;&#10;                        500 -&gt; &quot;Server error. Please try again later&quot;&#10;                        else -&gt; &quot;Failed to create visitor. Please try again&quot;&#10;                    }&#10;                }&#10;&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Create visitor exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                is com.google.gson.JsonSyntaxException -&gt; &quot;Invalid response format from server&quot;&#10;                is com.google.gson.JsonParseException -&gt; &quot;Failed to parse server response&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(Result.failure(Exception(errorMessage)))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all visitors for the authenticated host&#10;     * @param filter Optional status filter to apply&#10;     * @return Flow&lt;Result&lt;List&lt;Visitor&gt;&gt;&gt; containing the list of visitors or error&#10;     */&#10;    fun getAllVisitors(filter: VisitorFilter? = null): Flow&lt;Result&lt;List&lt;Visitor&gt;&gt;&gt; = flow {&#10;        try {&#10;            // Get the auth token&#10;            val token = tokenStorage.getToken()&#10;            if (token.isNullOrBlank()) {&#10;                emit(Result.failure(Exception(&quot;Authentication token not found&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            // Determine status filter for API call&#10;            val statusFilter = when (filter) {&#10;                VisitorFilter.PENDING -&gt; &quot;PENDING&quot;&#10;                VisitorFilter.APPROVED -&gt; &quot;APPROVED&quot;&#10;                VisitorFilter.REJECTED -&gt; &quot;REJECTED&quot;&#10;                VisitorFilter.EXPIRED -&gt; &quot;EXPIRED&quot;&#10;                VisitorFilter.ALL, null -&gt; null&#10;            }&#10;&#10;            // Make API call&#10;            val response = visitorApiService.getAllVisitors(&#10;                authorization = &quot;Bearer $token&quot;,&#10;                status = statusFilter&#10;            )&#10;&#10;            if (response.isSuccessful) {&#10;                val apiResponse = response.body()&#10;                if (apiResponse != null &amp;&amp; apiResponse.status == &quot;success&quot;) {&#10;                    // Transform API data to UI models&#10;                    val visitors = apiResponse.data.visitors.map { it.toVisitor() }&#10;                    emit(Result.success(visitors))&#10;                } else {&#10;                    emit(Result.failure(Exception(&quot;Invalid response format&quot;)))&#10;                }&#10;            } else {&#10;                // Handle HTTP error codes&#10;                val errorMessage = when (response.code()) {&#10;                    401 -&gt; &quot;Authentication failed. Please login again.&quot;&#10;                    403 -&gt; &quot;Access denied. You don't have permission to view visitors.&quot;&#10;                    404 -&gt; &quot;Visitors endpoint not found.&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later.&quot;&#10;                    else -&gt; &quot;Failed to fetch visitors: ${response.message()}&quot;&#10;                }&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            emit(Result.failure(e))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.data.repository&#10;&#10;import com.example.permitely.data.models.Visitor&#10;import com.example.permitely.data.models.VisitorFilter&#10;import com.example.permitely.data.models.VisitorApiResponse&#10;import com.example.permitely.data.models.toVisitor&#10;import com.example.permitely.data.network.VisitorApiService&#10;import com.example.permitely.data.storage.TokenStorage&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Repository for visitor-related data operations&#10; * Handles API calls and data transformations following MVVM architecture&#10; */&#10;@Singleton&#10;class VisitorRepository @Inject constructor(&#10;    private val visitorApiService: VisitorApiService,&#10;    private val tokenStorage: TokenStorage&#10;) {&#10;&#10;    /**&#10;     * Get all visitors for the authenticated host&#10;     * @param filter Optional status filter to apply&#10;     * @return Flow&lt;Result&lt;List&lt;Visitor&gt;&gt;&gt; containing the list of visitors or error&#10;     */&#10;    fun getAllVisitors(filter: VisitorFilter? = null): Flow&lt;Result&lt;List&lt;Visitor&gt;&gt;&gt; = flow {&#10;        try {&#10;            // Get the auth token&#10;            val token = tokenStorage.getToken()&#10;            if (token.isNullOrBlank()) {&#10;                emit(Result.failure(Exception(&quot;Authentication token not found&quot;)))&#10;                return@flow&#10;            }&#10;&#10;            // Determine status filter for API call&#10;            val statusFilter = when (filter) {&#10;                VisitorFilter.PENDING -&gt; &quot;PENDING&quot;&#10;                VisitorFilter.APPROVED -&gt; &quot;APPROVED&quot;&#10;                VisitorFilter.REJECTED -&gt; &quot;REJECTED&quot;&#10;                VisitorFilter.EXPIRED -&gt; &quot;EXPIRED&quot;&#10;                VisitorFilter.ALL, null -&gt; null&#10;            }&#10;&#10;            // Make API call&#10;            val response = visitorApiService.getAllVisitors(&#10;                authorization = &quot;Bearer $token&quot;,&#10;                status = statusFilter&#10;            )&#10;&#10;            if (response.isSuccessful) {&#10;                val apiResponse = response.body()&#10;                if (apiResponse != null &amp;&amp; apiResponse.status == &quot;success&quot;) {&#10;                    // Transform API data to UI models&#10;                    val visitors = apiResponse.data.visitors.map { it.toVisitor() }&#10;                    emit(Result.success(visitors))&#10;                } else {&#10;                    emit(Result.failure(Exception(&quot;Invalid response format&quot;)))&#10;                }&#10;            } else {&#10;                // Handle HTTP error codes&#10;                val errorMessage = when (response.code()) {&#10;                    401 -&gt; &quot;Authentication failed. Please login again.&quot;&#10;                    403 -&gt; &quot;Access denied. You don't have permission to view visitors.&quot;&#10;                    404 -&gt; &quot;Visitors endpoint not found.&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later.&quot;&#10;                    else -&gt; &quot;Failed to fetch visitors: ${response.message()}&quot;&#10;                }&#10;                emit(Result.failure(Exception(errorMessage)))&#10;            }&#10;        } catch (e: Exception) {&#10;            emit(Result.failure(e))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/common/PermitelyAppBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/common/PermitelyAppBar.kt" />
              <option name="updatedContent" value="package com.example.permitely.ui.common&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.permitely.ui.theme.*&#10;&#10;/**&#10; * Modern App Bar Component for Permitely&#10; * Follows Material Design 3 guidelines with smooth animations and theme integration&#10; */&#10;&#10;/**&#10; * Large App Bar - Used for main screens like Dashboard&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PermitelyLargeAppBar(&#10;    title: String,&#10;    subtitle: String? = null,&#10;    actions: @Composable RowScope.() -&gt; Unit = {},&#10;    scrollBehavior: TopAppBarScrollBehavior? = null,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    LargeTopAppBar(&#10;        title = {&#10;            Column {&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = TextPrimary,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;                if (subtitle != null) {&#10;                    Text(&#10;                        text = subtitle,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = TextSecondary,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        actions = actions,&#10;        colors = TopAppBarDefaults.largeTopAppBarColors(&#10;            containerColor = Surface,&#10;            scrolledContainerColor = Surface.copy(alpha = 0.95f),&#10;            titleContentColor = TextPrimary,&#10;            actionIconContentColor = Primary&#10;        ),&#10;        scrollBehavior = scrollBehavior,&#10;        modifier = modifier.shadow(&#10;            elevation = 4.dp,&#10;            spotColor = Primary.copy(alpha = 0.1f),&#10;            ambientColor = Primary.copy(alpha = 0.05f)&#10;        )&#10;    )&#10;}&#10;&#10;/**&#10; * Standard App Bar - Used for secondary screens&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PermitelyAppBar(&#10;    title: String,&#10;    onNavigationClick: (() -&gt; Unit)? = null,&#10;    navigationIcon: ImageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;    actions: @Composable RowScope.() -&gt; Unit = {},&#10;    scrollBehavior: TopAppBarScrollBehavior? = null,&#10;    backgroundColor: Color = Surface,&#10;    contentColor: Color = TextPrimary,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = contentColor,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        },&#10;        navigationIcon = {&#10;            onNavigationClick?.let { onClick -&gt;&#10;                IconButton(&#10;                    onClick = onClick,&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .clip(CircleShape)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = navigationIcon,&#10;                        contentDescription = &quot;Navigate back&quot;,&#10;                        tint = Primary,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        actions = actions,&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = backgroundColor,&#10;            titleContentColor = contentColor,&#10;            navigationIconContentColor = Primary,&#10;            actionIconContentColor = Primary&#10;        ),&#10;        scrollBehavior = scrollBehavior,&#10;        modifier = modifier.shadow(&#10;            elevation = 2.dp,&#10;            spotColor = Primary.copy(alpha = 0.1f),&#10;            ambientColor = Primary.copy(alpha = 0.05f)&#10;        )&#10;    )&#10;}&#10;&#10;/**&#10; * Gradient App Bar - For special screens or enhanced visual appeal&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PermitelyGradientAppBar(&#10;    title: String,&#10;    onNavigationClick: (() -&gt; Unit)? = null,&#10;    navigationIcon: ImageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;    actions: @Composable RowScope.() -&gt; Unit = {},&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Surface(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .background(&#10;                brush = Brush.horizontalGradient(&#10;                    colors = listOf(Primary, Secondary)&#10;                )&#10;            )&#10;            .shadow(&#10;                elevation = 8.dp,&#10;                spotColor = Primary.copy(alpha = 0.2f),&#10;                ambientColor = Primary.copy(alpha = 0.1f)&#10;            ),&#10;        color = Color.Transparent&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(&#10;                    brush = Brush.horizontalGradient(&#10;                        colors = listOf(Primary, Secondary)&#10;                    )&#10;                )&#10;                .statusBarsPadding()&#10;        ) {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = title,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = OnPrimary,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    onNavigationClick?.let { onClick -&gt;&#10;                        IconButton(&#10;                            onClick = onClick,&#10;                            modifier = Modifier&#10;                                .size(48.dp)&#10;                                .clip(CircleShape)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = navigationIcon,&#10;                                contentDescription = &quot;Navigate back&quot;,&#10;                                tint = OnPrimary,&#10;                                modifier = Modifier.size(24.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                actions = actions,&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = Color.Transparent,&#10;                    titleContentColor = OnPrimary,&#10;                    navigationIconContentColor = OnPrimary,&#10;                    actionIconContentColor = OnPrimary&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * App Bar with Search - For screens that need search functionality&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PermitelySearchAppBar(&#10;    title: String,&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    onSearchActiveChange: (Boolean) -&gt; Unit,&#10;    isSearchActive: Boolean = false,&#10;    onNavigationClick: (() -&gt; Unit)? = null,&#10;    placeholder: String = &quot;Search...&quot;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = !isSearchActive,&#10;        enter = slideInVertically() + fadeIn(),&#10;        exit = slideOutVertically() + fadeOut()&#10;    ) {&#10;        PermitelyAppBar(&#10;            title = title,&#10;            onNavigationClick = onNavigationClick,&#10;            actions = {&#10;                IconButton(&#10;                    onClick = { onSearchActiveChange(true) }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;            },&#10;            modifier = modifier&#10;        )&#10;    }&#10;&#10;    AnimatedVisibility(&#10;        visible = isSearchActive,&#10;        enter = slideInVertically() + fadeIn(),&#10;        exit = slideOutVertically() + fadeOut()&#10;    ) {&#10;        SearchBar(&#10;            query = searchQuery,&#10;            onQueryChange = onSearchQueryChange,&#10;            onSearch = { /* Handle search submission */ },&#10;            active = isSearchActive,&#10;            onActiveChange = onSearchActiveChange,&#10;            placeholder = {&#10;                Text(&#10;                    text = placeholder,&#10;                    color = TextSecondary&#10;                )&#10;            },&#10;            leadingIcon = {&#10;                IconButton(&#10;                    onClick = { onSearchActiveChange(false) }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Close search&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;            },&#10;            trailingIcon = {&#10;                if (searchQuery.isNotEmpty()) {&#10;                    IconButton(&#10;                        onClick = { onSearchQueryChange(&quot;&quot;) }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Close,&#10;                            contentDescription = &quot;Clear search&quot;,&#10;                            tint = TextSecondary&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            colors = SearchBarDefaults.colors(&#10;                containerColor = Surface,&#10;                dividerColor = BorderLight&#10;            ),&#10;            modifier = modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            // Search results content can be added here&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * App Bar Action Button - Consistent styling for action buttons&#10; */&#10;@Composable&#10;fun AppBarActionButton(&#10;    icon: ImageVector,&#10;    contentDescription: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true,&#10;    badge: String? = null,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(modifier = modifier) {&#10;        IconButton(&#10;            onClick = onClick,&#10;            enabled = enabled,&#10;            modifier = Modifier&#10;                .size(48.dp)&#10;                .clip(CircleShape)&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = contentDescription,&#10;                tint = if (enabled) Primary else TextDisabled,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;        }&#10;        &#10;        // Badge for notifications, etc.&#10;        if (badge != null) {&#10;            Badge(&#10;                modifier = Modifier&#10;                    .align(Alignment.TopEnd)&#10;                    .offset(x = (-4).dp, y = 4.dp),&#10;                containerColor = Warning,&#10;                contentColor = OnWarning&#10;            ) {&#10;                Text(&#10;                    text = badge,&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * App Bar with Profile - For dashboard and main screens&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PermitelyProfileAppBar(&#10;    title: String,&#10;    subtitle: String? = null,&#10;    userName: String,&#10;    userRole: String,&#10;    onProfileClick: () -&gt; Unit,&#10;    onNotificationClick: (() -&gt; Unit)? = null,&#10;    notificationCount: Int = 0,&#10;    scrollBehavior: TopAppBarScrollBehavior? = null,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    LargeTopAppBar(&#10;        title = {&#10;            Column {&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = TextPrimary,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;                if (subtitle != null) {&#10;                    Text(&#10;                        text = subtitle,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = TextSecondary,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        actions = {&#10;            // Notification button&#10;            onNotificationClick?.let { onClick -&gt;&#10;                AppBarActionButton(&#10;                    icon = Icons.Default.Notifications,&#10;                    contentDescription = &quot;Notifications&quot;,&#10;                    onClick = onClick,&#10;                    badge = if (notificationCount &gt; 0) notificationCount.toString() else null&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            &#10;            // Profile section&#10;            TextButton(&#10;                onClick = onProfileClick,&#10;                colors = ButtonDefaults.textButtonColors(&#10;                    contentColor = TextPrimary&#10;                ),&#10;                modifier = Modifier.padding(end = 8.dp)&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.End&#10;                ) {&#10;                    Text(&#10;                        text = userName,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = TextPrimary,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                    Text(&#10;                        text = userRole.capitalize(),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Primary,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(32.dp)&#10;                        .background(&#10;                            brush = Brush.radialGradient(&#10;                                colors = listOf(Primary, Secondary)&#10;                            ),&#10;                            shape = CircleShape&#10;                        ),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        tint = OnPrimary,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.largeTopAppBarColors(&#10;            containerColor = Surface,&#10;            scrolledContainerColor = Surface.copy(alpha = 0.95f),&#10;            titleContentColor = TextPrimary,&#10;            actionIconContentColor = Primary&#10;        ),&#10;        scrollBehavior = scrollBehavior,&#10;        modifier = modifier.shadow(&#10;            elevation = 4.dp,&#10;            spotColor = Primary.copy(alpha = 0.1f),&#10;            ambientColor = Primary.copy(alpha = 0.05f)&#10;        )&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/CreateVisitorScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/CreateVisitorScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyButton&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;/**&#10; * Create Visitor Screen - Host creates new visitor appointment&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CreateVisitorScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onVisitorCreated: (visitorData: com.example.permitely.data.models.CreateVisitorResponseData) -&gt; Unit = {},&#10;    viewModel: CreateVisitorViewModel = hiltViewModel()&#10;) {&#10;    var visitorName by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneNumber by remember { mutableStateOf(&quot;&quot;) }&#10;    var purposeOfVisit by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedTime by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Validation states&#10;    var nameError by remember { mutableStateOf(&quot;&quot;) }&#10;    var emailError by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneError by remember { mutableStateOf(&quot;&quot;) }&#10;    var purposeError by remember { mutableStateOf(&quot;&quot;) }&#10;    var dateTimeError by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // UI states&#10;    var showSuccessDialog by remember { mutableStateOf(false) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showTimePicker by remember { mutableStateOf(false) }&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val scrollState = rememberScrollState()&#10;&#10;    // Date and Time Picker States&#10;    val datePickerState = rememberDatePickerState()&#10;    val timePickerState = rememberTimePickerState()&#10;&#10;    // Observe ViewModel state&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var hasShownSuccessForCurrentVisitor by remember { mutableStateOf(false) }&#10;    var isScreenActive by remember { mutableStateOf(true) }&#10;&#10;    // Reset ViewModel state when screen is first composed&#10;    LaunchedEffect(Unit) {&#10;        isScreenActive = true&#10;        viewModel.resetState()&#10;        showSuccessDialog = false&#10;        hasShownSuccessForCurrentVisitor = false&#10;    }&#10;&#10;    // Mark screen as inactive when leaving&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            isScreenActive = false&#10;        }&#10;    }&#10;&#10;    // Handle API response states - only show dialog once per visitor creation and when screen is active&#10;    LaunchedEffect(uiState.isSuccess, uiState.createdVisitorData, isScreenActive) {&#10;        if (isScreenActive &amp;&amp; uiState.isSuccess &amp;&amp; uiState.createdVisitorData != null &amp;&amp; !hasShownSuccessForCurrentVisitor) {&#10;            showSuccessDialog = true&#10;            hasShownSuccessForCurrentVisitor = true&#10;        }&#10;    }&#10;&#10;    // Get context for showing toast messages&#10;    val context = LocalContext.current&#10;&#10;    // Handle errors from API - Show toast messages for API errors&#10;    LaunchedEffect(uiState.error) {&#10;        if (uiState.error != null) {&#10;            // Show API error as toast message on screen&#10;            Toast.makeText(&#10;                context,&#10;                &quot;Error: ${uiState.error}&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;&#10;            // Clear previous field errors since this is an API error&#10;            nameError = &quot;&quot;&#10;            emailError = &quot;&quot;&#10;            phoneError = &quot;&quot;&#10;            purposeError = &quot;&quot;&#10;            dateTimeError = &quot;&quot;&#10;&#10;            // Clear the error from ViewModel after showing toast&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    // Validation functions&#10;    fun validateForm(): Boolean {&#10;        var isValid = true&#10;&#10;        // Clear previous errors&#10;        nameError = &quot;&quot;&#10;        emailError = &quot;&quot;&#10;        phoneError = &quot;&quot;&#10;        purposeError = &quot;&quot;&#10;        dateTimeError = &quot;&quot;&#10;&#10;        // Validate name&#10;        if (visitorName.isBlank()) {&#10;            nameError = &quot;Visitor name is required&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate email&#10;        if (email.isBlank()) {&#10;            emailError = &quot;Email address is required&quot;&#10;            isValid = false&#10;        } else if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            emailError = &quot;Please enter a valid email address&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate phone&#10;        if (phoneNumber.isBlank()) {&#10;            phoneError = &quot;Phone number is required&quot;&#10;            isValid = false&#10;        } else if (phoneNumber.length &lt; 10) {&#10;            phoneError = &quot;Please enter a valid phone number&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate purpose&#10;        if (purposeOfVisit.isBlank()) {&#10;            purposeError = &quot;Purpose of visit is required&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate date and time&#10;        if (selectedDate.isBlank() || selectedTime.isBlank()) {&#10;            dateTimeError = &quot;Please select visit date and time&quot;&#10;            isValid = false&#10;        }&#10;&#10;        return isValid&#10;    }&#10;&#10;    // Submit function&#10;    fun submitVisitor() {&#10;        if (validateForm()) {&#10;            scope.launch {&#10;                // Clear previous errors&#10;                viewModel.clearError()&#10;&#10;                // Submit visitor data with proper method call&#10;                viewModel.createVisitorWithDateTime(&#10;                    name = visitorName,&#10;                    email = email,&#10;                    phoneNumber = phoneNumber,&#10;                    purposeOfVisit = purposeOfVisit,&#10;                    selectedDate = selectedDate,&#10;                    selectedTime = selectedTime&#10;                )&#10;            }&#10;        } else {&#10;            // Show error messages on the screen using Toast&#10;            Toast.makeText(context, &quot;Please fix the errors in the form&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(scrollState)&#10;        ) {&#10;            // Top App Bar&#10;            CreateVisitorTopBar(onNavigateBack = onNavigateBack)&#10;&#10;            // Form Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Header Section&#10;                CreateVisitorHeader()&#10;&#10;                // Form Fields&#10;                CreateVisitorForm(&#10;                    visitorName = visitorName,&#10;                    onNameChange = {&#10;                        visitorName = it&#10;                        nameError = &quot;&quot;&#10;                    },&#10;                    nameError = nameError,&#10;&#10;                    email = email,&#10;                    onEmailChange = {&#10;                        email = it&#10;                        emailError = &quot;&quot;&#10;                    },&#10;                    emailError = emailError,&#10;&#10;                    phoneNumber = phoneNumber,&#10;                    onPhoneChange = {&#10;                        phoneNumber = it&#10;                        phoneError = &quot;&quot;&#10;                    },&#10;                    phoneError = phoneError,&#10;&#10;                    purposeOfVisit = purposeOfVisit,&#10;                    onPurposeChange = {&#10;                        purposeOfVisit = it&#10;                        purposeError = &quot;&quot;&#10;                    },&#10;                    purposeError = purposeError,&#10;&#10;                    selectedDate = selectedDate,&#10;                    selectedTime = selectedTime,&#10;                    onDateClick = { showDatePicker = true },&#10;                    onTimeClick = { showTimePicker = true },&#10;                    dateTimeError = dateTimeError&#10;                )&#10;&#10;                // Submit Button&#10;                PermitelyButton(&#10;                    text = &quot;Create Visitor Appointment&quot;,&#10;                    onClick = { submitVisitor() },&#10;                    loading = uiState.isLoading,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;&#10;                // Bottom spacing&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;    }&#10;&#10;    // Date Picker Dialog&#10;    if (showDatePicker) {&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                            val formatter = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;                            selectedDate = formatter.format(Date(millis))&#10;                            dateTimeError = &quot;&quot;&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;, color = Primary)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;&#10;    // Time Picker Dialog&#10;    if (showTimePicker) {&#10;        TimePickerDialog(&#10;            onDismissRequest = { showTimePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        val hour = timePickerState.hour&#10;                        val minute = timePickerState.minute&#10;                        val formattedTime = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                        selectedTime = formattedTime&#10;                        dateTimeError = &quot;&quot;&#10;                        showTimePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;, color = Primary)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showTimePicker = false }) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;            }&#10;        ) {&#10;            TimePicker(state = timePickerState)&#10;        }&#10;    }&#10;&#10;    // Success Dialog&#10;    if (showSuccessDialog &amp;&amp; isScreenActive) {&#10;        SuccessDialog(&#10;            onDismiss = {&#10;                showSuccessDialog = false&#10;                hasShownSuccessForCurrentVisitor = false&#10;&#10;                // Only proceed with navigation if we have valid data and screen is still active&#10;                val currentVisitorData = uiState.createdVisitorData&#10;                if (isScreenActive &amp;&amp; currentVisitorData != null) {&#10;                    try {&#10;                        onVisitorCreated(currentVisitorData)&#10;                    } catch (e: Exception) {&#10;                        // Log error and just navigate back instead of crashing&#10;                        println(&quot;Error in onVisitorCreated callback: ${e.message}&quot;)&#10;                        onNavigateBack()&#10;                    }&#10;                } else {&#10;                    // If no valid data, just go back to dashboard&#10;                    onNavigateBack()&#10;                }&#10;&#10;                // Always reset the ViewModel state after handling&#10;                viewModel.resetState()&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CreateVisitorTopBar(onNavigateBack: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;Create New Visitor&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CreateVisitorHeader() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        brush = Brush.radialGradient(&#10;                            colors = listOf(Primary, Secondary)&#10;                        ),&#10;                        shape = androidx.compose.foundation.shape.CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.PersonAdd,&#10;                    contentDescription = &quot;Create Visitor&quot;,&#10;                    tint = OnPrimary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column {&#10;                Text(&#10;                    text = &quot;New Visitor Appointment&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Fill in the details to create a visitor entry&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CreateVisitorForm(&#10;    visitorName: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    nameError: String,&#10;&#10;    email: String,&#10;    onEmailChange: (String) -&gt; Unit,&#10;    emailError: String,&#10;&#10;    phoneNumber: String,&#10;    onPhoneChange: (String) -&gt; Unit,&#10;    phoneError: String,&#10;&#10;    purposeOfVisit: String,&#10;    onPurposeChange: (String) -&gt; Unit,&#10;    purposeError: String,&#10;&#10;    selectedDate: String,&#10;    selectedTime: String,&#10;    onDateClick: () -&gt; Unit,&#10;    onTimeClick: () -&gt; Unit,&#10;    dateTimeError: String&#10;) {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Visitor Name&#10;        PermitelyTextField(&#10;            value = visitorName,&#10;            onValueChange = onNameChange,&#10;            label = &quot;Visitor Name *&quot;,&#10;            keyboardType = KeyboardType.Text,&#10;            isError = nameError.isNotEmpty(),&#10;            errorMessage = nameError&#10;        )&#10;&#10;        // Email Address&#10;        PermitelyTextField(&#10;            value = email,&#10;            onValueChange = onEmailChange,&#10;            label = &quot;Email Address *&quot;,&#10;            keyboardType = KeyboardType.Email,&#10;            isError = emailError.isNotEmpty(),&#10;            errorMessage = emailError&#10;        )&#10;&#10;        // Phone Number&#10;        PermitelyTextField(&#10;            value = phoneNumber,&#10;            onValueChange = onPhoneChange,&#10;            label = &quot;Phone Number *&quot;,&#10;            keyboardType = KeyboardType.Phone,&#10;            isError = phoneError.isNotEmpty(),&#10;            errorMessage = phoneError&#10;        )&#10;&#10;        // Purpose of Visit&#10;        PermitelyTextField(&#10;            value = purposeOfVisit,&#10;            onValueChange = onPurposeChange,&#10;            label = &quot;Purpose of Visit *&quot;,&#10;            keyboardType = KeyboardType.Text,&#10;            isError = purposeError.isNotEmpty(),&#10;            errorMessage = purposeError&#10;        )&#10;&#10;        // Date and Time Section&#10;        Text(&#10;            text = &quot;Visit Schedule&quot;,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Date Picker&#10;            DateTimeCard(&#10;                label = &quot;Date&quot;,&#10;                value = selectedDate.ifEmpty { &quot;Select Date&quot; },&#10;                icon = Icons.Default.DateRange,&#10;                onClick = onDateClick,&#10;                modifier = Modifier.weight(1f),&#10;                isError = dateTimeError.isNotEmpty() &amp;&amp; selectedDate.isEmpty()&#10;            )&#10;&#10;            // Time Picker&#10;            DateTimeCard(&#10;                label = &quot;Time&quot;,&#10;                value = selectedTime.ifEmpty { &quot;Select Time&quot; },&#10;                icon = Icons.Default.Schedule,&#10;                onClick = onTimeClick,&#10;                modifier = Modifier.weight(1f),&#10;                isError = dateTimeError.isNotEmpty() &amp;&amp; selectedTime.isEmpty()&#10;            )&#10;        }&#10;&#10;        // Date/Time Error&#10;        if (dateTimeError.isNotEmpty()) {&#10;            Text(&#10;                text = dateTimeError,&#10;                color = Error,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                modifier = Modifier.padding(start = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DateTimeCard(&#10;    label: String,&#10;    value: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    isError: Boolean = false&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isError) Error.copy(alpha = 0.05f) else Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = onClick,&#10;        border = if (isError) androidx.compose.foundation.BorderStroke(1.dp, Error) else null&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = label,&#10;                tint = if (isError) Error else Primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = if (value.contains(&quot;Select&quot;)) TextTertiary else TextPrimary,&#10;                fontWeight = if (value.contains(&quot;Select&quot;)) FontWeight.Normal else FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TimePickerDialog(&#10;    onDismissRequest: () -&gt; Unit,&#10;    confirmButton: @Composable () -&gt; Unit,&#10;    dismissButton: @Composable () -&gt; Unit,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismissRequest,&#10;        confirmButton = confirmButton,&#10;        dismissButton = dismissButton,&#10;        text = { content() },&#10;        containerColor = Surface,&#10;        titleContentColor = TextPrimary,&#10;        textContentColor = TextPrimary&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun SuccessDialog(onDismiss: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CheckCircle,&#10;                    contentDescription = &quot;Success&quot;,&#10;                    tint = Success,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Success!&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Visitor appointment has been created successfully. The visitor will receive a confirmation email with visit details.&quot;,&#10;                color = TextSecondary,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            PermitelyButton(&#10;                text = &quot;Done&quot;,&#10;                onClick = onDismiss,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyButton&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.common.PermitelyAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;/**&#10; * Create Visitor Screen - Host creates new visitor appointment&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CreateVisitorScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onVisitorCreated: (visitorData: com.example.permitely.data.models.CreateVisitorResponseData) -&gt; Unit = {},&#10;    viewModel: CreateVisitorViewModel = hiltViewModel()&#10;) {&#10;    var visitorName by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneNumber by remember { mutableStateOf(&quot;&quot;) }&#10;    var purposeOfVisit by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedDate by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedTime by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Validation states&#10;    var nameError by remember { mutableStateOf(&quot;&quot;) }&#10;    var emailError by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneError by remember { mutableStateOf(&quot;&quot;) }&#10;    var purposeError by remember { mutableStateOf(&quot;&quot;) }&#10;    var dateTimeError by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // UI states&#10;    var showSuccessDialog by remember { mutableStateOf(false) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showTimePicker by remember { mutableStateOf(false) }&#10;&#10;    val scope = rememberCoroutineScope()&#10;    val scrollState = rememberScrollState()&#10;&#10;    // Date and Time Picker States&#10;    val datePickerState = rememberDatePickerState()&#10;    val timePickerState = rememberTimePickerState()&#10;&#10;    // Observe ViewModel state&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var hasShownSuccessForCurrentVisitor by remember { mutableStateOf(false) }&#10;    var isScreenActive by remember { mutableStateOf(true) }&#10;&#10;    // Reset ViewModel state when screen is first composed&#10;    LaunchedEffect(Unit) {&#10;        isScreenActive = true&#10;        viewModel.resetState()&#10;        showSuccessDialog = false&#10;        hasShownSuccessForCurrentVisitor = false&#10;    }&#10;&#10;    // Mark screen as inactive when leaving&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            isScreenActive = false&#10;        }&#10;    }&#10;&#10;    // Handle API response states - only show dialog once per visitor creation and when screen is active&#10;    LaunchedEffect(uiState.isSuccess, uiState.createdVisitorData, isScreenActive) {&#10;        if (isScreenActive &amp;&amp; uiState.isSuccess &amp;&amp; uiState.createdVisitorData != null &amp;&amp; !hasShownSuccessForCurrentVisitor) {&#10;            showSuccessDialog = true&#10;            hasShownSuccessForCurrentVisitor = true&#10;        }&#10;    }&#10;&#10;    // Get context for showing toast messages&#10;    val context = LocalContext.current&#10;&#10;    // Handle errors from API - Show toast messages for API errors&#10;    LaunchedEffect(uiState.error) {&#10;        if (uiState.error != null) {&#10;            // Show API error as toast message on screen&#10;            Toast.makeText(&#10;                context,&#10;                &quot;Error: ${uiState.error}&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;&#10;            // Clear previous field errors since this is an API error&#10;            nameError = &quot;&quot;&#10;            emailError = &quot;&quot;&#10;            phoneError = &quot;&quot;&#10;            purposeError = &quot;&quot;&#10;            dateTimeError = &quot;&quot;&#10;&#10;            // Clear the error from ViewModel after showing toast&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    // Validation functions&#10;    fun validateForm(): Boolean {&#10;        var isValid = true&#10;&#10;        // Clear previous errors&#10;        nameError = &quot;&quot;&#10;        emailError = &quot;&quot;&#10;        phoneError = &quot;&quot;&#10;        purposeError = &quot;&quot;&#10;        dateTimeError = &quot;&quot;&#10;&#10;        // Validate name&#10;        if (visitorName.isBlank()) {&#10;            nameError = &quot;Visitor name is required&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate email&#10;        if (email.isBlank()) {&#10;            emailError = &quot;Email address is required&quot;&#10;            isValid = false&#10;        } else if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            emailError = &quot;Please enter a valid email address&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate phone&#10;        if (phoneNumber.isBlank()) {&#10;            phoneError = &quot;Phone number is required&quot;&#10;            isValid = false&#10;        } else if (phoneNumber.length &lt; 10) {&#10;            phoneError = &quot;Please enter a valid phone number&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate purpose&#10;        if (purposeOfVisit.isBlank()) {&#10;            purposeError = &quot;Purpose of visit is required&quot;&#10;            isValid = false&#10;        }&#10;&#10;        // Validate date and time&#10;        if (selectedDate.isBlank() || selectedTime.isBlank()) {&#10;            dateTimeError = &quot;Please select visit date and time&quot;&#10;            isValid = false&#10;        }&#10;&#10;        return isValid&#10;    }&#10;&#10;    // Submit function&#10;    fun submitVisitor() {&#10;        if (validateForm()) {&#10;            scope.launch {&#10;                // Clear previous errors&#10;                viewModel.clearError()&#10;&#10;                // Submit visitor data with proper method call&#10;                viewModel.createVisitorWithDateTime(&#10;                    name = visitorName,&#10;                    email = email,&#10;                    phoneNumber = phoneNumber,&#10;                    purposeOfVisit = purposeOfVisit,&#10;                    selectedDate = selectedDate,&#10;                    selectedTime = selectedTime&#10;                )&#10;            }&#10;        } else {&#10;            // Show error messages on the screen using Toast&#10;            Toast.makeText(context, &quot;Please fix the errors in the form&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyAppBar(&#10;                title = &quot;Create New Visitor&quot;,&#10;                onNavigationClick = onNavigateBack&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Background)&#10;                .padding(paddingValues)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(scrollState)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Header Section&#10;                CreateVisitorHeader()&#10;&#10;                // Form Fields&#10;                CreateVisitorForm(&#10;                    visitorName = visitorName,&#10;                    onNameChange = {&#10;                        visitorName = it&#10;                        nameError = &quot;&quot;&#10;                    },&#10;                    nameError = nameError,&#10;&#10;                    email = email,&#10;                    onEmailChange = {&#10;                        email = it&#10;                        emailError = &quot;&quot;&#10;                    },&#10;                    emailError = emailError,&#10;&#10;                    phoneNumber = phoneNumber,&#10;                    onPhoneChange = {&#10;                        phoneNumber = it&#10;                        phoneError = &quot;&quot;&#10;                    },&#10;                    phoneError = phoneError,&#10;&#10;                    purposeOfVisit = purposeOfVisit,&#10;                    onPurposeChange = {&#10;                        purposeOfVisit = it&#10;                        purposeError = &quot;&quot;&#10;                    },&#10;                    purposeError = purposeError,&#10;&#10;                    selectedDate = selectedDate,&#10;                    selectedTime = selectedTime,&#10;                    onDateClick = { showDatePicker = true },&#10;                    onTimeClick = { showTimePicker = true },&#10;                    dateTimeError = dateTimeError&#10;                )&#10;&#10;                // Submit Button&#10;                PermitelyButton(&#10;                    text = &quot;Create Visitor Appointment&quot;,&#10;                    onClick = { submitVisitor() },&#10;                    loading = uiState.isLoading,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;&#10;                // Bottom spacing&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;    }&#10;&#10;    // Date Picker Dialog&#10;    if (showDatePicker) {&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                            val formatter = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;                            selectedDate = formatter.format(Date(millis))&#10;                            dateTimeError = &quot;&quot;&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;, color = Primary)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;&#10;    // Time Picker Dialog&#10;    if (showTimePicker) {&#10;        TimePickerDialog(&#10;            onDismissRequest = { showTimePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        val hour = timePickerState.hour&#10;                        val minute = timePickerState.minute&#10;                        val formattedTime = String.format(&quot;%02d:%02d&quot;, hour, minute)&#10;                        selectedTime = formattedTime&#10;                        dateTimeError = &quot;&quot;&#10;                        showTimePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;, color = Primary)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showTimePicker = false }) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;            }&#10;        ) {&#10;            TimePicker(state = timePickerState)&#10;        }&#10;    }&#10;&#10;    // Success Dialog&#10;    if (showSuccessDialog &amp;&amp; isScreenActive) {&#10;        SuccessDialog(&#10;            onDismiss = {&#10;                showSuccessDialog = false&#10;                hasShownSuccessForCurrentVisitor = false&#10;&#10;                // Only proceed with navigation if we have valid data and screen is still active&#10;                val currentVisitorData = uiState.createdVisitorData&#10;                if (isScreenActive &amp;&amp; currentVisitorData != null) {&#10;                    try {&#10;                        onVisitorCreated(currentVisitorData)&#10;                    } catch (e: Exception) {&#10;                        // Log error and just navigate back instead of crashing&#10;                        println(&quot;Error in onVisitorCreated callback: ${e.message}&quot;)&#10;                        onNavigateBack()&#10;                    }&#10;                } else {&#10;                    // If no valid data, just go back to dashboard&#10;                    onNavigateBack()&#10;                }&#10;&#10;                // Always reset the ViewModel state after handling&#10;                viewModel.resetState()&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun CreateVisitorTopBar(onNavigateBack: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;Create New Visitor&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CreateVisitorHeader() {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        brush = Brush.radialGradient(&#10;                            colors = listOf(Primary, Secondary)&#10;                        ),&#10;                        shape = androidx.compose.foundation.shape.CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.PersonAdd,&#10;                    contentDescription = &quot;Create Visitor&quot;,&#10;                    tint = OnPrimary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column {&#10;                Text(&#10;                    text = &quot;New Visitor Appointment&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Fill in the details to create a visitor entry&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CreateVisitorForm(&#10;    visitorName: String,&#10;    onNameChange: (String) -&gt; Unit,&#10;    nameError: String,&#10;&#10;    email: String,&#10;    onEmailChange: (String) -&gt; Unit,&#10;    emailError: String,&#10;&#10;    phoneNumber: String,&#10;    onPhoneChange: (String) -&gt; Unit,&#10;    phoneError: String,&#10;&#10;    purposeOfVisit: String,&#10;    onPurposeChange: (String) -&gt; Unit,&#10;    purposeError: String,&#10;&#10;    selectedDate: String,&#10;    selectedTime: String,&#10;    onDateClick: () -&gt; Unit,&#10;    onTimeClick: () -&gt; Unit,&#10;    dateTimeError: String&#10;) {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Visitor Name&#10;        PermitelyTextField(&#10;            value = visitorName,&#10;            onValueChange = onNameChange,&#10;            label = &quot;Visitor Name *&quot;,&#10;            keyboardType = KeyboardType.Text,&#10;            isError = nameError.isNotEmpty(),&#10;            errorMessage = nameError&#10;        )&#10;&#10;        // Email Address&#10;        PermitelyTextField(&#10;            value = email,&#10;            onValueChange = onEmailChange,&#10;            label = &quot;Email Address *&quot;,&#10;            keyboardType = KeyboardType.Email,&#10;            isError = emailError.isNotEmpty(),&#10;            errorMessage = emailError&#10;        )&#10;&#10;        // Phone Number&#10;        PermitelyTextField(&#10;            value = phoneNumber,&#10;            onValueChange = onPhoneChange,&#10;            label = &quot;Phone Number *&quot;,&#10;            keyboardType = KeyboardType.Phone,&#10;            isError = phoneError.isNotEmpty(),&#10;            errorMessage = phoneError&#10;        )&#10;&#10;        // Purpose of Visit&#10;        PermitelyTextField(&#10;            value = purposeOfVisit,&#10;            onValueChange = onPurposeChange,&#10;            label = &quot;Purpose of Visit *&quot;,&#10;            keyboardType = KeyboardType.Text,&#10;            isError = purposeError.isNotEmpty(),&#10;            errorMessage = purposeError&#10;        )&#10;&#10;        // Date and Time Section&#10;        Text(&#10;            text = &quot;Visit Schedule&quot;,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Date Picker&#10;            DateTimeCard(&#10;                label = &quot;Date&quot;,&#10;                value = selectedDate.ifEmpty { &quot;Select Date&quot; },&#10;                icon = Icons.Default.DateRange,&#10;                onClick = onDateClick,&#10;                modifier = Modifier.weight(1f),&#10;                isError = dateTimeError.isNotEmpty() &amp;&amp; selectedDate.isEmpty()&#10;            )&#10;&#10;            // Time Picker&#10;            DateTimeCard(&#10;                label = &quot;Time&quot;,&#10;                value = selectedTime.ifEmpty { &quot;Select Time&quot; },&#10;                icon = Icons.Default.Schedule,&#10;                onClick = onTimeClick,&#10;                modifier = Modifier.weight(1f),&#10;                isError = dateTimeError.isNotEmpty() &amp;&amp; selectedTime.isEmpty()&#10;            )&#10;        }&#10;&#10;        // Date/Time Error&#10;        if (dateTimeError.isNotEmpty()) {&#10;            Text(&#10;                text = dateTimeError,&#10;                color = Error,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                modifier = Modifier.padding(start = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DateTimeCard(&#10;    label: String,&#10;    value: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    isError: Boolean = false&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isError) Error.copy(alpha = 0.05f) else Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = onClick,&#10;        border = if (isError) androidx.compose.foundation.BorderStroke(1.dp, Error) else null&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = label,&#10;                tint = if (isError) Error else Primary,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = if (value.contains(&quot;Select&quot;)) TextTertiary else TextPrimary,&#10;                fontWeight = if (value.contains(&quot;Select&quot;)) FontWeight.Normal else FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TimePickerDialog(&#10;    onDismissRequest: () -&gt; Unit,&#10;    confirmButton: @Composable () -&gt; Unit,&#10;    dismissButton: @Composable () -&gt; Unit,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismissRequest,&#10;        confirmButton = confirmButton,&#10;        dismissButton = dismissButton,&#10;        text = { content() },&#10;        containerColor = Surface,&#10;        titleContentColor = TextPrimary,&#10;        textContentColor = TextPrimary&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun SuccessDialog(onDismiss: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        containerColor = Surface,&#10;        title = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CheckCircle,&#10;                    contentDescription = &quot;Success&quot;,&#10;                    tint = Success,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Success!&quot;,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Visitor appointment has been created successfully. The visitor will receive a confirmation email with visit details.&quot;,&#10;                color = TextSecondary,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            PermitelyButton(&#10;                text = &quot;Done&quot;,&#10;                onClick = onDismiss,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;        },&#10;        shape = RoundedCornerShape(16.dp)&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostDashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostDashboardScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.input.nestedscroll.nestedScroll&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.ui.common.PermitelyProfileAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Host Dashboard Screen - Main landing page for hosts&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HostDashboardScreen(&#10;    onCreateVisitor: () -&gt; Unit = {},&#10;    onViewAllVisitors: () -&gt; Unit = {},&#10;    onViewNotifications: () -&gt; Unit = {},&#10;    onViewProfile: () -&gt; Unit = {},&#10;    onLogout: () -&gt; Unit = {},&#10;    viewModel: HostDashboardViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scrollBehavior = remember { TopAppBarDefaults.enterAlwaysScrollBehavior(rememberScrollState()) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Handle refresh function&#10;    fun refresh() {&#10;        viewModel.refresh()&#10;    }&#10;&#10;    // Show error snackbar if there's an error&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            // You can show a snackbar here or handle error display&#10;            // For now, we'll just clear the error after showing it&#10;            kotlinx.coroutines.delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyProfileAppBar(&#10;                title = &quot;Dashboard&quot;,&#10;                subtitle = &quot;Manage your visitors and access&quot;,&#10;                userName = uiState.userName,&#10;                userRole = &quot;Host&quot;,&#10;                onProfileClick = onViewProfile,&#10;                onNotificationClick = onViewNotifications,&#10;                notificationCount = 3, // You can make this dynamic based on actual notifications&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(Background)&#10;                    .padding(paddingValues)&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Refresh button&#10;                    item {&#10;                        if (uiState.isLoading) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = Surface)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    horizontalArrangement = Arrangement.Center,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        modifier = Modifier.size(20.dp),&#10;                                        color = Primary,&#10;                                        strokeWidth = 2.dp&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = &quot;Loading dashboard...&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = TextSecondary&#10;                                    )&#10;                                }&#10;                            }&#10;                        } else {&#10;                            Button(&#10;                                onClick = { refresh() },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = Primary.copy(alpha = 0.1f),&#10;                                    contentColor = Primary&#10;                                )&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Refresh,&#10;                                    contentDescription = &quot;Refresh&quot;,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&quot;Refresh Dashboard&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Error display&#10;                    if (uiState.error != null) {&#10;                        item {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Error,&#10;                                        contentDescription = &quot;Error&quot;,&#10;                                        tint = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = uiState.error ?: &quot;Unknown error&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Welcome Header&#10;                    item {&#10;                        WelcomeHeader(&#10;                            hostName = uiState.userName,&#10;                            onViewProfile = onViewProfile,&#10;                            onLogout = onLogout&#10;                        )&#10;                    }&#10;&#10;                    // Stats Cards with real data&#10;                    item {&#10;                        StatsSection(uiState = uiState)&#10;                    }&#10;&#10;                    // Quick Actions&#10;                    item {&#10;                        QuickActionsSection(&#10;                            onCreateVisitor = onCreateVisitor,&#10;                            onViewAllVisitors = onViewAllVisitors,&#10;                            onViewNotifications = onViewNotifications&#10;                        )&#10;                    }&#10;&#10;                    // Recent Visitors&#10;                    item {&#10;                        RecentVisitorsSection()&#10;                    }&#10;&#10;                    // Bottom spacing for FAB&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(80.dp))&#10;                    }&#10;                }&#10;&#10;                // Floating Action Button&#10;                FloatingActionButton(&#10;                    onClick = onCreateVisitor,&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomEnd)&#10;                        .padding(16.dp),&#10;                    containerColor = Primary,&#10;                    contentColor = OnPrimary,&#10;                    elevation = FloatingActionButtonDefaults.elevation(&#10;                        defaultElevation = 8.dp,&#10;                        pressedElevation = 12.dp&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Create New Visitor&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun WelcomeHeader(&#10;    hostName: String,&#10;    onViewProfile: () -&gt; Unit,&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(20.dp),&#10;        onClick = onViewProfile&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;Welcome back!&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = TextSecondary&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = hostName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Tap to view profile&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = Primary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;&#10;            Row {&#10;                IconButton(onClick = onViewProfile) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;                IconButton(onClick = onLogout) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ExitToApp,&#10;                        contentDescription = &quot;Logout&quot;,&#10;                        tint = TextSecondary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatsSection(uiState: DashboardStatsUiState) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Stats&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Total Visitors&quot;,&#10;                value = uiState.totalVisitors.toString(),&#10;                icon = Icons.Default.Group,&#10;                color = Primary,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Pending Requests&quot;,&#10;                value = uiState.pending.toString(),&#10;                icon = Icons.Default.Schedule,&#10;                color = Warning,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Approved&quot;,&#10;                value = uiState.approved.toString(),&#10;                icon = Icons.Default.CheckCircle,&#10;                color = Success,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Rejected&quot;,&#10;                value = uiState.rejected.toString(),&#10;                icon = Icons.Default.Cancel,&#10;                color = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatsCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        color = color.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary,&#10;                maxLines = 1&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionsSection(&#10;    onCreateVisitor: () -&gt; Unit,&#10;    onViewAllVisitors: () -&gt; Unit,&#10;    onViewNotifications: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Actions&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            QuickActionButton(&#10;                title = &quot;Create New Visitor&quot;,&#10;                subtitle = &quot;Register a new visitor entry&quot;,&#10;                icon = Icons.Default.PersonAdd,&#10;                color = Primary,&#10;                onClick = onCreateVisitor&#10;            )&#10;&#10;            QuickActionButton(&#10;                title = &quot;View All Visitors&quot;,&#10;                subtitle = &quot;Browse all visitor records&quot;,&#10;                icon = Icons.Default.List,&#10;                color = Secondary,&#10;                onClick = onViewAllVisitors&#10;            )&#10;&#10;            QuickActionButton(&#10;                title = &quot;View Notifications&quot;,&#10;                subtitle = &quot;Check recent alerts and updates&quot;,&#10;                icon = Icons.Default.Notifications,&#10;                color = Accent,&#10;                onClick = onViewNotifications&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionButton(&#10;    title: String,&#10;    subtitle: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        color = color.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = subtitle,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            Icon(&#10;                imageVector = Icons.Default.ChevronRight,&#10;                contentDescription = &quot;Navigate&quot;,&#10;                tint = TextTertiary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorsSection() {&#10;    Column {&#10;        Text(&#10;            text = &quot;Recent Visitors&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        // Static hardcoded recent visitors data&#10;        val recentVisitors = listOf(&#10;            RecentVisitor(&quot;Alice Johnson&quot;, &quot;Delivery&quot;, &quot;2:30 PM&quot;, &quot;Active&quot;),&#10;            RecentVisitor(&quot;Bob Wilson&quot;, &quot;Meeting&quot;, &quot;1:45 PM&quot;, &quot;Completed&quot;),&#10;            RecentVisitor(&quot;Carol Davis&quot;, &quot;Maintenance&quot;, &quot;12:15 PM&quot;, &quot;Active&quot;),&#10;            RecentVisitor(&quot;David Brown&quot;, &quot;Guest Visit&quot;, &quot;11:30 AM&quot;, &quot;Completed&quot;),&#10;            RecentVisitor(&quot;Emma Taylor&quot;, &quot;Business&quot;, &quot;10:45 AM&quot;, &quot;Completed&quot;)&#10;        )&#10;&#10;        recentVisitors.forEach { visitor -&gt;&#10;            RecentVisitorItem(visitor = visitor)&#10;            if (visitor != recentVisitors.last()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorItem(visitor: RecentVisitor) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        brush = Brush.radialGradient(&#10;                            colors = listOf(Primary, Secondary)&#10;                        ),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = visitor.name.first().toString(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = OnPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = visitor.name,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = visitor.purpose,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = visitor.time,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;                Spacer(modifier = Modifier.height(2.dp))&#10;                StatusChip(status = visitor.status)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusChip(status: String) {&#10;    val (backgroundColor, textColor) = when (status) {&#10;        &quot;Active&quot; -&gt; Success.copy(alpha = 0.1f) to Success&#10;        &quot;Completed&quot; -&gt; TextTertiary.copy(alpha = 0.1f) to TextTertiary&#10;        else -&gt; Info.copy(alpha = 0.1f) to Info&#10;    }&#10;&#10;    Surface(&#10;        color = backgroundColor,&#10;        shape = RoundedCornerShape(12.dp),&#10;        modifier = Modifier.clip(RoundedCornerShape(12.dp))&#10;    ) {&#10;        Text(&#10;            text = status,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            color = textColor,&#10;            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;// Data class for recent visitors&#10;data class RecentVisitor(&#10;    val name: String,&#10;    val purpose: String,&#10;    val time: String,&#10;    val status: String&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.input.nestedscroll.nestedScroll&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.ui.common.PermitelyProfileAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Host Dashboard Screen - Main landing page for hosts&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HostDashboardScreen(&#10;    onCreateVisitor: () -&gt; Unit = {},&#10;    onViewAllVisitors: () -&gt; Unit = {},&#10;    onViewNotifications: () -&gt; Unit = {},&#10;    onViewProfile: () -&gt; Unit = {},&#10;    onLogout: () -&gt; Unit = {},&#10;    viewModel: HostDashboardViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior()&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Handle refresh function&#10;    fun refresh() {&#10;        viewModel.refresh()&#10;    }&#10;&#10;    // Show error snackbar if there's an error&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            // You can show a snackbar here or handle error display&#10;            // For now, we'll just clear the error after showing it&#10;            kotlinx.coroutines.delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyProfileAppBar(&#10;                title = &quot;Dashboard&quot;,&#10;                subtitle = &quot;Manage your visitors and access&quot;,&#10;                userName = uiState.userName,&#10;                userRole = &quot;Host&quot;,&#10;                onProfileClick = onViewProfile,&#10;                onNotificationClick = onViewNotifications,&#10;                notificationCount = 3, // You can make this dynamic based on actual notifications&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(Background)&#10;                    .padding(paddingValues)&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Refresh button&#10;                    item {&#10;                        if (uiState.isLoading) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = Surface)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    horizontalArrangement = Arrangement.Center,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        modifier = Modifier.size(20.dp),&#10;                                        color = Primary,&#10;                                        strokeWidth = 2.dp&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = &quot;Loading dashboard...&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = TextSecondary&#10;                                    )&#10;                                }&#10;                            }&#10;                        } else {&#10;                            Button(&#10;                                onClick = { refresh() },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = Primary.copy(alpha = 0.1f),&#10;                                    contentColor = Primary&#10;                                )&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Refresh,&#10;                                    contentDescription = &quot;Refresh&quot;,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&quot;Refresh Dashboard&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Error display&#10;                    if (uiState.error != null) {&#10;                        item {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Error,&#10;                                        contentDescription = &quot;Error&quot;,&#10;                                        tint = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = uiState.error ?: &quot;Unknown error&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Welcome Header&#10;                    item {&#10;                        WelcomeHeader(&#10;                            hostName = uiState.userName,&#10;                            onViewProfile = onViewProfile,&#10;                            onLogout = onLogout&#10;                        )&#10;                    }&#10;&#10;                    // Stats Cards with real data&#10;                    item {&#10;                        StatsSection(uiState = uiState)&#10;                    }&#10;&#10;                    // Quick Actions&#10;                    item {&#10;                        QuickActionsSection(&#10;                            onCreateVisitor = onCreateVisitor,&#10;                            onViewAllVisitors = onViewAllVisitors,&#10;                            onViewNotifications = onViewNotifications&#10;                        )&#10;                    }&#10;&#10;                    // Recent Visitors&#10;                    item {&#10;                        RecentVisitorsSection()&#10;                    }&#10;&#10;                    // Bottom spacing for FAB&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(80.dp))&#10;                    }&#10;                }&#10;&#10;                // Floating Action Button&#10;                FloatingActionButton(&#10;                    onClick = onCreateVisitor,&#10;                    modifier = Modifier&#10;                        .align(Alignment.BottomEnd)&#10;                        .padding(16.dp),&#10;                    containerColor = Primary,&#10;                    contentColor = OnPrimary,&#10;                    elevation = FloatingActionButtonDefaults.elevation(&#10;                        defaultElevation = 8.dp,&#10;                        pressedElevation = 12.dp&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Create New Visitor&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun WelcomeHeader(&#10;    hostName: String,&#10;    onViewProfile: () -&gt; Unit,&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(20.dp),&#10;        onClick = onViewProfile&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;Welcome back!&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = TextSecondary&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = hostName,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Tap to view profile&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = Primary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;&#10;            Row {&#10;                IconButton(onClick = onViewProfile) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;                IconButton(onClick = onLogout) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ExitToApp,&#10;                        contentDescription = &quot;Logout&quot;,&#10;                        tint = TextSecondary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatsSection(uiState: DashboardStatsUiState) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Stats&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Total Visitors&quot;,&#10;                value = uiState.totalVisitors.toString(),&#10;                icon = Icons.Default.Group,&#10;                color = Primary,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Pending Requests&quot;,&#10;                value = uiState.pending.toString(),&#10;                icon = Icons.Default.Schedule,&#10;                color = Warning,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Approved&quot;,&#10;                value = uiState.approved.toString(),&#10;                icon = Icons.Default.CheckCircle,&#10;                color = Success,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Rejected&quot;,&#10;                value = uiState.rejected.toString(),&#10;                icon = Icons.Default.Cancel,&#10;                color = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatsCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        color = color.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary,&#10;                maxLines = 1&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionsSection(&#10;    onCreateVisitor: () -&gt; Unit,&#10;    onViewAllVisitors: () -&gt; Unit,&#10;    onViewNotifications: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Actions&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            QuickActionButton(&#10;                title = &quot;Create New Visitor&quot;,&#10;                subtitle = &quot;Register a new visitor entry&quot;,&#10;                icon = Icons.Default.PersonAdd,&#10;                color = Primary,&#10;                onClick = onCreateVisitor&#10;            )&#10;&#10;            QuickActionButton(&#10;                title = &quot;View All Visitors&quot;,&#10;                subtitle = &quot;Browse all visitor records&quot;,&#10;                icon = Icons.Default.List,&#10;                color = Secondary,&#10;                onClick = onViewAllVisitors&#10;            )&#10;&#10;            QuickActionButton(&#10;                title = &quot;View Notifications&quot;,&#10;                subtitle = &quot;Check recent alerts and updates&quot;,&#10;                icon = Icons.Default.Notifications,&#10;                color = Accent,&#10;                onClick = onViewNotifications&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionButton(&#10;    title: String,&#10;    subtitle: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        color = color.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = subtitle,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            Icon(&#10;                imageVector = Icons.Default.ChevronRight,&#10;                contentDescription = &quot;Navigate&quot;,&#10;                tint = TextTertiary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorsSection() {&#10;    Column {&#10;        Text(&#10;            text = &quot;Recent Visitors&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 12.dp)&#10;        )&#10;&#10;        // Static hardcoded recent visitors data&#10;        val recentVisitors = listOf(&#10;            RecentVisitor(&quot;Alice Johnson&quot;, &quot;Delivery&quot;, &quot;2:30 PM&quot;, &quot;Active&quot;),&#10;            RecentVisitor(&quot;Bob Wilson&quot;, &quot;Meeting&quot;, &quot;1:45 PM&quot;, &quot;Completed&quot;),&#10;            RecentVisitor(&quot;Carol Davis&quot;, &quot;Maintenance&quot;, &quot;12:15 PM&quot;, &quot;Active&quot;),&#10;            RecentVisitor(&quot;David Brown&quot;, &quot;Guest Visit&quot;, &quot;11:30 AM&quot;, &quot;Completed&quot;),&#10;            RecentVisitor(&quot;Emma Taylor&quot;, &quot;Business&quot;, &quot;10:45 AM&quot;, &quot;Completed&quot;)&#10;        )&#10;&#10;        recentVisitors.forEach { visitor -&gt;&#10;            RecentVisitorItem(visitor = visitor)&#10;            if (visitor != recentVisitors.last()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RecentVisitorItem(visitor: RecentVisitor) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        brush = Brush.radialGradient(&#10;                            colors = listOf(Primary, Secondary)&#10;                        ),&#10;                        shape = CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = visitor.name.first().toString(),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    color = OnPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = visitor.name,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = visitor.purpose,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = visitor.time,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;                Spacer(modifier = Modifier.height(2.dp))&#10;                StatusChip(status = visitor.status)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusChip(status: String) {&#10;    val (backgroundColor, textColor) = when (status) {&#10;        &quot;Active&quot; -&gt; Success.copy(alpha = 0.1f) to Success&#10;        &quot;Completed&quot; -&gt; TextTertiary.copy(alpha = 0.1f) to TextTertiary&#10;        else -&gt; Info.copy(alpha = 0.1f) to Info&#10;    }&#10;&#10;    Surface(&#10;        color = backgroundColor,&#10;        shape = RoundedCornerShape(12.dp),&#10;        modifier = Modifier.clip(RoundedCornerShape(12.dp))&#10;    ) {&#10;        Text(&#10;            text = status,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            color = textColor,&#10;            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;// Data class for recent visitors&#10;data class RecentVisitor(&#10;    val name: String,&#10;    val purpose: String,&#10;    val time: String,&#10;    val status: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/HostProfileScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Host Profile Screen - View/edit host profile&#10; * Shows profile information, account statistics, settings, and logout option&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HostProfileScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onLogout: () -&gt; Unit = {},&#10;    viewModel: HostProfileViewModel = hiltViewModel()&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val scope = rememberCoroutineScope()&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Profile state&#10;    var showLogoutDialog by remember { mutableStateOf(false) }&#10;&#10;    // Handle error display&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            // Auto-clear error after 3 seconds&#10;            kotlinx.coroutines.delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(scrollState)&#10;        ) {&#10;            // Top App Bar&#10;            ProfileTopBar(&#10;                onNavigateBack = onNavigateBack,&#10;                isEditing = uiState.isEditing,&#10;                isSaving = uiState.isSaving,&#10;                onEdit = { viewModel.startEditing() },&#10;                onSave = { viewModel.saveProfile() },&#10;                onCancel = { viewModel.cancelEditing() }&#10;            )&#10;&#10;            // Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Error display&#10;                if (uiState.error != null) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Error,&#10;                                contentDescription = &quot;Error&quot;,&#10;                                tint = MaterialTheme.colorScheme.error&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = uiState.error ?: &quot;Unknown error&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Loading indicator&#10;                if (uiState.isLoading) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = Surface)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalArrangement = Arrangement.Center,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(20.dp),&#10;                                color = Primary,&#10;                                strokeWidth = 2.dp&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = &quot;Loading profile...&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = TextSecondary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Profile Photo and Basic Info&#10;                ProfilePhotoCard(&#10;                    name = uiState.name,&#10;                    email = uiState.email,&#10;                    role = uiState.role,&#10;                    visitorsCount = uiState.visitorsCount,&#10;                    passesCount = uiState.passesCount,&#10;                    isEditing = uiState.isEditing&#10;                )&#10;&#10;                // Editable Profile Information&#10;                EditableProfileCard(&#10;                    name = uiState.name,&#10;                    email = uiState.email,&#10;                    phone = uiState.phoneNumber,&#10;                    createdAt = uiState.createdAt,&#10;                    isEditing = uiState.isEditing,&#10;                    onNameChange = { viewModel.updateName(it) },&#10;                    onEmailChange = { viewModel.updateEmail(it) },&#10;                    onPhoneChange = { viewModel.updatePhoneNumber(it) }&#10;                )&#10;&#10;                // Logout Section&#10;                LogoutCard(&#10;                    onLogout = { showLogoutDialog = true }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Logout Confirmation Dialog&#10;    if (showLogoutDialog) {&#10;        LogoutConfirmationDialog(&#10;            onConfirm = {&#10;                showLogoutDialog = false&#10;                onLogout()&#10;            },&#10;            onDismiss = { showLogoutDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun ProfileTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    isEditing: Boolean,&#10;    isSaving: Boolean,&#10;    onEdit: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    onCancel: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;My Profile&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;&#10;            // Edit/Save/Cancel buttons&#10;            if (isEditing) {&#10;                TextButton(&#10;                    onClick = onCancel,&#10;                    enabled = !isSaving&#10;                ) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Button(&#10;                    onClick = onSave,&#10;                    enabled = !isSaving,&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Primary)&#10;                ) {&#10;                    if (isSaving) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(16.dp),&#10;                            color = OnPrimary,&#10;                            strokeWidth = 2.dp&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;Saving...&quot;)&#10;                    } else {&#10;                        Text(&quot;Save&quot;)&#10;                    }&#10;                }&#10;            } else {&#10;                IconButton(onClick = onEdit) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit Profile&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfilePhotoCard(&#10;    name: String,&#10;    email: String,&#10;    role: String,&#10;    visitorsCount: Int,&#10;    passesCount: Int,&#10;    isEditing: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile Photo&#10;            Box {&#10;                Card(&#10;                    modifier = Modifier.size(120.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                    shape = CircleShape&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Profile Photo&quot;,&#10;                            tint = Primary,&#10;                            modifier = Modifier.size(60.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Edit photo button when editing&#10;                if (isEditing) {&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .size(36.dp)&#10;                            .align(Alignment.BottomEnd),&#10;                        colors = CardDefaults.cardColors(containerColor = Primary),&#10;                        shape = CircleShape,&#10;                        onClick = { /* TODO: Implement photo picker */ }&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.CameraAlt,&#10;                                contentDescription = &quot;Change Photo&quot;,&#10;                                tint = OnPrimary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Name and email (read-only here)&#10;            Text(&#10;                text = name,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = email,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Role badge&#10;            Card(&#10;                colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Text(&#10;                    text = role.uppercase(),&#10;                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    color = Primary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Visitors and Passes count&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                CountCard(&#10;                    label = &quot;Visitors&quot;,&#10;                    count = visitorsCount,&#10;                    isEditing = isEditing,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                CountCard(&#10;                    label = &quot;Passes&quot;,&#10;                    count = passesCount,&#10;                    isEditing = isEditing,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CountCard(&#10;    label: String,&#10;    count: Int,&#10;    isEditing: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Text(&#10;                text = count.toString(),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            // Editable field for count when editing&#10;            if (isEditing) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                PermitelyTextField(&#10;                    value = count.toString(),&#10;                    onValueChange = { /* TODO: Handle count change */ },&#10;                    label = &quot;Edit $label&quot;,&#10;                    keyboardType = KeyboardType.Number,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EditableProfileCard(&#10;    name: String,&#10;    email: String,&#10;    phone: String,&#10;    createdAt: String,&#10;    isEditing: Boolean,&#10;    onNameChange: (String) -&gt; Unit,&#10;    onEmailChange: (String) -&gt; Unit,&#10;    onPhoneChange: (String) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Personal Information&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;&#10;            if (isEditing) {&#10;                // Editable fields&#10;                PermitelyTextField(&#10;                    value = name,&#10;                    onValueChange = onNameChange,&#10;                    label = &quot;Full Name&quot;,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                PermitelyTextField(&#10;                    value = email,&#10;                    onValueChange = onEmailChange,&#10;                    label = &quot;Email Address&quot;,&#10;                    keyboardType = KeyboardType.Email,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                PermitelyTextField(&#10;                    value = phone,&#10;                    onValueChange = onPhoneChange,&#10;                    label = &quot;Phone Number&quot;,&#10;                    keyboardType = KeyboardType.Phone,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            } else {&#10;                // Read-only display&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Person,&#10;                    label = &quot;Full Name&quot;,&#10;                    value = name&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Email,&#10;                    label = &quot;Email Address&quot;,&#10;                    value = email&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Phone,&#10;                    label = &quot;Phone Number&quot;,&#10;                    value = phone&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.DateRange,&#10;                    label = &quot;Member Since&quot;,&#10;                    value = createdAt&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfileInfoRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = Secondary,&#10;            modifier = Modifier.size(20.dp)&#10;        )&#10;&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextPrimary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;@Composable&#10;private fun LogoutCard(&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Error.copy(alpha = 0.1f)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Button(&#10;            onClick = onLogout,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(4.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color.Transparent,&#10;                contentColor = Error&#10;            ),&#10;            elevation = null&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.ExitToApp,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;Logout&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LogoutConfirmationDialog(&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        icon = {&#10;            Icon(&#10;                imageVector = Icons.Default.ExitToApp,&#10;                contentDescription = null,&#10;                tint = Error&#10;            )&#10;        },&#10;        title = {&#10;            Text(&#10;                text = &quot;Logout&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Are you sure you want to logout? You\'ll need to sign in again to access your account.&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.buttonColors(containerColor = Error)&#10;            ) {&#10;                Text(&quot;Logout&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.common.PermitelyAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Host Profile Screen - View/edit host profile&#10; * Shows profile information, account statistics, settings, and logout option&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HostProfileScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onLogout: () -&gt; Unit = {},&#10;    viewModel: HostProfileViewModel = hiltViewModel()&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val scope = rememberCoroutineScope()&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // Profile state&#10;    var showLogoutDialog by remember { mutableStateOf(false) }&#10;&#10;    // Handle error display&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            // Auto-clear error after 3 seconds&#10;            kotlinx.coroutines.delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyAppBar(&#10;                title = &quot;My Profile&quot;,&#10;                onNavigationClick = onNavigateBack,&#10;                actions = {&#10;                    if (uiState.isEditing) {&#10;                        TextButton(&#10;                            onClick = { viewModel.cancelEditing() },&#10;                            enabled = !uiState.isSaving&#10;                        ) {&#10;                            Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = { viewModel.saveProfile() },&#10;                            enabled = !uiState.isSaving,&#10;                            colors = ButtonDefaults.buttonColors(containerColor = Primary)&#10;                        ) {&#10;                            if (uiState.isSaving) {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    color = OnPrimary,&#10;                                    strokeWidth = 2.dp&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&quot;Saving...&quot;)&#10;                            } else {&#10;                                Text(&quot;Save&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        IconButton(onClick = { viewModel.startEditing() }) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Edit,&#10;                                contentDescription = &quot;Edit Profile&quot;,&#10;                                tint = Primary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Background)&#10;                .padding(paddingValues)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(scrollState)&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Error display&#10;                if (uiState.error != null) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Error,&#10;                                contentDescription = &quot;Error&quot;,&#10;                                tint = MaterialTheme.colorScheme.error&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = uiState.error ?: &quot;Unknown error&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onErrorContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Loading indicator&#10;                if (uiState.isLoading) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = Surface)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalArrangement = Arrangement.Center,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(20.dp),&#10;                                color = Primary,&#10;                                strokeWidth = 2.dp&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = &quot;Loading profile...&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = TextSecondary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Profile Photo and Basic Info&#10;                ProfilePhotoCard(&#10;                    name = uiState.name,&#10;                    email = uiState.email,&#10;                    role = uiState.role,&#10;                    visitorsCount = uiState.visitorsCount,&#10;                    passesCount = uiState.passesCount,&#10;                    isEditing = uiState.isEditing&#10;                )&#10;&#10;                // Editable Profile Information&#10;                EditableProfileCard(&#10;                    name = uiState.name,&#10;                    email = uiState.email,&#10;                    phone = uiState.phoneNumber,&#10;                    createdAt = uiState.createdAt,&#10;                    isEditing = uiState.isEditing,&#10;                    onNameChange = { viewModel.updateName(it) },&#10;                    onEmailChange = { viewModel.updateEmail(it) },&#10;                    onPhoneChange = { viewModel.updatePhoneNumber(it) }&#10;                )&#10;&#10;                // Logout Section&#10;                LogoutCard(&#10;                    onLogout = { showLogoutDialog = true }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Logout Confirmation Dialog&#10;    if (showLogoutDialog) {&#10;        LogoutConfirmationDialog(&#10;            onConfirm = {&#10;                showLogoutDialog = false&#10;                onLogout()&#10;            },&#10;            onDismiss = { showLogoutDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun ProfileTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    isEditing: Boolean,&#10;    isSaving: Boolean,&#10;    onEdit: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    onCancel: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;My Profile&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;&#10;            // Edit/Save/Cancel buttons&#10;            if (isEditing) {&#10;                TextButton(&#10;                    onClick = onCancel,&#10;                    enabled = !isSaving&#10;                ) {&#10;                    Text(&quot;Cancel&quot;, color = TextSecondary)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                Button(&#10;                    onClick = onSave,&#10;                    enabled = !isSaving,&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Primary)&#10;                ) {&#10;                    if (isSaving) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(16.dp),&#10;                            color = OnPrimary,&#10;                            strokeWidth = 2.dp&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&quot;Saving...&quot;)&#10;                    } else {&#10;                        Text(&quot;Save&quot;)&#10;                    }&#10;                }&#10;            } else {&#10;                IconButton(onClick = onEdit) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit Profile&quot;,&#10;                        tint = Primary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfilePhotoCard(&#10;    name: String,&#10;    email: String,&#10;    role: String,&#10;    visitorsCount: Int,&#10;    passesCount: Int,&#10;    isEditing: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Profile Photo&#10;            Box {&#10;                Card(&#10;                    modifier = Modifier.size(120.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                    shape = CircleShape&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Profile Photo&quot;,&#10;                            tint = Primary,&#10;                            modifier = Modifier.size(60.dp)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Edit photo button when editing&#10;                if (isEditing) {&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .size(36.dp)&#10;                            .align(Alignment.BottomEnd),&#10;                        colors = CardDefaults.cardColors(containerColor = Primary),&#10;                        shape = CircleShape,&#10;                        onClick = { /* TODO: Implement photo picker */ }&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.CameraAlt,&#10;                                contentDescription = &quot;Change Photo&quot;,&#10;                                tint = OnPrimary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Name and email (read-only here)&#10;            Text(&#10;                text = name,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = email,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Role badge&#10;            Card(&#10;                colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Text(&#10;                    text = role.uppercase(),&#10;                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    color = Primary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Visitors and Passes count&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                CountCard(&#10;                    label = &quot;Visitors&quot;,&#10;                    count = visitorsCount,&#10;                    isEditing = isEditing,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                CountCard(&#10;                    label = &quot;Passes&quot;,&#10;                    count = passesCount,&#10;                    isEditing = isEditing,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CountCard(&#10;    label: String,&#10;    count: Int,&#10;    isEditing: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;&#10;            Text(&#10;                text = count.toString(),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            // Editable field for count when editing&#10;            if (isEditing) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                PermitelyTextField(&#10;                    value = count.toString(),&#10;                    onValueChange = { /* TODO: Handle count change */ },&#10;                    label = &quot;Edit $label&quot;,&#10;                    keyboardType = KeyboardType.Number,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EditableProfileCard(&#10;    name: String,&#10;    email: String,&#10;    phone: String,&#10;    createdAt: String,&#10;    isEditing: Boolean,&#10;    onNameChange: (String) -&gt; Unit,&#10;    onEmailChange: (String) -&gt; Unit,&#10;    onPhoneChange: (String) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Personal Information&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = TextPrimary,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;&#10;            if (isEditing) {&#10;                // Editable fields&#10;                PermitelyTextField(&#10;                    value = name,&#10;                    onValueChange = onNameChange,&#10;                    label = &quot;Full Name&quot;,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                PermitelyTextField(&#10;                    value = email,&#10;                    onValueChange = onEmailChange,&#10;                    label = &quot;Email Address&quot;,&#10;                    keyboardType = KeyboardType.Email,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                PermitelyTextField(&#10;                    value = phone,&#10;                    onValueChange = onPhoneChange,&#10;                    label = &quot;Phone Number&quot;,&#10;                    keyboardType = KeyboardType.Phone,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            } else {&#10;                // Read-only display&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Person,&#10;                    label = &quot;Full Name&quot;,&#10;                    value = name&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Email,&#10;                    label = &quot;Email Address&quot;,&#10;                    value = email&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.Phone,&#10;                    label = &quot;Phone Number&quot;,&#10;                    value = phone&#10;                )&#10;&#10;                ProfileInfoRow(&#10;                    icon = Icons.Default.DateRange,&#10;                    label = &quot;Member Since&quot;,&#10;                    value = createdAt&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProfileInfoRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = Secondary,&#10;            modifier = Modifier.size(20.dp)&#10;        )&#10;&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = TextSecondary&#10;            )&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextPrimary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;@Composable&#10;private fun LogoutCard(&#10;    onLogout: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Error.copy(alpha = 0.1f)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Button(&#10;            onClick = onLogout,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(4.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color.Transparent,&#10;                contentColor = Error&#10;            ),&#10;            elevation = null&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.ExitToApp,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&#10;                text = &quot;Logout&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LogoutConfirmationDialog(&#10;    onConfirm: () -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        icon = {&#10;            Icon(&#10;                imageVector = Icons.Default.ExitToApp,&#10;                contentDescription = null,&#10;                tint = Error&#10;            )&#10;        },&#10;        title = {&#10;            Text(&#10;                text = &quot;Logout&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        },&#10;        text = {&#10;            Text(&#10;                text = &quot;Are you sure you want to logout? You\'ll need to sign in again to access your account.&quot;,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = onConfirm,&#10;                colors = ButtonDefaults.buttonColors(containerColor = Error)&#10;            ) {&#10;                Text(&quot;Logout&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/NotificationsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/NotificationsScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;/**&#10; * Notifications Screen - View in-app notifications&#10; * Shows notification list with read/unread status and mark all as read functionality&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NotificationsScreen(&#10;    onNavigateBack: () -&gt; Unit = {}&#10;) {&#10;    var notifications by remember { mutableStateOf(getDummyNotifications()) }&#10;    var isMarkingAllRead by remember { mutableStateOf(false) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Count unread notifications&#10;    val unreadCount = notifications.count { !it.isRead }&#10;&#10;    // Mark all as read function&#10;    fun markAllAsRead() {&#10;        scope.launch {&#10;            isMarkingAllRead = true&#10;            delay(1000) // Simulate API call&#10;            notifications = notifications.map { it.copy(isRead = true) }&#10;            isMarkingAllRead = false&#10;        }&#10;    }&#10;&#10;    // Mark single notification as read&#10;    fun markAsRead(notificationId: String) {&#10;        notifications = notifications.map { notification -&gt;&#10;            if (notification.id == notificationId) {&#10;                notification.copy(isRead = true)&#10;            } else notification&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top App Bar&#10;            NotificationsTopBar(&#10;                onNavigateBack = onNavigateBack,&#10;                unreadCount = unreadCount&#10;            )&#10;&#10;            // Content&#10;            if (notifications.isEmpty()) {&#10;                // Empty state&#10;                EmptyNotificationsState()&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    // Mark all as read button (only show if there are unread notifications)&#10;                    if (unreadCount &gt; 0) {&#10;                        item {&#10;                            MarkAllAsReadButton(&#10;                                isLoading = isMarkingAllRead,&#10;                                unreadCount = unreadCount,&#10;                                onClick = { markAllAsRead() }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Notifications list&#10;                    items(notifications) { notification -&gt;&#10;                        NotificationCard(&#10;                            notification = notification,&#10;                            onMarkAsRead = { markAsRead(notification.id) }&#10;                        )&#10;                    }&#10;&#10;                    // Bottom spacing&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun NotificationsTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    unreadCount: Int&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;Notifications&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = if (unreadCount &gt; 0) &quot;$unreadCount unread notifications&quot; else &quot;All caught up!&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = if (unreadCount &gt; 0) Primary else TextSecondary&#10;                )&#10;            }&#10;&#10;            // Notification icon with badge&#10;            if (unreadCount &gt; 0) {&#10;                Box {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Notifications,&#10;                        contentDescription = &quot;Notifications&quot;,&#10;                        tint = Primary,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;&#10;                    // Unread badge&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .size(16.dp)&#10;                            .offset(x = 8.dp, y = (-8).dp),&#10;                        colors = CardDefaults.cardColors(containerColor = Error),&#10;                        shape = CircleShape&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(&#10;                                text = if (unreadCount &gt; 9) &quot;9+&quot; else unreadCount.toString(),&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = Color.White,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MarkAllAsReadButton(&#10;    isLoading: Boolean,&#10;    unreadCount: Int,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Button(&#10;            onClick = onClick,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(4.dp),&#10;            enabled = !isLoading,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color.Transparent,&#10;                contentColor = Primary&#10;            ),&#10;            elevation = null&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.size(16.dp),&#10;                    color = Primary,&#10;                    strokeWidth = 2.dp&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Marking as read...&quot;)&#10;            } else {&#10;                Icon(&#10;                    imageVector = Icons.Default.DoneAll,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(18.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Mark all $unreadCount as read&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NotificationCard(&#10;    notification: Notification,&#10;    onMarkAsRead: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (notification.isRead) Surface else Primary.copy(alpha = 0.05f)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = if (notification.isRead) 2.dp else 4.dp),&#10;        shape = RoundedCornerShape(12.dp),&#10;        onClick = if (!notification.isRead) onMarkAsRead else { {} }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Notification icon&#10;            Card(&#10;                modifier = Modifier.size(48.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = getNotificationIconColor(notification.type).copy(alpha = 0.1f)&#10;                ),&#10;                shape = CircleShape&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = getNotificationIcon(notification.type),&#10;                        contentDescription = null,&#10;                        tint = getNotificationIconColor(notification.type),&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Notification content&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                // Header with visitor name and timestamp&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.Top&#10;                ) {&#10;                    Text(&#10;                        text = notification.visitorName,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        color = TextPrimary,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        modifier = Modifier.weight(1f),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = formatTimestamp(notification.timestamp),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = TextSecondary&#10;                    )&#10;                }&#10;&#10;                // Notification message&#10;                Text(&#10;                    text = notification.message,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextPrimary,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                // Notification type badge&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = getNotificationIconColor(notification.type).copy(alpha = 0.1f)&#10;                    ),&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = notification.type.displayName,&#10;                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = getNotificationIconColor(notification.type),&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Unread indicator&#10;            if (!notification.isRead) {&#10;                Card(&#10;                    modifier = Modifier.size(8.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Primary),&#10;                    shape = CircleShape&#10;                ) {}&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyNotificationsState() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Card(&#10;            modifier = Modifier.size(120.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Secondary.copy(alpha = 0.1f)),&#10;            shape = CircleShape&#10;        ) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.NotificationsNone,&#10;                    contentDescription = null,&#10;                    tint = Secondary,&#10;                    modifier = Modifier.size(60.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Text(&#10;            text = &quot;No Notifications&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;You're all caught up! New notifications will appear here.&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = TextSecondary,&#10;            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;// Helper functions&#10;private fun getNotificationIcon(type: NotificationType): ImageVector {&#10;    return when (type) {&#10;        NotificationType.VISITOR_REQUEST -&gt; Icons.Default.PersonAdd&#10;        NotificationType.VISITOR_APPROVED -&gt; Icons.Default.CheckCircle&#10;        NotificationType.VISITOR_REJECTED -&gt; Icons.Default.Cancel&#10;        NotificationType.VISITOR_ARRIVED -&gt; Icons.Default.Login&#10;        NotificationType.VISITOR_DEPARTED -&gt; Icons.Default.Logout&#10;        NotificationType.PASS_GENERATED -&gt; Icons.Default.QrCode&#10;        NotificationType.PASS_EXPIRED -&gt; Icons.Default.Schedule&#10;        NotificationType.SYSTEM -&gt; Icons.Default.Info&#10;    }&#10;}&#10;&#10;private fun getNotificationIconColor(type: NotificationType): Color {&#10;    return when (type) {&#10;        NotificationType.VISITOR_REQUEST -&gt; Secondary&#10;        NotificationType.VISITOR_APPROVED -&gt; Success&#10;        NotificationType.VISITOR_REJECTED -&gt; Error&#10;        NotificationType.VISITOR_ARRIVED -&gt; Primary&#10;        NotificationType.VISITOR_DEPARTED -&gt; Secondary&#10;        NotificationType.PASS_GENERATED -&gt; Primary&#10;        NotificationType.PASS_EXPIRED -&gt; Error&#10;        NotificationType.SYSTEM -&gt; Secondary&#10;    }&#10;}&#10;&#10;private fun formatTimestamp(timestamp: String): String {&#10;    return try {&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val outputFormat = SimpleDateFormat(&quot;MMM dd, HH:mm&quot;, Locale.getDefault())&#10;        val date = inputFormat.parse(timestamp)&#10;        outputFormat.format(date ?: Date())&#10;    } catch (e: Exception) {&#10;        timestamp&#10;    }&#10;}&#10;&#10;// Data classes&#10;data class Notification(&#10;    val id: String,&#10;    val message: String,&#10;    val timestamp: String,&#10;    val visitorName: String,&#10;    val isRead: Boolean,&#10;    val type: NotificationType&#10;)&#10;&#10;enum class NotificationType(val displayName: String) {&#10;    VISITOR_REQUEST(&quot;New Request&quot;),&#10;    VISITOR_APPROVED(&quot;Approved&quot;),&#10;    VISITOR_REJECTED(&quot;Rejected&quot;),&#10;    VISITOR_ARRIVED(&quot;Arrived&quot;),&#10;    VISITOR_DEPARTED(&quot;Departed&quot;),&#10;    PASS_GENERATED(&quot;Pass Generated&quot;),&#10;    PASS_EXPIRED(&quot;Pass Expired&quot;),&#10;    SYSTEM(&quot;System&quot;)&#10;}&#10;&#10;// Dummy data function&#10;private fun getDummyNotifications(): List&lt;Notification&gt; {&#10;    return listOf(&#10;        Notification(&#10;            id = &quot;1&quot;,&#10;            message = &quot;New visitor request submitted for tomorrow's meeting&quot;,&#10;            timestamp = &quot;2024-12-15 14:30:00&quot;,&#10;            visitorName = &quot;Alice Johnson&quot;,&#10;            isRead = false,&#10;            type = NotificationType.VISITOR_REQUEST&#10;        ),&#10;        Notification(&#10;            id = &quot;2&quot;,&#10;            message = &quot;Visitor request has been approved and pass generated&quot;,&#10;            timestamp = &quot;2024-12-15 10:15:00&quot;,&#10;            visitorName = &quot;Bob Wilson&quot;,&#10;            isRead = false,&#10;            type = NotificationType.VISITOR_APPROVED&#10;        ),&#10;        Notification(&#10;            id = &quot;3&quot;,&#10;            message = &quot;Visitor has arrived at the main entrance&quot;,&#10;            timestamp = &quot;2024-12-15 09:45:00&quot;,&#10;            visitorName = &quot;Carol Davis&quot;,&#10;            isRead = true,&#10;            type = NotificationType.VISITOR_ARRIVED&#10;        ),&#10;        Notification(&#10;            id = &quot;4&quot;,&#10;            message = &quot;Digital pass has been generated successfully&quot;,&#10;            timestamp = &quot;2024-12-14 16:20:00&quot;,&#10;            visitorName = &quot;David Miller&quot;,&#10;            isRead = true,&#10;            type = NotificationType.PASS_GENERATED&#10;        ),&#10;        Notification(&#10;            id = &quot;5&quot;,&#10;            message = &quot;Visitor request was rejected due to incomplete information&quot;,&#10;            timestamp = &quot;2024-12-14 14:10:00&quot;,&#10;            visitorName = &quot;Eva Brown&quot;,&#10;            isRead = true,&#10;            type = NotificationType.VISITOR_REJECTED&#10;        ),&#10;        Notification(&#10;            id = &quot;6&quot;,&#10;            message = &quot;Visitor has departed from the premises&quot;,&#10;            timestamp = &quot;2024-12-14 12:30:00&quot;,&#10;            visitorName = &quot;Frank Garcia&quot;,&#10;            isRead = true,&#10;            type = NotificationType.VISITOR_DEPARTED&#10;        ),&#10;        Notification(&#10;            id = &quot;7&quot;,&#10;            message = &quot;Digital pass has expired. Please generate a new one if needed&quot;,&#10;            timestamp = &quot;2024-12-13 18:00:00&quot;,&#10;            visitorName = &quot;Grace Lee&quot;,&#10;            isRead = true,&#10;            type = NotificationType.PASS_EXPIRED&#10;        ),&#10;        Notification(&#10;            id = &quot;8&quot;,&#10;            message = &quot;System maintenance scheduled for tonight from 2 AM to 4 AM&quot;,&#10;            timestamp = &quot;2024-12-13 15:45:00&quot;,&#10;            visitorName = &quot;System Admin&quot;,&#10;            isRead = true,&#10;            type = NotificationType.SYSTEM&#10;        )&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#13;&#10;&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.foundation.shape.CircleShape&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.draw.clip&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.graphics.vector.ImageVector&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.text.style.TextOverflow&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import com.example.permitely.ui.common.PermitelyAppBar&#13;&#10;import com.example.permitely.ui.theme.*&#13;&#10;import kotlinx.coroutines.delay&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import java.text.SimpleDateFormat&#13;&#10;import java.util.*&#13;&#10;&#13;&#10;/**&#13;&#10; * Notifications Screen - View in-app notifications&#13;&#10; * Shows notification list with read/unread status and mark all as read functionality&#13;&#10; */&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun NotificationsScreen(&#13;&#10;    onNavigateBack: () -&gt; Unit = {}&#13;&#10;) {&#13;&#10;    var notifications by remember { mutableStateOf(getDummyNotifications()) }&#13;&#10;    var isMarkingAllRead by remember { mutableStateOf(false) }&#13;&#10;    val scope = rememberCoroutineScope()&#13;&#10;&#13;&#10;    // Count unread notifications&#13;&#10;    val unreadCount = notifications.count { !it.isRead }&#13;&#10;&#13;&#10;    // Mark all as read function&#13;&#10;    fun markAllAsRead() {&#13;&#10;        scope.launch {&#13;&#10;            isMarkingAllRead = true&#13;&#10;            delay(1000) // Simulate API call&#13;&#10;            notifications = notifications.map { it.copy(isRead = true) }&#13;&#10;            isMarkingAllRead = false&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Mark single notification as read&#13;&#10;    fun markAsRead(notificationId: String) {&#13;&#10;        notifications = notifications.map { notification -&gt;&#13;&#10;            if (notification.id == notificationId) {&#13;&#10;                notification.copy(isRead = true)&#13;&#10;            } else notification&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    Box(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .background(Background)&#13;&#10;    ) {&#13;&#10;        Column(&#13;&#10;            modifier = Modifier.fillMaxSize()&#13;&#10;        ) {&#13;&#10;            // Top App Bar&#13;&#10;            NotificationsTopBar(&#13;&#10;                onNavigateBack = onNavigateBack,&#13;&#10;                unreadCount = unreadCount&#13;&#10;            )&#13;&#10;&#13;&#10;            // Content&#13;&#10;            if (notifications.isEmpty()) {&#13;&#10;                // Empty state&#13;&#10;                EmptyNotificationsState()&#13;&#10;            } else {&#13;&#10;                LazyColumn(&#13;&#10;                    modifier = Modifier.fillMaxSize(),&#13;&#10;                    contentPadding = PaddingValues(16.dp),&#13;&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#13;&#10;                ) {&#13;&#10;                    // Mark all as read button (only show if there are unread notifications)&#13;&#10;                    if (unreadCount &gt; 0) {&#13;&#10;                        item {&#13;&#10;                            MarkAllAsReadButton(&#13;&#10;                                isLoading = isMarkingAllRead,&#13;&#10;                                unreadCount = unreadCount,&#13;&#10;                                onClick = { markAllAsRead() }&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Notifications list&#13;&#10;                    items(notifications) { notification -&gt;&#13;&#10;                        NotificationCard(&#13;&#10;                            notification = notification,&#13;&#10;                            onMarkAsRead = { markAsRead(notification.id) }&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Bottom spacing&#13;&#10;                    item {&#13;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;private fun NotificationsTopBar(&#13;&#10;    onNavigateBack: () -&gt; Unit,&#13;&#10;    unreadCount: Int&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = Modifier.fillMaxWidth(),&#13;&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#13;&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#13;&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#13;&#10;    ) {&#13;&#10;        Row(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .padding(16.dp),&#13;&#10;            verticalAlignment = Alignment.CenterVertically&#13;&#10;        ) {&#13;&#10;            IconButton(onClick = onNavigateBack) {&#13;&#10;                Icon(&#13;&#10;                    imageVector = Icons.Default.ArrowBack,&#13;&#10;                    contentDescription = &quot;Back&quot;,&#13;&#10;                    tint = Primary&#13;&#10;                )&#13;&#10;            }&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.width(8.dp))&#13;&#10;&#13;&#10;            Column(modifier = Modifier.weight(1f)) {&#13;&#10;                Text(&#13;&#10;                    text = &quot;Notifications&quot;,&#13;&#10;                    style = MaterialTheme.typography.headlineSmall,&#13;&#10;                    color = TextPrimary,&#13;&#10;                    fontWeight = FontWeight.Bold&#13;&#10;                )&#13;&#10;                Text(&#13;&#10;                    text = if (unreadCount &gt; 0) &quot;$unreadCount unread notifications&quot; else &quot;All caught up!&quot;,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                    color = if (unreadCount &gt; 0) Primary else TextSecondary&#13;&#10;                )&#13;&#10;            }&#13;&#10;&#13;&#10;            // Notification icon with badge&#13;&#10;            if (unreadCount &gt; 0) {&#13;&#10;                Box {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.Notifications,&#13;&#10;                        contentDescription = &quot;Notifications&quot;,&#13;&#10;                        tint = Primary,&#13;&#10;                        modifier = Modifier.size(24.dp)&#13;&#10;                    )&#13;&#10;&#13;&#10;                    // Unread badge&#13;&#10;                    Card(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .size(16.dp)&#13;&#10;                            .offset(x = 8.dp, y = (-8).dp),&#13;&#10;                        colors = CardDefaults.cardColors(containerColor = Error),&#13;&#10;                        shape = CircleShape&#13;&#10;                    ) {&#13;&#10;                        Box(&#13;&#10;                            modifier = Modifier.fillMaxSize(),&#13;&#10;                            contentAlignment = Alignment.Center&#13;&#10;                        ) {&#13;&#10;                            Text(&#13;&#10;                                text = if (unreadCount &gt; 9) &quot;9+&quot; else unreadCount.toString(),&#13;&#10;                                style = MaterialTheme.typography.labelSmall,&#13;&#10;                                color = Color.White,&#13;&#10;                                fontWeight = FontWeight.Bold&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;private fun MarkAllAsReadButton(&#13;&#10;    isLoading: Boolean,&#13;&#10;    unreadCount: Int,&#13;&#10;    onClick: () -&gt; Unit&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = Modifier.fillMaxWidth(),&#13;&#10;        colors = CardDefaults.cardColors(containerColor = Primary.copy(alpha = 0.1f)),&#13;&#10;        shape = RoundedCornerShape(12.dp)&#13;&#10;    ) {&#13;&#10;        Button(&#13;&#10;            onClick = onClick,&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .padding(4.dp),&#13;&#10;            enabled = !isLoading,&#13;&#10;            colors = ButtonDefaults.buttonColors(&#13;&#10;                containerColor = Color.Transparent,&#13;&#10;                contentColor = Primary&#13;&#10;            ),&#13;&#10;            elevation = null&#13;&#10;        ) {&#13;&#10;            if (isLoading) {&#13;&#10;                CircularProgressIndicator(&#13;&#10;                    modifier = Modifier.size(16.dp),&#13;&#10;                    color = Primary,&#13;&#10;                    strokeWidth = 2.dp&#13;&#10;                )&#13;&#10;                Spacer(modifier = Modifier.width(8.dp))&#13;&#10;                Text(&quot;Marking as read...&quot;)&#13;&#10;            } else {&#13;&#10;                Icon(&#13;&#10;                    imageVector = Icons.Default.DoneAll,&#13;&#10;                    contentDescription = null,&#13;&#10;                    modifier = Modifier.size(18.dp)&#13;&#10;                )&#13;&#10;                Spacer(modifier = Modifier.width(8.dp))&#13;&#10;                Text(&quot;Mark all $unreadCount as read&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;private fun NotificationCard(&#13;&#10;    notification: Notification,&#13;&#10;    onMarkAsRead: () -&gt; Unit&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = Modifier.fillMaxWidth(),&#13;&#10;        colors = CardDefaults.cardColors(&#13;&#10;            containerColor = if (notification.isRead) Surface else Primary.copy(alpha = 0.05f)&#13;&#10;        ),&#13;&#10;        elevation = CardDefaults.cardElevation(defaultElevation = if (notification.isRead) 2.dp else 4.dp),&#13;&#10;        shape = RoundedCornerShape(12.dp),&#13;&#10;        onClick = if (!notification.isRead) onMarkAsRead else { {} }&#13;&#10;    ) {&#13;&#10;        Row(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .padding(16.dp),&#13;&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#13;&#10;        ) {&#13;&#10;            // Notification icon&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.size(48.dp),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = getNotificationIconColor(notification.type).copy(alpha = 0.1f)&#13;&#10;                ),&#13;&#10;                shape = CircleShape&#13;&#10;            ) {&#13;&#10;                Box(&#13;&#10;                    modifier = Modifier.fillMaxSize(),&#13;&#10;                    contentAlignment = Alignment.Center&#13;&#10;                ) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = getNotificationIcon(notification.type),&#13;&#10;                        contentDescription = null,&#13;&#10;                        tint = getNotificationIconColor(notification.type),&#13;&#10;                        modifier = Modifier.size(24.dp)&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Notification content&#13;&#10;            Column(&#13;&#10;                modifier = Modifier.weight(1f),&#13;&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#13;&#10;            ) {&#13;&#10;                // Header with visitor name and timestamp&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                    verticalAlignment = Alignment.Top&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = notification.visitorName,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        color = TextPrimary,&#13;&#10;                        fontWeight = FontWeight.SemiBold,&#13;&#10;                        modifier = Modifier.weight(1f),&#13;&#10;                        maxLines = 1,&#13;&#10;                        overflow = TextOverflow.Ellipsis&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Text(&#13;&#10;                        text = formatTimestamp(notification.timestamp),&#13;&#10;                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                        color = TextSecondary&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                // Notification message&#13;&#10;                Text(&#13;&#10;                    text = notification.message,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                    color = TextPrimary,&#13;&#10;                    maxLines = 2,&#13;&#10;                    overflow = TextOverflow.Ellipsis&#13;&#10;                )&#13;&#10;&#13;&#10;                // Notification type badge&#13;&#10;                Card(&#13;&#10;                    colors = CardDefaults.cardColors(&#13;&#10;                        containerColor = getNotificationIconColor(notification.type).copy(alpha = 0.1f)&#13;&#10;                    ),&#13;&#10;                    shape = RoundedCornerShape(8.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = notification.type.displayName,&#13;&#10;                        modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),&#13;&#10;                        style = MaterialTheme.typography.labelSmall,&#13;&#10;                        color = getNotificationIconColor(notification.type),&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Unread indicator&#13;&#10;            if (!notification.isRead) {&#13;&#10;                Card(&#13;&#10;                    modifier = Modifier.size(8.dp),&#13;&#10;                    colors = CardDefaults.cardColors(containerColor = Primary),&#13;&#10;                    shape = CircleShape&#13;&#10;                ) {}&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;private fun EmptyNotificationsState() {&#13;&#10;    Column(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(32.dp),&#13;&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;        verticalArrangement = Arrangement.Center&#13;&#10;    ) {&#13;&#10;        Card(&#13;&#10;            modifier = Modifier.size(120.dp),&#13;&#10;            colors = CardDefaults.cardColors(containerColor = Secondary.copy(alpha = 0.1f)),&#13;&#10;            shape = CircleShape&#13;&#10;        ) {&#13;&#10;            Box(&#13;&#10;                modifier = Modifier.fillMaxSize(),&#13;&#10;                contentAlignment = Alignment.Center&#13;&#10;            ) {&#13;&#10;                Icon(&#13;&#10;                    imageVector = Icons.Default.NotificationsNone,&#13;&#10;                    contentDescription = null,&#13;&#10;                    tint = Secondary,&#13;&#10;                    modifier = Modifier.size(60.dp)&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        Spacer(modifier = Modifier.height(24.dp))&#13;&#10;&#13;&#10;        Text(&#13;&#10;            text = &quot;No Notifications&quot;,&#13;&#10;            style = MaterialTheme.typography.headlineSmall,&#13;&#10;            color = TextPrimary,&#13;&#10;            fontWeight = FontWeight.Bold&#13;&#10;        )&#13;&#10;&#13;&#10;        Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;        Text(&#13;&#10;            text = &quot;You're all caught up! New notifications will appear here.&quot;,&#13;&#10;            style = MaterialTheme.typography.bodyLarge,&#13;&#10;            color = TextSecondary,&#13;&#10;            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;// Helper functions&#13;&#10;private fun getNotificationIcon(type: NotificationType): ImageVector {&#13;&#10;    return when (type) {&#13;&#10;        NotificationType.VISITOR_REQUEST -&gt; Icons.Default.PersonAdd&#13;&#10;        NotificationType.VISITOR_APPROVED -&gt; Icons.Default.CheckCircle&#13;&#10;        NotificationType.VISITOR_REJECTED -&gt; Icons.Default.Cancel&#13;&#10;        NotificationType.VISITOR_ARRIVED -&gt; Icons.Default.Login&#13;&#10;        NotificationType.VISITOR_DEPARTED -&gt; Icons.Default.Logout&#13;&#10;        NotificationType.PASS_GENERATED -&gt; Icons.Default.QrCode&#13;&#10;        NotificationType.PASS_EXPIRED -&gt; Icons.Default.Schedule&#13;&#10;        NotificationType.SYSTEM -&gt; Icons.Default.Info&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;private fun getNotificationIconColor(type: NotificationType): Color {&#13;&#10;    return when (type) {&#13;&#10;        NotificationType.VISITOR_REQUEST -&gt; Secondary&#13;&#10;        NotificationType.VISITOR_APPROVED -&gt; Success&#13;&#10;        NotificationType.VISITOR_REJECTED -&gt; Error&#13;&#10;        NotificationType.VISITOR_ARRIVED -&gt; Primary&#13;&#10;        NotificationType.VISITOR_DEPARTED -&gt; Secondary&#13;&#10;        NotificationType.PASS_GENERATED -&gt; Primary&#13;&#10;        NotificationType.PASS_EXPIRED -&gt; Error&#13;&#10;        NotificationType.SYSTEM -&gt; Secondary&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;private fun formatTimestamp(timestamp: String): String {&#13;&#10;    return try {&#13;&#10;        val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#13;&#10;        val outputFormat = SimpleDateFormat(&quot;MMM dd, HH:mm&quot;, Locale.getDefault())&#13;&#10;        val date = inputFormat.parse(timestamp)&#13;&#10;        outputFormat.format(date ?: Date())&#13;&#10;    } catch (e: Exception) {&#13;&#10;        timestamp&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;// Data classes&#13;&#10;data class Notification(&#13;&#10;    val id: String,&#13;&#10;    val message: String,&#13;&#10;    val timestamp: String,&#13;&#10;    val visitorName: String,&#13;&#10;    val isRead: Boolean,&#13;&#10;    val type: NotificationType&#13;&#10;)&#13;&#10;&#13;&#10;enum class NotificationType(val displayName: String) {&#13;&#10;    VISITOR_REQUEST(&quot;New Request&quot;),&#13;&#10;    VISITOR_APPROVED(&quot;Approved&quot;),&#13;&#10;    VISITOR_REJECTED(&quot;Rejected&quot;),&#13;&#10;    VISITOR_ARRIVED(&quot;Arrived&quot;),&#13;&#10;    VISITOR_DEPARTED(&quot;Departed&quot;),&#13;&#10;    PASS_GENERATED(&quot;Pass Generated&quot;),&#13;&#10;    PASS_EXPIRED(&quot;Pass Expired&quot;),&#13;&#10;    SYSTEM(&quot;System&quot;)&#13;&#10;}&#13;&#10;&#13;&#10;// Dummy data function&#13;&#10;private fun getDummyNotifications(): List&lt;Notification&gt; {&#13;&#10;    return listOf(&#13;&#10;        Notification(&#13;&#10;            id = &quot;1&quot;,&#13;&#10;            message = &quot;New visitor request submitted for tomorrow's meeting&quot;,&#13;&#10;            timestamp = &quot;2024-12-15 14:30:00&quot;,&#13;&#10;            visitorName = &quot;Alice Johnson&quot;,&#13;&#10;            isRead = false,&#13;&#10;            type = NotificationType.VISITOR_REQUEST&#13;&#10;        ),&#13;&#10;        Notification(&#13;&#10;            id = &quot;2&quot;,&#13;&#10;            message = &quot;Visitor request has been approved and pass generated&quot;,&#13;&#10;            timestamp = &quot;2024-12-15 10:15:00&quot;,&#13;&#10;            visitorName = &quot;Bob Wilson&quot;,&#13;&#10;            isRead = false,&#13;&#10;            type = NotificationType.VISITOR_APPROVED&#13;&#10;        ),&#13;&#10;        Notification(&#13;&#10;            id = &quot;3&quot;,&#13;&#10;            message = &quot;Visitor has arrived at the main entrance&quot;,&#13;&#10;            timestamp = &quot;2024-12-15 09:45:00&quot;,&#13;&#10;            visitorName = &quot;Carol Davis&quot;,&#13;&#10;            isRead = true,&#13;&#10;            type = NotificationType.VISITOR_ARRIVED&#13;&#10;        ),&#13;&#10;        Notification(&#13;&#10;            id = &quot;4&quot;,&#13;&#10;            message = &quot;Digital pass has been generated successfully&quot;,&#13;&#10;            timestamp = &quot;2024-12-14 16:20:00&quot;,&#13;&#10;            visitorName = &quot;David Miller&quot;,&#13;&#10;            isRead = true,&#13;&#10;            type = NotificationType.PASS_GENERATED&#13;&#10;        ),&#13;&#10;        Notification(&#13;&#10;            id = &quot;5&quot;,&#13;&#10;            message = &quot;Visitor request was rejected due to incomplete information&quot;,&#13;&#10;            timestamp = &quot;2024-12-14 14:10:00&quot;,&#13;&#10;            visitorName = &quot;Eva Brown&quot;,&#13;&#10;            isRead = true,&#13;&#10;            type = NotificationType.VISITOR_REJECTED&#13;&#10;        ),&#13;&#10;        Notification(&#13;&#10;            id = &quot;6&quot;,&#13;&#10;            message = &quot;Visitor has departed from the premises&quot;,&#13;&#10;            timestamp = &quot;2024-12-14 12:30:00&quot;,&#13;&#10;            visitorName = &quot;Frank Garcia&quot;,&#13;&#10;            isRead = true,&#13;&#10;            type = NotificationType.VISITOR_DEPARTED&#13;&#10;        ),&#13;&#10;        Notification(&#13;&#10;            id = &quot;7&quot;,&#13;&#10;            message = &quot;Digital pass has expired. Please generate a new one if needed&quot;,&#13;&#10;            timestamp = &quot;2024-12-13 18:00:00&quot;,&#13;&#10;            visitorName = &quot;Grace Lee&quot;,&#13;&#10;            isRead = true,&#13;&#10;            type = NotificationType.PASS_EXPIRED&#13;&#10;        ),&#13;&#10;        Notification(&#13;&#10;            id = &quot;8&quot;,&#13;&#10;            message = &quot;System maintenance scheduled for tonight from 2 AM to 4 AM&quot;,&#13;&#10;            timestamp = &quot;2024-12-13 15:45:00&quot;,&#13;&#10;            visitorName = &quot;System Admin&quot;,&#13;&#10;            isRead = true,&#13;&#10;            type = NotificationType.SYSTEM&#13;&#10;        )&#13;&#10;    )&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorsListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorsListScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.data.models.Visitor&#10;import com.example.permitely.data.models.VisitorFilter&#10;import com.example.permitely.data.models.VisitorStatus&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Visitors List Screen - View all visitors hosted by this host&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VisitorsListScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onVisitorClick: (Visitor) -&gt; Unit = {},&#10;    viewModel: VisitorsListViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Handle pull-to-refresh&#10;    LaunchedEffect(Unit) {&#10;        viewModel.loadVisitors()&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top App Bar&#10;            VisitorsListTopBar(&#10;                onNavigateBack = onNavigateBack,&#10;                visitorsCount = uiState.visitors.size,&#10;                onRefresh = { viewModel.refresh() }&#10;            )&#10;&#10;            // Search and Filters&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Search Bar&#10;                SearchBar(&#10;                    searchQuery = uiState.searchQuery,&#10;                    onSearchChange = { viewModel.updateSearchQuery(it) }&#10;                )&#10;&#10;                // Filter Chips&#10;                FilterChips(&#10;                    selectedFilter = uiState.selectedFilter,&#10;                    onFilterChange = { viewModel.updateFilter(it) },&#10;                    visitorCounts = viewModel.getVisitorCounts()&#10;                )&#10;            }&#10;&#10;            // Content based on state&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    LoadingState()&#10;                }&#10;                uiState.error != null -&gt; {&#10;                    ErrorState(&#10;                        error = uiState.error!!,&#10;                        onRetry = { viewModel.refresh() }&#10;                    )&#10;                }&#10;                uiState.visitors.isEmpty() -&gt; {&#10;                    EmptyState(&#10;                        searchQuery = uiState.searchQuery,&#10;                        selectedFilter = uiState.selectedFilter&#10;                    )&#10;                }&#10;                else -&gt; {&#10;                    VisitorsList(&#10;                        visitors = uiState.visitors,&#10;                        onVisitorClick = onVisitorClick,&#10;                        onApprove = { visitor -&gt;&#10;                            // TODO: Implement approve logic&#10;                            scope.launch {&#10;                                // Will be implemented later&#10;                            }&#10;                        },&#10;                        onReject = { visitor -&gt;&#10;                            // TODO: Implement reject logic&#10;                            scope.launch {&#10;                                // Will be implemented later&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LoadingState() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            CircularProgressIndicator(&#10;                color = Primary,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Loading visitors...&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextSecondary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorState(&#10;    error: String,&#10;    onRetry: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Error,&#10;            contentDescription = &quot;Error&quot;,&#10;            tint = Error,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Oops! Something went wrong&quot;,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = error,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = TextSecondary&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = onRetry,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Primary,&#10;                contentColor = OnPrimary&#10;            )&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Refresh,&#10;                contentDescription = &quot;Retry&quot;,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;Try Again&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorsList(&#10;    visitors: List&lt;Visitor&gt;,&#10;    onVisitorClick: (Visitor) -&gt; Unit,&#10;    onApprove: (Visitor) -&gt; Unit,&#10;    onReject: (Visitor) -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        items(visitors) { visitor -&gt;&#10;            VisitorCard(&#10;                visitor = visitor,&#10;                onVisitorClick = { onVisitorClick(visitor) },&#10;                onApprove = { onApprove(visitor) },&#10;                onReject = { onReject(visitor) }&#10;            )&#10;        }&#10;&#10;        // Bottom spacing&#10;        item {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorsListTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    visitorsCount: Int,&#10;    onRefresh: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;All Visitors&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;$visitorsCount visitors found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            IconButton(onClick = onRefresh) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Refresh,&#10;                    contentDescription = &quot;Refresh&quot;,&#10;                    tint = TextSecondary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SearchBar(&#10;    searchQuery: String,&#10;    onSearchChange: (String) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Search&quot;,&#10;                tint = TextTertiary,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            PermitelyTextField(&#10;                value = searchQuery,&#10;                onValueChange = onSearchChange,&#10;                label = &quot;Search by name or email...&quot;,&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .background(Color.Transparent)&#10;            )&#10;&#10;            if (searchQuery.isNotEmpty()) {&#10;                IconButton(&#10;                    onClick = { onSearchChange(&quot;&quot;) },&#10;                    modifier = Modifier.size(24.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Clear,&#10;                        contentDescription = &quot;Clear&quot;,&#10;                        tint = TextTertiary,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FilterChips(&#10;    selectedFilter: VisitorFilter,&#10;    onFilterChange: (VisitorFilter) -&gt; Unit,&#10;    visitorCounts: Map&lt;VisitorFilter, Int&gt;&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;        contentPadding = PaddingValues(horizontal = 4.dp)&#10;    ) {&#10;        items(VisitorFilter.values()) { filter -&gt;&#10;            FilterChip(&#10;                filter = filter,&#10;                isSelected = selectedFilter == filter,&#10;                count = visitorCounts[filter] ?: 0,&#10;                onClick = { onFilterChange(filter) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FilterChip(&#10;    filter: VisitorFilter,&#10;    isSelected: Boolean,&#10;    count: Int,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) Primary else Surface&#10;    val contentColor = if (isSelected) OnPrimary else TextSecondary&#10;&#10;    FilterChip(&#10;        selected = isSelected,&#10;        onClick = onClick,&#10;        label = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Text(&#10;                    text = filter.displayName,&#10;                    color = contentColor,&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Medium&#10;                )&#10;                if (count &gt; 0) {&#10;                    Surface(&#10;                        color = if (isSelected) OnPrimary.copy(alpha = 0.2f) else Primary.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ) {&#10;                        Text(&#10;                            text = count.toString(),&#10;                            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = if (isSelected) OnPrimary else Primary,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        colors = FilterChipDefaults.filterChipColors(&#10;            selectedContainerColor = backgroundColor,&#10;            selectedLabelColor = contentColor,&#10;            containerColor = backgroundColor,&#10;            labelColor = contentColor&#10;        ),&#10;        border = FilterChipDefaults.filterChipBorder(&#10;            enabled = true,&#10;            selected = isSelected,&#10;            borderColor = if (isSelected) Primary else BorderLight,&#10;            selectedBorderColor = Primary&#10;        )&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun VisitorCard(&#10;    visitor: Visitor,&#10;    onVisitorClick: () -&gt; Unit,&#10;    onApprove: () -&gt; Unit,&#10;    onReject: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        onClick = onVisitorClick&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Header Row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                // Visitor Info&#10;                Row(&#10;                    modifier = Modifier.weight(1f),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Avatar&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(48.dp)&#10;                            .background(&#10;                                brush = Brush.radialGradient(&#10;                                    colors = listOf(&#10;                                        getStatusColor(visitor.status),&#10;                                        getStatusColor(visitor.status).copy(alpha = 0.7f)&#10;                                    )&#10;                                ),&#10;                                shape = CircleShape&#10;                            ),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = visitor.name.first().toString().uppercase(),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = OnPrimary,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    // Name and Email&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = visitor.name,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = TextPrimary,&#10;                            fontWeight = FontWeight.Bold,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = visitor.email,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = TextSecondary,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Status Badge&#10;                StatusBadge(status = visitor.status)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Visitor Details&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Phone,&#10;                label = &quot;Phone&quot;,&#10;                value = visitor.phone&#10;            )&#10;&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Description,&#10;                label = &quot;Purpose&quot;,&#10;                value = visitor.purpose&#10;            )&#10;&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Schedule,&#10;                label = &quot;Visit Time&quot;,&#10;                value = &quot;${visitor.date} at ${visitor.time}&quot;&#10;            )&#10;&#10;            // Action Buttons for Pending Visitors&#10;            if (visitor.status == VisitorStatus.PENDING) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    // Reject Button&#10;                    OutlinedButton(&#10;                        onClick = onReject,&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            contentColor = Error,&#10;                            containerColor = Error.copy(alpha = 0.05f)&#10;                        ),&#10;                        border = androidx.compose.foundation.BorderStroke(1.dp, Error)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Close,&#10;                            contentDescription = &quot;Reject&quot;,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&quot;Reject&quot;)&#10;                    }&#10;&#10;                    // Approve Button&#10;                    Button(&#10;                        onClick = onApprove,&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Success,&#10;                            contentColor = OnSuccess&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Check,&#10;                            contentDescription = &quot;Approve&quot;,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&quot;Approve&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorDetailsRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = label,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(16.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;&#10;        Text(&#10;            text = &quot;$label: &quot;,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextTertiary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextSecondary,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusBadge(status: VisitorStatus) {&#10;    val (backgroundColor, textColor, icon) = when (status) {&#10;        VisitorStatus.PENDING -&gt; Triple(Warning.copy(alpha = 0.1f), Warning, Icons.Default.Schedule)&#10;        VisitorStatus.APPROVED -&gt; Triple(Success.copy(alpha = 0.1f), Success, Icons.Default.CheckCircle)&#10;        VisitorStatus.REJECTED -&gt; Triple(Error.copy(alpha = 0.1f), Error, Icons.Default.Cancel)&#10;        VisitorStatus.EXPIRED -&gt; Triple(TextTertiary.copy(alpha = 0.1f), TextTertiary, Icons.Default.Timer)&#10;    }&#10;&#10;    Surface(&#10;        color = backgroundColor,&#10;        shape = RoundedCornerShape(20.dp),&#10;        modifier = Modifier.clip(RoundedCornerShape(20.dp))&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = status.name,&#10;                tint = textColor,&#10;                modifier = Modifier.size(12.dp)&#10;            )&#10;            Text(&#10;                text = status.displayName,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = textColor,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyState(&#10;    searchQuery: String,&#10;    selectedFilter: VisitorFilter&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = if (searchQuery.isNotEmpty()) Icons.Default.SearchOff else Icons.Default.PersonOff,&#10;            contentDescription = &quot;No visitors&quot;,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = if (searchQuery.isNotEmpty()) {&#10;                &quot;No visitors found&quot;&#10;            } else {&#10;                &quot;No ${selectedFilter.displayName.lowercase()} visitors&quot;&#10;            },&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextSecondary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Text(&#10;            text = if (searchQuery.isNotEmpty()) {&#10;                &quot;Try adjusting your search terms&quot;&#10;            } else {&#10;                &quot;Create a new visitor appointment to get started&quot;&#10;            },&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = TextTertiary&#10;        )&#10;    }&#10;}&#10;&#10;// Helper functions and data classes&#10;private fun getStatusColor(status: VisitorStatus): Color {&#10;    return when (status) {&#10;        VisitorStatus.PENDING -&gt; Warning&#10;        VisitorStatus.APPROVED -&gt; Success&#10;        VisitorStatus.REJECTED -&gt; Error&#10;        VisitorStatus.EXPIRED -&gt; TextTertiary&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Visitors List Screen - View all visitors hosted by this host&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun VisitorsListScreen(&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onVisitorClick: (Visitor) -&gt; Unit = {},&#10;    viewModel: VisitorsListViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Handle pull-to-refresh&#10;    LaunchedEffect(Unit) {&#10;        viewModel.loadVisitors()&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Background)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top App Bar&#10;            VisitorsListTopBar(&#10;                onNavigateBack = onNavigateBack,&#10;                visitorsCount = uiState.visitors.size,&#10;                onRefresh = { viewModel.refresh() }&#10;            )&#10;&#10;            // Search and Filters&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Search Bar&#10;                SearchBar(&#10;                    searchQuery = uiState.searchQuery,&#10;                    onSearchChange = { viewModel.updateSearchQuery(it) }&#10;                )&#10;&#10;                // Filter Chips&#10;                FilterChips(&#10;                    selectedFilter = uiState.selectedFilter,&#10;                    onFilterChange = { viewModel.updateFilter(it) },&#10;                    visitorCounts = viewModel.getVisitorCounts()&#10;                )&#10;            }&#10;&#10;            // Content based on state&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    LoadingState()&#10;                }&#10;                uiState.error != null -&gt; {&#10;                    ErrorState(&#10;                        error = uiState.error!!,&#10;                        onRetry = { viewModel.refresh() }&#10;                    )&#10;                }&#10;                uiState.visitors.isEmpty() -&gt; {&#10;                    EmptyState(&#10;                        searchQuery = uiState.searchQuery,&#10;                        selectedFilter = uiState.selectedFilter&#10;                    )&#10;                }&#10;                else -&gt; {&#10;                    VisitorsList(&#10;                        visitors = uiState.visitors,&#10;                        onVisitorClick = onVisitorClick,&#10;                        onApprove = { visitor -&gt;&#10;                            // TODO: Implement approve logic&#10;                            scope.launch {&#10;                                // Will be implemented later&#10;                            }&#10;                        },&#10;                        onReject = { visitor -&gt;&#10;                            // TODO: Implement reject logic&#10;                            scope.launch {&#10;                                // Will be implemented later&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LoadingState() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            CircularProgressIndicator(&#10;                color = Primary,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Loading visitors...&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = TextSecondary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorState(&#10;    error: String,&#10;    onRetry: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Error,&#10;            contentDescription = &quot;Error&quot;,&#10;            tint = Error,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Oops! Something went wrong&quot;,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = error,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = TextSecondary&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        Button(&#10;            onClick = onRetry,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Primary,&#10;                contentColor = OnPrimary&#10;            )&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Refresh,&#10;                contentDescription = &quot;Retry&quot;,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Text(&quot;Try Again&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorsList(&#10;    visitors: List&lt;Visitor&gt;,&#10;    onVisitorClick: (Visitor) -&gt; Unit,&#10;    onApprove: (Visitor) -&gt; Unit,&#10;    onReject: (Visitor) -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        items(visitors) { visitor -&gt;&#10;            VisitorCard(&#10;                visitor = visitor,&#10;                onVisitorClick = { onVisitorClick(visitor) },&#10;                onApprove = { onApprove(visitor) },&#10;                onReject = { onReject(visitor) }&#10;            )&#10;        }&#10;&#10;        // Bottom spacing&#10;        item {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorsListTopBar(&#10;    onNavigateBack: () -&gt; Unit,&#10;    visitorsCount: Int,&#10;    onRefresh: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        shape = RoundedCornerShape(bottomStart = 20.dp, bottomEnd = 20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onNavigateBack) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;,&#10;                    tint = Primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;All Visitors&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;$visitorsCount visitors found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;&#10;            IconButton(onClick = onRefresh) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Refresh,&#10;                    contentDescription = &quot;Refresh&quot;,&#10;                    tint = TextSecondary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SearchBar(&#10;    searchQuery: String,&#10;    onSearchChange: (String) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Search&quot;,&#10;                tint = TextTertiary,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            PermitelyTextField(&#10;                value = searchQuery,&#10;                onValueChange = onSearchChange,&#10;                label = &quot;Search by name or email...&quot;,&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .background(Color.Transparent)&#10;            )&#10;&#10;            if (searchQuery.isNotEmpty()) {&#10;                IconButton(&#10;                    onClick = { onSearchChange(&quot;&quot;) },&#10;                    modifier = Modifier.size(24.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Clear,&#10;                        contentDescription = &quot;Clear&quot;,&#10;                        tint = TextTertiary,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FilterChips(&#10;    selectedFilter: VisitorFilter,&#10;    onFilterChange: (VisitorFilter) -&gt; Unit,&#10;    visitorCounts: Map&lt;VisitorFilter, Int&gt;&#10;) {&#10;    LazyRow(&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;        contentPadding = PaddingValues(horizontal = 4.dp)&#10;    ) {&#10;        items(VisitorFilter.values()) { filter -&gt;&#10;            FilterChip(&#10;                filter = filter,&#10;                isSelected = selectedFilter == filter,&#10;                count = visitorCounts[filter] ?: 0,&#10;                onClick = { onFilterChange(filter) }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FilterChip(&#10;    filter: VisitorFilter,&#10;    isSelected: Boolean,&#10;    count: Int,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) Primary else Surface&#10;    val contentColor = if (isSelected) OnPrimary else TextSecondary&#10;&#10;    FilterChip(&#10;        selected = isSelected,&#10;        onClick = onClick,&#10;        label = {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Text(&#10;                    text = filter.displayName,&#10;                    color = contentColor,&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Medium&#10;                )&#10;                if (count &gt; 0) {&#10;                    Surface(&#10;                        color = if (isSelected) OnPrimary.copy(alpha = 0.2f) else Primary.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    ) {&#10;                        Text(&#10;                            text = count.toString(),&#10;                            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = if (isSelected) OnPrimary else Primary,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        colors = FilterChipDefaults.filterChipColors(&#10;            selectedContainerColor = backgroundColor,&#10;            selectedLabelColor = contentColor,&#10;            containerColor = backgroundColor,&#10;            labelColor = contentColor&#10;        ),&#10;        border = FilterChipDefaults.filterChipBorder(&#10;            enabled = true,&#10;            selected = isSelected,&#10;            borderColor = if (isSelected) Primary else BorderLight,&#10;            selectedBorderColor = Primary&#10;        )&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun VisitorCard(&#10;    visitor: Visitor,&#10;    onVisitorClick: () -&gt; Unit,&#10;    onApprove: () -&gt; Unit,&#10;    onReject: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Surface),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        onClick = onVisitorClick&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Header Row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                // Visitor Info&#10;                Row(&#10;                    modifier = Modifier.weight(1f),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Avatar&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(48.dp)&#10;                            .background(&#10;                                brush = Brush.radialGradient(&#10;                                    colors = listOf(&#10;                                        getStatusColor(visitor.status),&#10;                                        getStatusColor(visitor.status).copy(alpha = 0.7f)&#10;                                    )&#10;                                ),&#10;                                shape = CircleShape&#10;                            ),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = visitor.name.first().toString().uppercase(),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = OnPrimary,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    // Name and Email&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = visitor.name,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = TextPrimary,&#10;                            fontWeight = FontWeight.Bold,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = visitor.email,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = TextSecondary,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Status Badge&#10;                StatusBadge(status = visitor.status)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Visitor Details&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Phone,&#10;                label = &quot;Phone&quot;,&#10;                value = visitor.phone&#10;            )&#10;&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Description,&#10;                label = &quot;Purpose&quot;,&#10;                value = visitor.purpose&#10;            )&#10;&#10;            VisitorDetailsRow(&#10;                icon = Icons.Default.Schedule,&#10;                label = &quot;Visit Time&quot;,&#10;                value = &quot;${visitor.date} at ${visitor.time}&quot;&#10;            )&#10;&#10;            // Action Buttons for Pending Visitors&#10;            if (visitor.status == VisitorStatus.PENDING) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    // Reject Button&#10;                    OutlinedButton(&#10;                        onClick = onReject,&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            contentColor = Error,&#10;                            containerColor = Error.copy(alpha = 0.05f)&#10;                        ),&#10;                        border = androidx.compose.foundation.BorderStroke(1.dp, Error)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Close,&#10;                            contentDescription = &quot;Reject&quot;,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&quot;Reject&quot;)&#10;                    }&#10;&#10;                    // Approve Button&#10;                    Button(&#10;                        onClick = onApprove,&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Success,&#10;                            contentColor = OnSuccess&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Check,&#10;                            contentDescription = &quot;Approve&quot;,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&quot;Approve&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun VisitorDetailsRow(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = label,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(16.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;&#10;        Text(&#10;            text = &quot;$label: &quot;,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextTertiary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = TextSecondary,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatusBadge(status: VisitorStatus) {&#10;    val (backgroundColor, textColor, icon) = when (status) {&#10;        VisitorStatus.PENDING -&gt; Triple(Warning.copy(alpha = 0.1f), Warning, Icons.Default.Schedule)&#10;        VisitorStatus.APPROVED -&gt; Triple(Success.copy(alpha = 0.1f), Success, Icons.Default.CheckCircle)&#10;        VisitorStatus.REJECTED -&gt; Triple(Error.copy(alpha = 0.1f), Error, Icons.Default.Cancel)&#10;        VisitorStatus.EXPIRED -&gt; Triple(TextTertiary.copy(alpha = 0.1f), TextTertiary, Icons.Default.Timer)&#10;    }&#10;&#10;    Surface(&#10;        color = backgroundColor,&#10;        shape = RoundedCornerShape(20.dp),&#10;        modifier = Modifier.clip(RoundedCornerShape(20.dp))&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = status.name,&#10;                tint = textColor,&#10;                modifier = Modifier.size(12.dp)&#10;            )&#10;            Text(&#10;                text = status.displayName,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = textColor,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyState(&#10;    searchQuery: String,&#10;    selectedFilter: VisitorFilter&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = if (searchQuery.isNotEmpty()) Icons.Default.SearchOff else Icons.Default.PersonOff,&#10;            contentDescription = &quot;No visitors&quot;,&#10;            tint = TextTertiary,&#10;            modifier = Modifier.size(64.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = if (searchQuery.isNotEmpty()) {&#10;                &quot;No visitors found&quot;&#10;            } else {&#10;                &quot;No ${selectedFilter.displayName.lowercase()} visitors&quot;&#10;            },&#10;            style = MaterialTheme.typography.titleMedium,&#10;            color = TextSecondary,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;&#10;        Text(&#10;            text = if (searchQuery.isNotEmpty()) {&#10;                &quot;Try adjusting your search terms&quot;&#10;            } else {&#10;                &quot;Create a new visitor appointment to get started&quot;&#10;            },&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = TextTertiary&#10;        )&#10;    }&#10;}&#10;&#10;// Helper functions and data classes - LOCAL TO THIS SCREEN&#10;private fun getStatusColor(status: VisitorStatus): Color {&#10;    return when (status) {&#10;        VisitorStatus.PENDING -&gt; Warning&#10;        VisitorStatus.APPROVED -&gt; Success&#10;        VisitorStatus.REJECTED -&gt; Error&#10;        VisitorStatus.EXPIRED -&gt; TextTertiary&#10;    }&#10;}&#10;&#10;private fun getVisitorCounts(visitors: List&lt;Visitor&gt;): Map&lt;VisitorFilter, Int&gt; {&#10;    return mapOf(&#10;        VisitorFilter.ALL to visitors.size,&#10;        VisitorFilter.PENDING to visitors.count { it.status == VisitorStatus.PENDING },&#10;        VisitorFilter.APPROVED to visitors.count { it.status == VisitorStatus.APPROVED },&#10;        VisitorFilter.REJECTED to visitors.count { it.status == VisitorStatus.REJECTED },&#10;        VisitorFilter.EXPIRED to visitors.count { it.status == VisitorStatus.EXPIRED }&#10;    )&#10;}&#10;&#10;// DATA MODELS - LOCAL TO THIS SCREEN (restored original models)&#10;data class Visitor(&#10;    val id: Int,&#10;    val name: String,&#10;    val email: String,&#10;    val phone: String,&#10;    val purpose: String,&#10;    val status: VisitorStatus,&#10;    val date: String,&#10;    val time: String&#10;)&#10;&#10;enum class VisitorStatus(val displayName: String) {&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;)&#10;}&#10;&#10;enum class VisitorFilter(val displayName: String) {&#10;    ALL(&quot;All&quot;),&#10;    PENDING(&quot;Pending&quot;),&#10;    APPROVED(&quot;Approved&quot;),&#10;    REJECTED(&quot;Rejected&quot;),&#10;    EXPIRED(&quot;Expired&quot;)&#10;}&#10;&#10;// DUMMY DATA - Will be replaced by ViewModel API calls&#10;private fun getDummyVisitors(): List&lt;Visitor&gt; {&#10;    return listOf(&#10;        Visitor(&#10;            id = 1,&#10;            name = &quot;John Doe&quot;,&#10;            email = &quot;john@example.com&quot;,&#10;            phone = &quot;1234567890&quot;,&#10;            purpose = &quot;Business meeting&quot;,&#10;            status = VisitorStatus.APPROVED,&#10;            date = &quot;Aug 10, 2025&quot;,&#10;            time = &quot;09:30&quot;&#10;        ),&#10;        Visitor(&#10;            id = 2,&#10;            name = &quot;Jane Smith&quot;,&#10;            email = &quot;jane@example.com&quot;,&#10;            phone = &quot;9876543210&quot;,&#10;            purpose = &quot;Delivery&quot;,&#10;            status = VisitorStatus.PENDING,&#10;            date = &quot;Aug 10, 2025&quot;,&#10;            time = &quot;07:00&quot;&#10;        )&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorsListViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/host/VisitorsListViewModel.kt" />
              <option name="updatedContent" value="package com.example.permitely.ui.host&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.permitely.data.models.Visitor&#10;import com.example.permitely.data.models.VisitorFilter&#10;import com.example.permitely.data.models.VisitorsListUiState&#10;import com.example.permitely.data.repository.VisitorRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for the Visitors List Screen&#10; * Manages the list of visitors, filtering, and search functionality&#10; */&#10;@HiltViewModel&#10;class VisitorsListViewModel @Inject constructor(&#10;    private val visitorRepository: VisitorRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(VisitorsListUiState())&#10;    val uiState: StateFlow&lt;VisitorsListUiState&gt; = _uiState.asStateFlow()&#10;&#10;    private var allVisitors: List&lt;Visitor&gt; = emptyList()&#10;&#10;    init {&#10;        loadVisitors()&#10;    }&#10;&#10;    /**&#10;     * Load all visitors from the API&#10;     */&#10;    fun loadVisitors() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            visitorRepository.getAllVisitors().collect { result -&gt;&#10;                result.fold(&#10;                    onSuccess = { visitors -&gt;&#10;                        allVisitors = visitors&#10;                        _uiState.value = _uiState.value.copy(&#10;                            visitors = filterVisitors(visitors),&#10;                            isLoading = false,&#10;                            error = null&#10;                        )&#10;                    },&#10;                    onFailure = { error -&gt;&#10;                        _uiState.value = _uiState.value.copy(&#10;                            isLoading = false,&#10;                            error = error.message ?: &quot;Failed to load visitors&quot;&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update the search query and filter visitors&#10;     */&#10;    fun updateSearchQuery(query: String) {&#10;        _uiState.value = _uiState.value.copy(searchQuery = query)&#10;        applyFilters()&#10;    }&#10;&#10;    /**&#10;     * Update the selected filter and apply it&#10;     */&#10;    fun updateFilter(filter: VisitorFilter) {&#10;        _uiState.value = _uiState.value.copy(selectedFilter = filter)&#10;        applyFilters()&#10;    }&#10;&#10;    /**&#10;     * Refresh the visitors list&#10;     */&#10;    fun refresh() {&#10;        loadVisitors()&#10;    }&#10;&#10;    /**&#10;     * Clear any existing error&#10;     */&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;&#10;    /**&#10;     * Apply current search and filter to the visitors list&#10;     */&#10;    private fun applyFilters() {&#10;        val filteredVisitors = filterVisitors(allVisitors)&#10;        _uiState.value = _uiState.value.copy(visitors = filteredVisitors)&#10;    }&#10;&#10;    /**&#10;     * Filter visitors based on search query and selected filter&#10;     */&#10;    private fun filterVisitors(visitors: List&lt;Visitor&gt;): List&lt;Visitor&gt; {&#10;        val currentState = _uiState.value&#10;        &#10;        return visitors.filter { visitor -&gt;&#10;            // Apply search filter&#10;            val matchesSearch = if (currentState.searchQuery.isBlank()) {&#10;                true&#10;            } else {&#10;                visitor.name.contains(currentState.searchQuery, ignoreCase = true) ||&#10;                visitor.email.contains(currentState.searchQuery, ignoreCase = true)&#10;            }&#10;&#10;            // Apply status filter&#10;            val matchesFilter = when (currentState.selectedFilter) {&#10;                VisitorFilter.ALL -&gt; true&#10;                VisitorFilter.PENDING -&gt; visitor.status == com.example.permitely.data.models.VisitorStatus.PENDING&#10;                VisitorFilter.APPROVED -&gt; visitor.status == com.example.permitely.data.models.VisitorStatus.APPROVED&#10;                VisitorFilter.REJECTED -&gt; visitor.status == com.example.permitely.data.models.VisitorStatus.REJECTED&#10;                VisitorFilter.EXPIRED -&gt; visitor.status == com.example.permitely.data.models.VisitorStatus.EXPIRED&#10;            }&#10;&#10;            matchesSearch &amp;&amp; matchesFilter&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get visitor counts for each filter&#10;     */&#10;    fun getVisitorCounts(): Map&lt;VisitorFilter, Int&gt; {&#10;        return mapOf(&#10;            VisitorFilter.ALL to allVisitors.size,&#10;            VisitorFilter.PENDING to allVisitors.count { it.status == com.example.permitely.data.models.VisitorStatus.PENDING },&#10;            VisitorFilter.APPROVED to allVisitors.count { it.status == com.example.permitely.data.models.VisitorStatus.APPROVED },&#10;            VisitorFilter.REJECTED to allVisitors.count { it.status == com.example.permitely.data.models.VisitorStatus.REJECTED },&#10;            VisitorFilter.EXPIRED to allVisitors.count { it.status == com.example.permitely.data.models.VisitorStatus.EXPIRED }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>