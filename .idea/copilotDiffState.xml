<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/MainActivity.kt" />
              <option name="originalContent" value="package com.example.permitely&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.auth.AuthNavigation&#10;import com.example.permitely.ui.main.WelcomeScreen&#10;import com.example.permitely.ui.theme.PermitelyTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import kotlinx.coroutines.flow.collect&#10;import androidx.compose.runtime.LaunchedEffect&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            PermitelyTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    PermitelyApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun PermitelyApp() {&#10;    // Get AuthViewModel to handle proper authentication state&#10;    val authViewModel = hiltViewModel&lt;com.example.permitely.ui.auth.AuthViewModel&gt;()&#10;&#10;    // Single source of truth for authentication state&#10;    var isAuthenticated by remember { mutableStateOf(false) }&#10;    var userInfo by remember { mutableStateOf&lt;com.example.permitely.data.storage.TokenStorage.UserInfo?&gt;(null) }&#10;    var currentScreen by remember { mutableStateOf(&quot;dashboard&quot;) }&#10;    var selectedVisitor by remember { mutableStateOf&lt;com.example.permitely.ui.host.Visitor?&gt;(null) }&#10;    var showSplash by remember { mutableStateOf(true) }&#10;&#10;    // Observe both authentication state and auth UI state&#10;    val authUiState by authViewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // FIXED: Single consolidated LaunchedEffect to handle authentication state properly&#10;    LaunchedEffect(Unit) {&#10;        // Observe authentication state from TokenStorage&#10;        authViewModel.isLoggedIn().collect { loggedIn -&gt;&#10;            println(&quot;DEBUG: isLoggedIn changed to: $loggedIn&quot;)&#10;            isAuthenticated = loggedIn&#10;&#10;            // When logged out, immediately clear all user data&#10;            if (!loggedIn) {&#10;                println(&quot;DEBUG: User logged out, clearing all user data&quot;)&#10;                currentScreen = &quot;dashboard&quot;&#10;                selectedVisitor = null&#10;                userInfo = null&#10;            }&#10;        }&#10;    }&#10;&#10;    // Separate LaunchedEffect for user info to avoid deadlock&#10;    LaunchedEffect(isAuthenticated) {&#10;        if (isAuthenticated) {&#10;            // Get fresh user data from TokenStorage first, then let individual screens&#10;            // fetch fresh API data as needed&#10;            authViewModel.getUserInfo().collect { info -&gt;&#10;                println(&quot;DEBUG: Fresh userInfo for logged in user: $info&quot;)&#10;                userInfo = info&#10;&#10;                // Force refresh of any cached data when switching users&#10;                if (info != null) {&#10;                    println(&quot;DEBUG: User switched to: ${info.name} (${info.email})&quot;)&#10;                }&#10;            }&#10;        } else {&#10;            // Clear user info when not authenticated&#10;            userInfo = null&#10;        }&#10;    }&#10;&#10;    // Handle successful login from AuthViewModel&#10;    LaunchedEffect(authUiState.isSuccess) {&#10;        if (authUiState.isSuccess) {&#10;            println(&quot;DEBUG: Login success detected, resetting AuthViewModel state&quot;)&#10;            // Reset the AuthViewModel state after successful login&#10;            authViewModel.resetState()&#10;        }&#10;    }&#10;&#10;    // Proper logout function that clears all stored data&#10;    fun performLogout() {&#10;        println(&quot;DEBUG: Performing logout&quot;)&#10;        // Clear local state immediately&#10;        isAuthenticated = false&#10;        currentScreen = &quot;dashboard&quot;&#10;        selectedVisitor = null&#10;        userInfo = null&#10;        // Then call backend logout&#10;        authViewModel.logout()&#10;    }&#10;&#10;    if (showSplash) {&#10;        // Show splash screen first&#10;        com.example.permitely.ui.splash.SplashScreen(&#10;            onSplashFinished = { showSplash = false }&#10;        )&#10;    } else if (isAuthenticated) {&#10;        // Show appropriate dashboard based on user type&#10;        val userType = userInfo?.role ?: &quot;host&quot;&#10;        when (userType) {&#10;            &quot;host&quot; -&gt; {&#10;                when (currentScreen) {&#10;                    &quot;dashboard&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostDashboardScreen(&#10;                            onCreateVisitor = { currentScreen = &quot;create_visitor&quot; },&#10;                            onViewAllVisitors = { currentScreen = &quot;visitors_list&quot; },&#10;                            onViewNotifications = { currentScreen = &quot;notifications&quot; },&#10;                            onViewProfile = { currentScreen = &quot;profile&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;create_visitor&quot; -&gt; {&#10;                        com.example.permitely.ui.host.CreateVisitorScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onVisitorCreated = { visitorData -&gt;&#10;                                // Store the created visitor data and navigate to details&#10;                                selectedVisitor = com.example.permitely.ui.host.Visitor(&#10;                                    id = visitorData.visitor.visitorId.toString(), // Convert Int to String&#10;                                    name = visitorData.visitor.name,&#10;                                    email = visitorData.visitor.email,&#10;                                    phone = visitorData.visitor.phoneNumber, // phoneNumber -&gt; phone&#10;                                    purpose = visitorData.visitor.purposeOfVisit, // purposeOfVisit -&gt; purpose&#10;                                    date = visitorData.visitor.createdAt.split(&quot;T&quot;)[0], // Extract date part&#10;                                    time = visitorData.visitor.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0], // Extract time part&#10;                                    status = when(visitorData.visitor.status) {&#10;                                        &quot;PENDING&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                        &quot;APPROVED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.APPROVED&#10;                                        &quot;REJECTED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.REJECTED&#10;                                        &quot;EXPIRED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.EXPIRED&#10;                                        else -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                    },&#10;                                    createdAt = visitorData.visitor.createdAt,&#10;                                    // Map QR code and pass information&#10;                                    hasQRCode = visitorData.pass != null,&#10;                                    qrCodeUrl = visitorData.pass?.qrCodeUrl,&#10;                                    passId = visitorData.pass?.passId?.toString(),&#10;                                    expiryTime = visitorData.pass?.expiryTime&#10;                                )&#10;                                currentScreen = &quot;visitor_details&quot;&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;visitors_list&quot; -&gt; {&#10;                        com.example.permitely.ui.host.VisitorsListScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onVisitorClick = { visitor -&gt;&#10;                                selectedVisitor = visitor&#10;                                currentScreen = &quot;visitor_details&quot;&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;visitor_details&quot; -&gt; {&#10;                        selectedVisitor?.let { visitor -&gt;&#10;                            com.example.permitely.ui.host.VisitorDetailsScreen(&#10;                                visitor = visitor,&#10;                                onNavigateBack = { currentScreen = &quot;visitors_list&quot; },&#10;                                onEditVisitor = { visitorToEdit -&gt;&#10;                                    selectedVisitor = visitorToEdit&#10;                                    // TODO: Navigate to edit screen when implemented&#10;                                    // currentScreen = &quot;edit_visitor&quot;&#10;                                },&#10;                                onDeleteVisitor = { visitorId -&gt;&#10;                                    // TODO: Implement visitor deletion logic&#10;                                    currentScreen = &quot;visitors_list&quot;&#10;                                },&#10;                                onGeneratePass = { visitorId -&gt;&#10;                                    // TODO: Implement pass generation logic&#10;                                },&#10;                                onShareQRCode = {&#10;                                    // TODO: Implement QR code sharing logic&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                    &quot;notifications&quot; -&gt; {&#10;                        com.example.permitely.ui.host.NotificationsScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; }&#10;                        )&#10;                    }&#10;                    &quot;profile&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostProfileScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {&#10;                // Fallback to welcome screen for other user types&#10;                WelcomeScreen(&#10;                    onLogout = { performLogout() }&#10;                )&#10;            }&#10;        }&#10;    } else {&#10;        // Show authentication screens&#10;        AuthNavigation(&#10;            onAuthSuccess = {&#10;                // Don't manually set isAuthenticated = true, let the Flow handle it&#10;                currentScreen = &quot;dashboard&quot;&#10;            }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.auth.AuthNavigation&#10;import com.example.permitely.ui.main.WelcomeScreen&#10;import com.example.permitely.ui.theme.PermitelyTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import kotlinx.coroutines.flow.collect&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import com.example.permitely.ui.theme.Primary&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            PermitelyTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    PermitelyApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun PermitelyApp() {&#10;    // Get AuthViewModel to handle proper authentication state&#10;    val authViewModel = hiltViewModel&lt;com.example.permitely.ui.auth.AuthViewModel&gt;()&#10;&#10;    // Single source of truth for authentication state&#10;    var isAuthenticated by remember { mutableStateOf(false) }&#10;    var userInfo by remember { mutableStateOf&lt;com.example.permitely.data.storage.TokenStorage.UserInfo?&gt;(null) }&#10;    var currentScreen by remember { mutableStateOf(&quot;dashboard&quot;) }&#10;    var selectedVisitor by remember { mutableStateOf&lt;com.example.permitely.ui.host.Visitor?&gt;(null) }&#10;    var showSplash by remember { mutableStateOf(true) }&#10;    var isCheckingAuth by remember { mutableStateOf(true) } // Add this to track auth check&#10;&#10;    // Observe both authentication state and auth UI state&#10;    val authUiState by authViewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    // FIXED: Check authentication state on app start&#10;    LaunchedEffect(Unit) {&#10;        // Observe authentication state from TokenStorage&#10;        authViewModel.isLoggedIn().collect { loggedIn -&gt;&#10;            println(&quot;DEBUG: isLoggedIn changed to: $loggedIn&quot;)&#10;            isAuthenticated = loggedIn&#10;            isCheckingAuth = false // Auth check completed&#10;&#10;            // When logged out, immediately clear all user data&#10;            if (!loggedIn) {&#10;                println(&quot;DEBUG: User logged out, clearing all user data&quot;)&#10;                currentScreen = &quot;dashboard&quot;&#10;                selectedVisitor = null&#10;                userInfo = null&#10;            }&#10;        }&#10;    }&#10;&#10;    // Separate LaunchedEffect for user info to avoid deadlock&#10;    LaunchedEffect(isAuthenticated) {&#10;        if (isAuthenticated) {&#10;            // Get fresh user data from TokenStorage first, then let individual screens&#10;            // fetch fresh API data as needed&#10;            authViewModel.getUserInfo().collect { info -&gt;&#10;                println(&quot;DEBUG: Fresh userInfo for logged in user: $info&quot;)&#10;                userInfo = info&#10;&#10;                // Force refresh of any cached data when switching users&#10;                if (info != null) {&#10;                    println(&quot;DEBUG: User switched to: ${info.name} (${info.email})&quot;)&#10;                }&#10;            }&#10;        } else {&#10;            // Clear user info when not authenticated&#10;            userInfo = null&#10;        }&#10;    }&#10;&#10;    // Handle successful login from AuthViewModel&#10;    LaunchedEffect(authUiState.isSuccess) {&#10;        if (authUiState.isSuccess) {&#10;            println(&quot;DEBUG: Login success detected, resetting AuthViewModel state&quot;)&#10;            // Reset the AuthViewModel state after successful login&#10;            authViewModel.resetState()&#10;        }&#10;    }&#10;&#10;    // Proper logout function that clears all stored data&#10;    fun performLogout() {&#10;        println(&quot;DEBUG: Performing logout&quot;)&#10;        // Clear local state immediately&#10;        isAuthenticated = false&#10;        currentScreen = &quot;dashboard&quot;&#10;        selectedVisitor = null&#10;        userInfo = null&#10;        // Then call backend logout&#10;        authViewModel.logout()&#10;    }&#10;&#10;    // Show splash screen first, then check if we need to show loading&#10;    if (showSplash) {&#10;        // Show splash screen first&#10;        com.example.permitely.ui.splash.SplashScreen(&#10;            onSplashFinished = { showSplash = false }&#10;        )&#10;    } else if (isCheckingAuth) {&#10;        // Show loading while checking authentication&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator(color = Primary)&#10;        }&#10;    } else if (isAuthenticated) {&#10;        // Show appropriate dashboard based on user type&#10;        val userType = userInfo?.role ?: &quot;host&quot;&#10;        when (userType) {&#10;            &quot;host&quot; -&gt; {&#10;                when (currentScreen) {&#10;                    &quot;dashboard&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostDashboardScreen(&#10;                            onCreateVisitor = { currentScreen = &quot;create_visitor&quot; },&#10;                            onViewAllVisitors = { currentScreen = &quot;visitors_list&quot; },&#10;                            onViewNotifications = { currentScreen = &quot;notifications&quot; },&#10;                            onViewProfile = { currentScreen = &quot;profile&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;create_visitor&quot; -&gt; {&#10;                        com.example.permitely.ui.host.CreateVisitorScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onVisitorCreated = { visitorData -&gt;&#10;                                // Store the created visitor data and navigate to details&#10;                                selectedVisitor = com.example.permitely.ui.host.Visitor(&#10;                                    id = visitorData.visitor.visitorId.toString(), // Convert Int to String&#10;                                    name = visitorData.visitor.name,&#10;                                    email = visitorData.visitor.email,&#10;                                    phone = visitorData.visitor.phoneNumber, // phoneNumber -&gt; phone&#10;                                    purpose = visitorData.visitor.purposeOfVisit, // purposeOfVisit -&gt; purpose&#10;                                    date = visitorData.visitor.createdAt.split(&quot;T&quot;)[0], // Extract date part&#10;                                    time = visitorData.visitor.createdAt.split(&quot;T&quot;)[1].split(&quot;Z&quot;)[0], // Extract time part&#10;                                    status = when(visitorData.visitor.status) {&#10;                                        &quot;PENDING&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                        &quot;APPROVED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.APPROVED&#10;                                        &quot;REJECTED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.REJECTED&#10;                                        &quot;EXPIRED&quot; -&gt; com.example.permitely.ui.host.VisitorStatus.EXPIRED&#10;                                        else -&gt; com.example.permitely.ui.host.VisitorStatus.PENDING&#10;                                    },&#10;                                    createdAt = visitorData.visitor.createdAt,&#10;                                    // Map QR code and pass information&#10;                                    hasQRCode = visitorData.pass != null,&#10;                                    qrCodeUrl = visitorData.pass?.qrCodeUrl,&#10;                                    passId = visitorData.pass?.passId?.toString(),&#10;                                    expiryTime = visitorData.pass?.expiryTime&#10;                                )&#10;                                currentScreen = &quot;visitor_details&quot;&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;visitors_list&quot; -&gt; {&#10;                        com.example.permitely.ui.host.VisitorsListScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onVisitorClick = { visitor -&gt;&#10;                                selectedVisitor = visitor&#10;                                currentScreen = &quot;visitor_details&quot;&#10;                            }&#10;                        )&#10;                    }&#10;                    &quot;visitor_details&quot; -&gt; {&#10;                        selectedVisitor?.let { visitor -&gt;&#10;                            com.example.permitely.ui.host.VisitorDetailsScreen(&#10;                                visitor = visitor,&#10;                                onNavigateBack = { currentScreen = &quot;visitors_list&quot; },&#10;                                onEditVisitor = { visitorToEdit -&gt;&#10;                                    selectedVisitor = visitorToEdit&#10;                                    // TODO: Navigate to edit screen when implemented&#10;                                    // currentScreen = &quot;edit_visitor&quot;&#10;                                },&#10;                                onDeleteVisitor = { visitorId -&gt;&#10;                                    // TODO: Implement visitor deletion logic&#10;                                    currentScreen = &quot;visitors_list&quot;&#10;                                },&#10;                                onGeneratePass = { visitorId -&gt;&#10;                                    // TODO: Implement pass generation logic&#10;                                },&#10;                                onShareQRCode = {&#10;                                    // TODO: Implement QR code sharing logic&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                    &quot;notifications&quot; -&gt; {&#10;                        com.example.permitely.ui.host.NotificationsScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; }&#10;                        )&#10;                    }&#10;                    &quot;profile&quot; -&gt; {&#10;                        com.example.permitely.ui.host.HostProfileScreen(&#10;                            onNavigateBack = { currentScreen = &quot;dashboard&quot; },&#10;                            onLogout = {&#10;                                performLogout()&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {&#10;                // Fallback to welcome screen for other user types&#10;                WelcomeScreen(&#10;                    onLogout = { performLogout() }&#10;                )&#10;            }&#10;        }&#10;    } else {&#10;        // Show authentication screens only after confirming user is not logged in&#10;        AuthNavigation(&#10;            onAuthSuccess = {&#10;                // Don't manually set isAuthenticated = true, let the Flow handle it&#10;                currentScreen = &quot;dashboard&quot;&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/network/VisitorApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/network/VisitorApiService.kt" />
              <option name="updatedContent" value="package com.example.permitely.data.network&#10;&#10;import com.example.permitely.data.models.CreateVisitorRequest&#10;import com.example.permitely.data.models.CreateVisitorResponse&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;/**&#10; * Retrofit API service interface for visitor endpoints&#10; */&#10;interface VisitorApiService {&#10;&#10;    /**&#10;     * Create a new visitor&#10;     * POST /api/visitors/&#10;     */&#10;    @POST(&quot;api/visitors/&quot;)&#10;    suspend fun createVisitor(&#10;        @Header(&quot;Authorization&quot;) token: String,&#10;        @Body request: CreateVisitorRequest&#10;    ): Response&lt;CreateVisitorResponse&gt;&#10;&#10;    // TODO: Add other visitor endpoints as needed&#10;    // GET /api/visitors/ - Get all visitors&#10;    // GET /api/visitors/{id} - Get visitor by ID&#10;    // PUT /api/visitors/{id} - Update visitor&#10;    // DELETE /api/visitors/{id} - Delete visitor&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/repository/AuthRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/data/repository/AuthRepository.kt" />
              <option name="originalContent" value="package com.example.permitely.data.repository&#10;&#10;import com.example.permitely.data.models.*&#10;import com.example.permitely.data.network.AuthApiService&#10;import com.example.permitely.data.storage.TokenStorage&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Repository handling authentication operations with real backend integration&#10; */&#10;@Singleton&#10;class AuthRepository @Inject constructor(&#10;    private val authApiService: AuthApiService,&#10;    private val tokenStorage: TokenStorage&#10;) {&#10;&#10;    /**&#10;     * Authenticate user with backend API&#10;     */&#10;    suspend fun login(loginRequest: LoginRequest): Flow&lt;AuthResult&gt; = flow {&#10;        try {&#10;            emit(AuthResult.Loading)&#10;&#10;            // Log the request data for debugging&#10;            println(&quot;Login Request: email=${loginRequest.email}, password=[HIDDEN]&quot;)&#10;&#10;            val response = authApiService.login(loginRequest)&#10;&#10;            // Log the response for debugging&#10;            println(&quot;Login Response Code: ${response.code()}&quot;)&#10;            println(&quot;Login Response Success: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val apiResponse = response.body()&#10;                println(&quot;Login API Response: success=${apiResponse?.success}, data=${apiResponse?.data}&quot;)&#10;&#10;                if (apiResponse?.success == true &amp;&amp; apiResponse.data != null) {&#10;                    val userData = apiResponse.data.user&#10;                    val tokens = apiResponse.data.tokens&#10;&#10;                    println(&quot;Login User Data: id=${userData.id}, name=${userData.name}, role=${userData.role}&quot;)&#10;                    println(&quot;Login Tokens: accessToken length=${tokens.accessToken.length}, refreshToken length=${tokens.refreshToken.length}&quot;)&#10;&#10;                    // Save tokens securely&#10;                    tokenStorage.saveTokens(&#10;                        accessToken = tokens.accessToken,&#10;                        refreshToken = tokens.refreshToken&#10;                    )&#10;&#10;                    // Save user information&#10;                    tokenStorage.saveUserInfo(&#10;                        id = userData.id.toString(), // Convert Int to String for storage&#10;                        name = userData.name,&#10;                        email = userData.email,&#10;                        role = userData.role&#10;                    )&#10;&#10;                    emit(AuthResult.Success(&quot;Login successful&quot;))&#10;                } else {&#10;                    emit(AuthResult.Error(apiResponse?.message ?: &quot;Login failed&quot;))&#10;                }&#10;            } else {&#10;                // Get the actual error response body for debugging&#10;                val errorBody = response.errorBody()?.string()&#10;                println(&quot;Login HTTP Error ${response.code()}: $errorBody&quot;)&#10;&#10;                val errorMessage = when (response.code()) {&#10;                    400 -&gt; &quot;Invalid email or password format&quot;&#10;                    401 -&gt; &quot;Invalid credentials&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later&quot;&#10;                    else -&gt; &quot;Login failed. Please try again&quot;&#10;                }&#10;                emit(AuthResult.Error(errorMessage))&#10;            }&#10;        } catch (e: Exception) {&#10;            // Handle network errors with detailed logging&#10;            println(&quot;Login Exception: ${e.javaClass.simpleName}: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                is com.google.gson.JsonSyntaxException -&gt; &quot;Invalid response format from server&quot;&#10;                is com.google.gson.JsonParseException -&gt; &quot;Failed to parse server response&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(AuthResult.Error(errorMessage))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Register new user with backend API&#10;     */&#10;    suspend fun signup(signupRequest: SignupRequest): Flow&lt;AuthResult&gt; = flow {&#10;        try {&#10;            emit(AuthResult.Loading)&#10;&#10;            // Log the request data for debugging&#10;            println(&quot;Signup Request: name=${signupRequest.name}, email=${signupRequest.email}, phone=${signupRequest.phoneNumber}, role=${signupRequest.role}&quot;)&#10;&#10;            val response = authApiService.signup(signupRequest)&#10;&#10;            if (response.isSuccessful) {&#10;                val apiResponse = response.body()&#10;                if (apiResponse?.success == true &amp;&amp; apiResponse.data != null) {&#10;                    val userData = apiResponse.data.user&#10;                    val tokens = apiResponse.data.tokens&#10;&#10;                    // Save tokens securely&#10;                    tokenStorage.saveTokens(&#10;                        accessToken = tokens.accessToken,&#10;                        refreshToken = tokens.refreshToken&#10;                    )&#10;&#10;                    // Save user information&#10;                    tokenStorage.saveUserInfo(&#10;                        id = userData.id.toString(), // Convert Int to String for storage&#10;                        name = userData.name,&#10;                        email = userData.email,&#10;                        role = userData.role&#10;                    )&#10;&#10;                    emit(AuthResult.Success(&quot;Account created successfully&quot;))&#10;                } else {&#10;                    emit(AuthResult.Error(apiResponse?.message ?: &quot;Signup failed&quot;))&#10;                }&#10;            } else {&#10;                // Get the actual error response body for debugging&#10;                val errorBody = response.errorBody()?.string()&#10;                println(&quot;Signup HTTP Error ${response.code()}: $errorBody&quot;)&#10;&#10;                // Handle HTTP error codes&#10;                val errorMessage = when (response.code()) {&#10;                    400 -&gt; {&#10;                        // Try to parse the actual error message from backend&#10;                        if (errorBody?.contains(&quot;email&quot;) == true) &quot;Invalid email format&quot;&#10;                        else if (errorBody?.contains(&quot;password&quot;) == true) &quot;Password must be at least 8 characters with uppercase, lowercase, number, and special character&quot;&#10;                        else if (errorBody?.contains(&quot;phone&quot;) == true) &quot;Invalid phone number format&quot;&#10;                        else if (errorBody?.contains(&quot;role&quot;) == true) &quot;Invalid role. Must be admin, host, or guard&quot;&#10;                        else &quot;Invalid input data. Please check your information&quot;&#10;                    }&#10;                    409 -&gt; &quot;User already exists with this email&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later&quot;&#10;                    else -&gt; &quot;Signup failed. Please try again&quot;&#10;                }&#10;                emit(AuthResult.Error(errorMessage))&#10;            }&#10;        } catch (e: Exception) {&#10;            // Handle network errors&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                else -&gt; e.message ?: &quot;Network error occurred&quot;&#10;            }&#10;            emit(AuthResult.Error(errorMessage))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Logout user and clear stored tokens&#10;     */&#10;    suspend fun logout(): Flow&lt;AuthResult&gt; = flow {&#10;        try {&#10;            println(&quot;DEBUG: Starting logout process&quot;)&#10;            emit(AuthResult.Loading)&#10;&#10;            // Get refresh token for logout request&#10;            tokenStorage.getRefreshToken().collect { refreshToken -&gt;&#10;                println(&quot;DEBUG: Retrieved refresh token: ${refreshToken?.take(10)}...&quot;)&#10;                if (refreshToken != null) {&#10;                    try {&#10;                        val response = authApiService.logout(LogoutRequest(refreshToken))&#10;                        println(&quot;DEBUG: Logout API response: ${response.code()}&quot;)&#10;&#10;                        if (response.isSuccessful) {&#10;                            println(&quot;DEBUG: Logout API successful - backend handled token invalidation&quot;)&#10;                            // TODO: Uncomment this later when fixing local storage issues&#10;                            // tokenStorage.clearAll()&#10;                            emit(AuthResult.Success(&quot;Logged out successfully&quot;))&#10;                        } else {&#10;                            println(&quot;DEBUG: Logout API failed with code: ${response.code()}&quot;)&#10;                            // For now, still consider it successful since backend might have handled it&#10;                            emit(AuthResult.Success(&quot;Logged out successfully&quot;))&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        println(&quot;DEBUG: Logout API failed: ${e.message}&quot;)&#10;                        // For now, still consider it successful since we're relying on backend&#10;                        emit(AuthResult.Success(&quot;Logged out successfully&quot;))&#10;                    }&#10;                } else {&#10;                    println(&quot;DEBUG: No refresh token found, logout completed&quot;)&#10;                    emit(AuthResult.Success(&quot;Logged out successfully&quot;))&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Logout exception: ${e.message}&quot;)&#10;            // For now, still return success&#10;            emit(AuthResult.Success(&quot;Logged out successfully&quot;))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Check if user is currently logged in&#10;     */&#10;    fun isLoggedIn(): Flow&lt;Boolean&gt; = tokenStorage.isLoggedIn()&#10;&#10;    /**&#10;     * Get stored user information&#10;     */&#10;    fun getUserInfo(): Flow&lt;TokenStorage.UserInfo?&gt; = tokenStorage.getUserInfo()&#10;}&#10;&#10;/**&#10; * Sealed class representing authentication operation results&#10; */&#10;sealed class AuthResult {&#10;    object Loading : AuthResult()&#10;    data class Success(val message: String) : AuthResult()&#10;    data class Error(val message: String) : AuthResult()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.data.repository&#10;&#10;import com.example.permitely.data.models.*&#10;import com.example.permitely.data.network.AuthApiService&#10;import com.example.permitely.data.storage.TokenStorage&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import kotlinx.coroutines.flow.first&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Repository handling authentication operations with real backend integration&#10; */&#10;@Singleton&#10;class AuthRepository @Inject constructor(&#10;    private val authApiService: AuthApiService,&#10;    private val tokenStorage: TokenStorage&#10;) {&#10;&#10;    /**&#10;     * Authenticate user with backend API&#10;     */&#10;    suspend fun login(loginRequest: LoginRequest): Flow&lt;AuthResult&gt; = flow {&#10;        try {&#10;            emit(AuthResult.Loading)&#10;&#10;            // Log the request data for debugging&#10;            println(&quot;Login Request: email=${loginRequest.email}, password=[HIDDEN]&quot;)&#10;&#10;            val response = authApiService.login(loginRequest)&#10;&#10;            // Log the response for debugging&#10;            println(&quot;Login Response Code: ${response.code()}&quot;)&#10;            println(&quot;Login Response Success: ${response.isSuccessful}&quot;)&#10;&#10;            if (response.isSuccessful) {&#10;                val apiResponse = response.body()&#10;                println(&quot;Login API Response: success=${apiResponse?.success}, data=${apiResponse?.data}&quot;)&#10;&#10;                if (apiResponse?.success == true &amp;&amp; apiResponse.data != null) {&#10;                    val userData = apiResponse.data.user&#10;                    val tokens = apiResponse.data.tokens&#10;&#10;                    println(&quot;Login User Data: id=${userData.id}, name=${userData.name}, role=${userData.role}&quot;)&#10;                    println(&quot;Login Tokens: accessToken length=${tokens.accessToken.length}, refreshToken length=${tokens.refreshToken.length}&quot;)&#10;&#10;                    // Save tokens securely&#10;                    tokenStorage.saveTokens(&#10;                        accessToken = tokens.accessToken,&#10;                        refreshToken = tokens.refreshToken&#10;                    )&#10;&#10;                    // Save user information&#10;                    tokenStorage.saveUserInfo(&#10;                        id = userData.id.toString(), // Convert Int to String for storage&#10;                        name = userData.name,&#10;                        email = userData.email,&#10;                        role = userData.role&#10;                    )&#10;&#10;                    emit(AuthResult.Success(&quot;Login successful&quot;))&#10;                } else {&#10;                    emit(AuthResult.Error(apiResponse?.message ?: &quot;Login failed&quot;))&#10;                }&#10;            } else {&#10;                // Get the actual error response body for debugging&#10;                val errorBody = response.errorBody()?.string()&#10;                println(&quot;Login HTTP Error ${response.code()}: $errorBody&quot;)&#10;&#10;                val errorMessage = when (response.code()) {&#10;                    400 -&gt; &quot;Invalid email or password format&quot;&#10;                    401 -&gt; &quot;Invalid credentials&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later&quot;&#10;                    else -&gt; &quot;Login failed. Please try again&quot;&#10;                }&#10;                emit(AuthResult.Error(errorMessage))&#10;            }&#10;        } catch (e: Exception) {&#10;            // Handle network errors with detailed logging&#10;            println(&quot;Login Exception: ${e.javaClass.simpleName}: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                is com.google.gson.JsonSyntaxException -&gt; &quot;Invalid response format from server&quot;&#10;                is com.google.gson.JsonParseException -&gt; &quot;Failed to parse server response&quot;&#10;                else -&gt; &quot;Network error: ${e.message ?: &quot;Unknown error&quot;}&quot;&#10;            }&#10;            emit(AuthResult.Error(errorMessage))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Register new user with backend API&#10;     */&#10;    suspend fun signup(signupRequest: SignupRequest): Flow&lt;AuthResult&gt; = flow {&#10;        try {&#10;            emit(AuthResult.Loading)&#10;&#10;            // Log the request data for debugging&#10;            println(&quot;Signup Request: name=${signupRequest.name}, email=${signupRequest.email}, phone=${signupRequest.phoneNumber}, role=${signupRequest.role}&quot;)&#10;&#10;            val response = authApiService.signup(signupRequest)&#10;&#10;            if (response.isSuccessful) {&#10;                val apiResponse = response.body()&#10;                if (apiResponse?.success == true &amp;&amp; apiResponse.data != null) {&#10;                    val userData = apiResponse.data.user&#10;                    val tokens = apiResponse.data.tokens&#10;&#10;                    // Save tokens securely&#10;                    tokenStorage.saveTokens(&#10;                        accessToken = tokens.accessToken,&#10;                        refreshToken = tokens.refreshToken&#10;                    )&#10;&#10;                    // Save user information&#10;                    tokenStorage.saveUserInfo(&#10;                        id = userData.id.toString(), // Convert Int to String for storage&#10;                        name = userData.name,&#10;                        email = userData.email,&#10;                        role = userData.role&#10;                    )&#10;&#10;                    emit(AuthResult.Success(&quot;Account created successfully&quot;))&#10;                } else {&#10;                    emit(AuthResult.Error(apiResponse?.message ?: &quot;Signup failed&quot;))&#10;                }&#10;            } else {&#10;                // Get the actual error response body for debugging&#10;                val errorBody = response.errorBody()?.string()&#10;                println(&quot;Signup HTTP Error ${response.code()}: $errorBody&quot;)&#10;&#10;                // Handle HTTP error codes&#10;                val errorMessage = when (response.code()) {&#10;                    400 -&gt; {&#10;                        // Try to parse the actual error message from backend&#10;                        if (errorBody?.contains(&quot;email&quot;) == true) &quot;Invalid email format&quot;&#10;                        else if (errorBody?.contains(&quot;password&quot;) == true) &quot;Password must be at least 8 characters with uppercase, lowercase, number, and special character&quot;&#10;                        else if (errorBody?.contains(&quot;phone&quot;) == true) &quot;Invalid phone number format&quot;&#10;                        else if (errorBody?.contains(&quot;role&quot;) == true) &quot;Invalid role. Must be admin, host, or guard&quot;&#10;                        else &quot;Invalid input data. Please check your information&quot;&#10;                    }&#10;                    409 -&gt; &quot;User already exists with this email&quot;&#10;                    500 -&gt; &quot;Server error. Please try again later&quot;&#10;                    else -&gt; &quot;Signup failed. Please try again&quot;&#10;                }&#10;                emit(AuthResult.Error(errorMessage))&#10;            }&#10;        } catch (e: Exception) {&#10;            // Handle network errors&#10;            val errorMessage = when (e) {&#10;                is java.net.UnknownHostException -&gt; &quot;No internet connection&quot;&#10;                is java.net.SocketTimeoutException -&gt; &quot;Connection timeout&quot;&#10;                else -&gt; e.message ?: &quot;Network error occurred&quot;&#10;            }&#10;            emit(AuthResult.Error(errorMessage))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Logout user and clear stored tokens&#10;     */&#10;    suspend fun logout(): Flow&lt;AuthResult&gt; = flow {&#10;        try {&#10;            println(&quot;DEBUG: Starting logout process&quot;)&#10;            emit(AuthResult.Loading)&#10;&#10;            // Get refresh token for logout request&#10;            val refreshToken = tokenStorage.getRefreshToken().first()&#10;            println(&quot;DEBUG: Retrieved refresh token: ${refreshToken?.take(10)}...&quot;)&#10;            &#10;            if (refreshToken != null) {&#10;                try {&#10;                    val response = authApiService.logout(LogoutRequest(refreshToken))&#10;                    println(&quot;DEBUG: Logout API response: ${response.code()}&quot;)&#10;                } catch (e: Exception) {&#10;                    println(&quot;DEBUG: Logout API failed: ${e.message}&quot;)&#10;                    // Continue with local cleanup even if API fails&#10;                }&#10;            }&#10;            &#10;            // Always clear local tokens regardless of API response&#10;            // This ensures the user is logged out locally&#10;            println(&quot;DEBUG: Clearing all tokens from storage&quot;)&#10;            tokenStorage.clearAll()&#10;            println(&quot;DEBUG: Logout completed successfully&quot;)&#10;            emit(AuthResult.Success(&quot;Logged out successfully&quot;))&#10;            &#10;        } catch (e: Exception) {&#10;            println(&quot;DEBUG: Logout exception: ${e.message}&quot;)&#10;            // Even if logout API fails, clear local tokens&#10;            tokenStorage.clearAll()&#10;            emit(AuthResult.Success(&quot;Logged out successfully&quot;))&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Check if user is currently logged in&#10;     */&#10;    fun isLoggedIn(): Flow&lt;Boolean&gt; = tokenStorage.isLoggedIn()&#10;&#10;    /**&#10;     * Get stored user information&#10;     */&#10;    fun getUserInfo(): Flow&lt;TokenStorage.UserInfo?&gt; = tokenStorage.getUserInfo()&#10;}&#10;&#10;/**&#10; * Sealed class representing authentication operation results&#10; */&#10;sealed class AuthResult {&#10;    object Loading : AuthResult()&#10;    data class Success(val message: String) : AuthResult()&#10;    data class Error(val message: String) : AuthResult()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/di/NetworkModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/di/NetworkModule.kt" />
              <option name="originalContent" value="package com.example.permitely.di&#10;&#10;import android.content.Context&#10;import com.example.permitely.data.network.AuthApiService&#10;import com.example.permitely.data.network.DashboardApiService&#10;import com.example.permitely.data.storage.TokenStorage&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Hilt module for providing network-related dependencies&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    /**&#10;     * Provides HTTP logging interceptor for debugging network requests&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideLoggingInterceptor(): HttpLoggingInterceptor {&#10;        return HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Provides configured OkHttp client with timeouts and logging&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(&#10;        loggingInterceptor: HttpLoggingInterceptor&#10;    ): OkHttpClient {&#10;        return OkHttpClient.Builder()&#10;            .connectTimeout(30, TimeUnit.SECONDS)&#10;            .readTimeout(30, TimeUnit.SECONDS)&#10;            .writeTimeout(30, TimeUnit.SECONDS)&#10;            .addInterceptor(loggingInterceptor)&#10;            .build()&#10;    }&#10;&#10;    /**&#10;     * Provides Retrofit instance configured for the backend API&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;http://10.0.2.2:5500/&quot;) // Changed to emulator localhost&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    /**&#10;     * Provides AuthApiService for authentication endpoints&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthApiService(retrofit: Retrofit): AuthApiService {&#10;        return retrofit.create(AuthApiService::class.java)&#10;    }&#10;&#10;    /**&#10;     * Provides DashboardApiService for dashboard endpoints&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideDashboardApiService(retrofit: Retrofit): DashboardApiService {&#10;        return retrofit.create(DashboardApiService::class.java)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.di&#10;&#10;import android.content.Context&#10;import com.example.permitely.data.network.AuthApiService&#10;import com.example.permitely.data.network.DashboardApiService&#10;import com.example.permitely.data.network.ProfileApiService&#10;import com.example.permitely.data.network.VisitorApiService&#10;import com.example.permitely.data.storage.TokenStorage&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Hilt module for providing network-related dependencies&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    /**&#10;     * Provides HTTP logging interceptor for debugging network requests&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideLoggingInterceptor(): HttpLoggingInterceptor {&#10;        return HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Provides configured OkHttp client with timeouts and logging&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(&#10;        loggingInterceptor: HttpLoggingInterceptor&#10;    ): OkHttpClient {&#10;        return OkHttpClient.Builder()&#10;            .connectTimeout(30, TimeUnit.SECONDS)&#10;            .readTimeout(30, TimeUnit.SECONDS)&#10;            .writeTimeout(30, TimeUnit.SECONDS)&#10;            .addInterceptor(loggingInterceptor)&#10;            .build()&#10;    }&#10;&#10;    /**&#10;     * Provides Retrofit instance configured for the backend API&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;http://10.0.2.2:5500/&quot;) // Changed to emulator localhost&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    /**&#10;     * Provides AuthApiService for authentication endpoints&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthApiService(retrofit: Retrofit): AuthApiService {&#10;        return retrofit.create(AuthApiService::class.java)&#10;    }&#10;&#10;    /**&#10;     * Provides DashboardApiService for dashboard endpoints&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideDashboardApiService(retrofit: Retrofit): DashboardApiService {&#10;        return retrofit.create(DashboardApiService::class.java)&#10;    }&#10;&#10;    /**&#10;     * Provides ProfileApiService for profile endpoints&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideProfileApiService(retrofit: Retrofit): ProfileApiService {&#10;        return retrofit.create(ProfileApiService::class.java)&#10;    }&#10;&#10;    /**&#10;     * Provides VisitorApiService for visitor endpoints&#10;     */&#10;    @Provides&#10;    @Singleton&#10;    fun provideVisitorApiService(retrofit: Retrofit): VisitorApiService {&#10;        return retrofit.create(VisitorApiService::class.java)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/auth/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/auth/LoginScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.auth&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Login&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyButton&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;&#10;/**&#10; * Clean login screen with minimal animations for better performance&#10; */&#10;@Composable&#10;fun LoginScreen(&#10;    onNavigateToSignup: () -&gt; Unit,&#10;    onLoginSuccess: () -&gt; Unit,&#10;    viewModel: AuthViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Animation state for logo only&#10;    var isLogoVisible by remember { mutableStateOf(false) }&#10;&#10;    // Simple gradient background (no animation)&#10;    val backgroundGradient = Brush.verticalGradient(&#10;        colors = listOf(&#10;            Primary.copy(alpha = 0.1f),&#10;            PrimaryLight.copy(alpha = 0.05f),&#10;            Background&#10;        )&#10;    )&#10;&#10;    // Navigate to main app on successful login&#10;    LaunchedEffect(uiState.isSuccess) {&#10;        if (uiState.isSuccess) {&#10;            onLoginSuccess()&#10;            viewModel.resetState()&#10;        }&#10;    }&#10;&#10;    // Trigger logo animation only&#10;    LaunchedEffect(Unit) {&#10;        delay(100)&#10;        isLogoVisible = true&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(backgroundGradient)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(80.dp))&#10;&#10;            // Floating logo animation (kept as requested)&#10;            AnimatedVisibility(&#10;                visible = isLogoVisible,&#10;                enter = slideInVertically(&#10;                    initialOffsetY = { -it },&#10;                    animationSpec = spring(dampingRatio = Spring.DampingRatioMediumBouncy)&#10;                ) + fadeIn()&#10;            ) {&#10;                ModernLogoCard()&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;&#10;            // Simple welcome text (no animation)&#10;            Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                Text(&#10;                    text = &quot;Welcome Back&quot;,&#10;                    style = MaterialTheme.typography.displaySmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = &quot;Sign in to continue your journey&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = TextSecondary,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            // Form fields without animations for better performance&#10;            PermitelyTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = &quot;Email Address&quot;,&#10;                keyboardType = KeyboardType.Email,&#10;                isError = uiState.errorMessage != null,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            PermitelyTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = &quot;Password&quot;,&#10;                isPassword = true,&#10;                keyboardType = KeyboardType.Password,&#10;                isError = uiState.errorMessage != null,&#10;                errorMessage = uiState.errorMessage,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Login button with good loader&#10;            PermitelyButton(&#10;                text = &quot;Sign In&quot;,&#10;                onClick = {&#10;                    viewModel.clearError()&#10;                    // Check for demo credentials first&#10;                    if ((email == &quot;test@test.com&quot; &amp;&amp; password == &quot;Test@1234&quot;) ||&#10;                        (email == &quot;demo@permitely.com&quot; &amp;&amp; password == &quot;Demo@123&quot;)) {&#10;                        // Demo login - bypass backend&#10;                        onLoginSuccess()&#10;                    } else {&#10;                        // Regular login with backend&#10;                        viewModel.login(email, password)&#10;                    }&#10;                },&#10;                loading = uiState.isLoading,&#10;                enabled = email.isNotBlank() &amp;&amp; password.isNotBlank()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Minimalist Guest Login Button&#10;            OutlinedButton(&#10;                onClick = { onLoginSuccess() },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.outlinedButtonColors(&#10;                    contentColor = Success&#10;                ),&#10;                border = ButtonDefaults.outlinedButtonBorder.copy(&#10;                    brush = Brush.horizontalGradient(&#10;                        colors = listOf(Success, Success.copy(alpha = 0.8f))&#10;                    )&#10;                ),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Login,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(18.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Continue as Guest&quot;,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Simple forgot password link&#10;            TextButton(&#10;                onClick = { /* Handle forgot password */ }&#10;            ) {&#10;                Text(&#10;                    text = &quot;Forgot Password?&quot;,&#10;                    color = Primary,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Simple signup prompt&#10;            ModernSignupPrompt(onNavigateToSignup)&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ModernLogoCard() {&#10;    Card(&#10;        modifier = Modifier.size(120.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = SurfaceVariant&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 12.dp),&#10;        shape = CircleShape&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    Brush.radialGradient(&#10;                        colors = listOf(Primary, PrimaryLight),&#10;                        radius = 120f&#10;                    )&#10;                ),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Login&quot;,&#10;                tint = OnPrimary,&#10;                modifier = Modifier.size(60.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ModernSignupPrompt(onNavigateToSignup: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = SurfaceVariant.copy(alpha = 0.5f)&#10;        ),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.Center,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Don't have an account? &quot;,&#10;                color = TextSecondary,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            TextButton(&#10;                onClick = onNavigateToSignup&#10;            ) {&#10;                Text(&#10;                    text = &quot;Sign Up&quot;,&#10;                    color = Primary,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.auth&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Login&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.ui.common.PermitelyButton&#10;import com.example.permitely.ui.common.PermitelyTextField&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;&#10;/**&#10; * Clean login screen with minimal animations for better performance&#10; */&#10;@Composable&#10;fun LoginScreen(&#10;    onNavigateToSignup: () -&gt; Unit,&#10;    onLoginSuccess: () -&gt; Unit,&#10;    viewModel: AuthViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Animation state for logo only&#10;    var isLogoVisible by remember { mutableStateOf(false) }&#10;&#10;    // Simple gradient background (no animation)&#10;    val backgroundGradient = Brush.verticalGradient(&#10;        colors = listOf(&#10;            Primary.copy(alpha = 0.1f),&#10;            PrimaryLight.copy(alpha = 0.05f),&#10;            Background&#10;        )&#10;    )&#10;&#10;    // Navigate to main app on successful login&#10;    LaunchedEffect(uiState.isSuccess) {&#10;        if (uiState.isSuccess) {&#10;            println(&quot;DEBUG: LoginScreen detected success, calling onLoginSuccess&quot;)&#10;            onLoginSuccess()&#10;            // Don't reset state here - let MainActivity handle it to avoid race conditions&#10;        }&#10;    }&#10;&#10;    // Trigger logo animation only&#10;    LaunchedEffect(Unit) {&#10;        delay(100)&#10;        isLogoVisible = true&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(backgroundGradient)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(80.dp))&#10;&#10;            // Floating logo animation (kept as requested)&#10;            AnimatedVisibility(&#10;                visible = isLogoVisible,&#10;                enter = slideInVertically(&#10;                    initialOffsetY = { -it },&#10;                    animationSpec = spring(dampingRatio = Spring.DampingRatioMediumBouncy)&#10;                ) + fadeIn()&#10;            ) {&#10;                ModernLogoCard()&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;&#10;            // Simple welcome text (no animation)&#10;            Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                Text(&#10;                    text = &quot;Welcome Back&quot;,&#10;                    style = MaterialTheme.typography.displaySmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Text(&#10;                    text = &quot;Sign in to continue your journey&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = TextSecondary,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            // Form fields without animations for better performance&#10;            PermitelyTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = &quot;Email Address&quot;,&#10;                keyboardType = KeyboardType.Email,&#10;                isError = uiState.errorMessage != null,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            PermitelyTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = &quot;Password&quot;,&#10;                isPassword = true,&#10;                keyboardType = KeyboardType.Password,&#10;                isError = uiState.errorMessage != null,&#10;                errorMessage = uiState.errorMessage,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Login button with good loader&#10;            PermitelyButton(&#10;                text = &quot;Sign In&quot;,&#10;                onClick = {&#10;                    viewModel.clearError()&#10;                    // Check for demo credentials first&#10;                    if ((email == &quot;test@test.com&quot; &amp;&amp; password == &quot;Test@1234&quot;) ||&#10;                        (email == &quot;demo@permitely.com&quot; &amp;&amp; password == &quot;Demo@123&quot;)) {&#10;                        // Demo login - bypass backend&#10;                        onLoginSuccess()&#10;                    } else {&#10;                        // Regular login with backend&#10;                        viewModel.login(email, password)&#10;                    }&#10;                },&#10;                loading = uiState.isLoading,&#10;                enabled = email.isNotBlank() &amp;&amp; password.isNotBlank()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Minimalist Guest Login Button&#10;            OutlinedButton(&#10;                onClick = { onLoginSuccess() },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.outlinedButtonColors(&#10;                    contentColor = Success&#10;                ),&#10;                border = ButtonDefaults.outlinedButtonBorder.copy(&#10;                    brush = Brush.horizontalGradient(&#10;                        colors = listOf(Success, Success.copy(alpha = 0.8f))&#10;                    )&#10;                ),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Login,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(18.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Continue as Guest&quot;,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Simple forgot password link&#10;            TextButton(&#10;                onClick = { /* Handle forgot password */ }&#10;            ) {&#10;                Text(&#10;                    text = &quot;Forgot Password?&quot;,&#10;                    color = Primary,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Simple signup prompt&#10;            ModernSignupPrompt(onNavigateToSignup)&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ModernLogoCard() {&#10;    Card(&#10;        modifier = Modifier.size(120.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = SurfaceVariant&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 12.dp),&#10;        shape = CircleShape&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    Brush.radialGradient(&#10;                        colors = listOf(Primary, PrimaryLight),&#10;                        radius = 120f&#10;                    )&#10;                ),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Person,&#10;                contentDescription = &quot;Login&quot;,&#10;                tint = OnPrimary,&#10;                modifier = Modifier.size(60.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ModernSignupPrompt(onNavigateToSignup: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = SurfaceVariant.copy(alpha = 0.5f)&#10;        ),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.Center,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Don't have an account? &quot;,&#10;                color = TextSecondary,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            TextButton(&#10;                onClick = onNavigateToSignup&#10;            ) {&#10;                Text(&#10;                    text = &quot;Sign Up&quot;,&#10;                    color = Primary,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>