<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/guard/GuardDashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/guard/GuardDashboardScreen.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.guard&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.ui.common.PermitelyProfileAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;&#10;/**&#10; * Guard Dashboard Screen - Main landing page for guards&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GuardDashboardScreen(&#10;    onScanPass: () -&gt; Unit = {},&#10;    onCreateVisitor: () -&gt; Unit = {},&#10;    onViewNotifications: () -&gt; Unit = {},&#10;    onViewProfile: () -&gt; Unit = {},&#10;    viewModel: GuardDashboardViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior()&#10;&#10;    // Handle refresh function&#10;    fun refresh() {&#10;        viewModel.refresh()&#10;    }&#10;&#10;    // Show error snackbar if there's an error&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyProfileAppBar(&#10;                title = &quot;Guard Dashboard&quot;,&#10;                subtitle = &quot;&quot;,&#10;                userName = uiState.userName,&#10;                userRole = &quot;Guard&quot;,&#10;                onProfileClick = onViewProfile,&#10;                onNotificationClick = onViewNotifications,&#10;                notificationCount = 5, // Make this dynamic based on actual notifications&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(Background)&#10;                    .padding(paddingValues)&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    // Refresh button&#10;                    item {&#10;                        if (uiState.isLoading) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = Surface)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    horizontalArrangement = Arrangement.Center,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        modifier = Modifier.size(20.dp),&#10;                                        color = Primary,&#10;                                        strokeWidth = 2.dp&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = &quot;Loading dashboard...&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = TextSecondary&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        if (uiState.error != null) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = ErrorLight.copy(alpha = 0.1f))&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Error,&#10;                                        contentDescription = &quot;Error&quot;,&#10;                                        tint = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = uiState.error ?: &quot;Unknown error&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Quick Actions Section (2 cards: Scan QR, Create Visitor)&#10;                    item {&#10;                        QuickActionsSection(&#10;                            onScanPass = onScanPass,&#10;                            onCreateVisitor = onCreateVisitor&#10;                        )&#10;                    }&#10;&#10;                    // Stats Cards Section (3 cards in a row)&#10;                    item {&#10;                        StatsSection(uiState = uiState)&#10;                    }&#10;&#10;                    // Bottom spacing&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;/**&#10; * Quick Actions Section - 2x2 grid of large action cards&#10; */&#10;@Composable&#10;private fun QuickActionsSection(&#10;    onScanPass: () -&gt; Unit,&#10;    onCreateVisitor: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Actions&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // 2x2 Grid for actions&#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // First row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                ActionCard(&#10;                    title = &quot;Scan Pass&quot;,&#10;                    subtitle = &quot;Verify visitor passes&quot;,&#10;                    icon = Icons.Default.QrCodeScanner,&#10;                    gradient = Brush.linearGradient(&#10;                        colors = listOf(Primary, PrimaryLight)&#10;                    ),&#10;                    onClick = onScanPass,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                ActionCard(&#10;                    title = &quot;Create Visitor&quot;,&#10;                    subtitle = &quot;Add new visitor&quot;,&#10;                    icon = Icons.Default.PersonAdd,&#10;                    gradient = Brush.linearGradient(&#10;                        colors = listOf(Secondary, SecondaryLight)&#10;                    ),&#10;                    onClick = onCreateVisitor,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Stats Section - Top strip with 3 stats cards in a row&#10; */&#10;@Composable&#10;private fun StatsSection(uiState: DashboardStatsUiState) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Today's Stats&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // 3 stats cards in a row&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Approved Today&quot;,&#10;                value = uiState.approved.toString(),&#10;                icon = Icons.Default.CheckCircle,&#10;                backgroundColor = Success.copy(alpha = 0.1f),&#10;                iconColor = Success,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Pending Today&quot;,&#10;                value = uiState.pending.toString(),&#10;                icon = Icons.Default.Schedule,&#10;                backgroundColor = Warning.copy(alpha = 0.1f),&#10;                iconColor = Warning,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Expired Today&quot;,&#10;                value = uiState.expired.toString(),&#10;                icon = Icons.Default.AccessTime,&#10;                backgroundColor = Error.copy(alpha = 0.1f),&#10;                iconColor = Error,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Stats Card Component - Pill-shaped card for daily stats&#10; */&#10;@Composable&#10;private fun StatsCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    backgroundColor: Color,&#10;    iconColor: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .height(80.dp),&#10;        colors = CardDefaults.cardColors(containerColor = backgroundColor),&#10;        shape = RoundedCornerShape(20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column {&#10;                Text(&#10;                    text = value,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = iconColor,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Action Card Component - Large card for quick actions&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun ActionCard(&#10;    title: String,&#10;    subtitle: String,&#10;    icon: ImageVector,&#10;    gradient: Brush,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier&#10;            .height(120.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.Transparent),&#10;        shape = RoundedCornerShape(16.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(gradient)&#10;                .padding(16.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(32.dp)&#10;                )&#10;                Column {&#10;                    Text(&#10;                        text = title,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        color = Color.White,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = subtitle,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Color.White.copy(alpha = 0.9f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.guard&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.ui.common.PermitelyProfileAppBar&#10;import com.example.permitely.ui.theme.*&#10;import kotlinx.coroutines.delay&#10;&#10;/**&#10; * Guard Dashboard Screen - Main landing page for guards&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GuardDashboardScreen(&#10;    onScanPass: () -&gt; Unit = {},&#10;    onCreateVisitor: () -&gt; Unit = {},&#10;    onViewNotifications: () -&gt; Unit = {},&#10;    onViewProfile: () -&gt; Unit = {},&#10;    viewModel: GuardDashboardViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior()&#10;&#10;    // Handle refresh function&#10;    fun refresh() {&#10;        viewModel.refresh()&#10;    }&#10;&#10;    // Show error snackbar if there's an error&#10;    if (uiState.error != null) {&#10;        LaunchedEffect(uiState.error) {&#10;            delay(3000)&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            PermitelyProfileAppBar(&#10;                title = &quot;Guard Dashboard&quot;,&#10;                subtitle = &quot;&quot;,&#10;                userName = uiState.userName,&#10;                userRole = &quot;Guard&quot;,&#10;                onProfileClick = onViewProfile,&#10;                onNotificationClick = onViewNotifications,&#10;                notificationCount = 5, // Make this dynamic based on actual notifications&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        content = { paddingValues -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .background(Background)&#10;                    .padding(paddingValues)&#10;            ) {&#10;                LazyColumn(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    // Refresh button&#10;                    item {&#10;                        if (uiState.isLoading) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = Surface)&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    horizontalArrangement = Arrangement.Center,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        modifier = Modifier.size(20.dp),&#10;                                        color = Primary,&#10;                                        strokeWidth = 2.dp&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = &quot;Loading dashboard...&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = TextSecondary&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        if (uiState.error != null) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(containerColor = ErrorLight.copy(alpha = 0.1f))&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Error,&#10;                                        contentDescription = &quot;Error&quot;,&#10;                                        tint = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                    Text(&#10;                                        text = uiState.error ?: &quot;Unknown error&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Quick Actions Section (2 cards: Scan QR, Create Visitor)&#10;                    item {&#10;                        QuickActionsSection(&#10;                            onScanPass = onScanPass,&#10;                            onCreateVisitor = onCreateVisitor&#10;                        )&#10;                    }&#10;&#10;                    // Stats Cards Section (3 cards in a row)&#10;                    item {&#10;                        StatsSection(uiState = uiState)&#10;                    }&#10;&#10;                    // Bottom spacing&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(32.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;/**&#10; * Quick Actions Section - 2x2 grid of large action cards&#10; */&#10;@Composable&#10;private fun QuickActionsSection(&#10;    onScanPass: () -&gt; Unit,&#10;    onCreateVisitor: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Quick Actions&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // 2x2 Grid for actions&#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // First row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                ActionCard(&#10;                    title = &quot;Scan Pass&quot;,&#10;                    subtitle = &quot;Verify visitor passes&quot;,&#10;                    icon = Icons.Default.QrCodeScanner,&#10;                    gradient = Brush.linearGradient(&#10;                        colors = listOf(Primary, PrimaryLight)&#10;                    ),&#10;                    onClick = onScanPass,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                ActionCard(&#10;                    title = &quot;Create Visitor&quot;,&#10;                    subtitle = &quot;Add new visitor&quot;,&#10;                    icon = Icons.Default.PersonAdd,&#10;                    gradient = Brush.linearGradient(&#10;                        colors = listOf(Secondary, SecondaryLight)&#10;                    ),&#10;                    onClick = onCreateVisitor,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Stats Section - 3 stats cards showing today's visitor information&#10; */&#10;@Composable&#10;private fun StatsSection(uiState: DashboardStatsUiState) {&#10;    Column {&#10;        Text(&#10;            text = &quot;Today's Stats&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            color = TextPrimary,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // 3 stats cards in a row&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            StatsCard(&#10;                title = &quot;Total Visitors&quot;,&#10;                value = uiState.totalVisitors.toString(),&#10;                icon = Icons.Default.People,&#10;                backgroundColor = Primary.copy(alpha = 0.1f),&#10;                iconColor = Primary,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Approved Visitors&quot;,&#10;                value = uiState.approved.toString(),&#10;                icon = Icons.Default.CheckCircle,&#10;                backgroundColor = Success.copy(alpha = 0.1f),&#10;                iconColor = Success,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatsCard(&#10;                title = &quot;Pending Visitors&quot;,&#10;                value = uiState.pending.toString(),&#10;                icon = Icons.Default.Schedule,&#10;                backgroundColor = Warning.copy(alpha = 0.1f),&#10;                iconColor = Warning,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Stats Card Component - Pill-shaped card for daily stats&#10; */&#10;@Composable&#10;private fun StatsCard(&#10;    title: String,&#10;    value: String,&#10;    icon: ImageVector,&#10;    backgroundColor: Color,&#10;    iconColor: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .height(80.dp),&#10;        colors = CardDefaults.cardColors(containerColor = backgroundColor),&#10;        shape = RoundedCornerShape(20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column {&#10;                Text(&#10;                    text = value,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = TextPrimary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = TextSecondary&#10;                )&#10;            }&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = iconColor,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Action Card Component - Large card for quick actions&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun ActionCard(&#10;    title: String,&#10;    subtitle: String,&#10;    icon: ImageVector,&#10;    gradient: Brush,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = modifier&#10;            .height(120.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.Transparent),&#10;        shape = RoundedCornerShape(16.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(gradient)&#10;                .padding(16.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(32.dp)&#10;                )&#10;                Column {&#10;                    Text(&#10;                        text = title,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        color = Color.White,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = subtitle,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Color.White.copy(alpha = 0.9f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/guard/GuardDashboardViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/permitely/ui/guard/GuardDashboardViewModel.kt" />
              <option name="originalContent" value="package com.example.permitely.ui.guard&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.data.repository.DashboardRepository&#10;import com.example.permitely.data.storage.TokenStorage&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for Guard Dashboard Screen&#10; * Manages guard dashboard statistics and UI state&#10; */&#10;@HiltViewModel&#10;class GuardDashboardViewModel @Inject constructor(&#10;    private val dashboardRepository: DashboardRepository,&#10;    private val tokenStorage: TokenStorage&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(DashboardStatsUiState())&#10;    val uiState: StateFlow&lt;DashboardStatsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadDashboardData()&#10;    }&#10;&#10;    /**&#10;     * Load guard dashboard statistics and user info&#10;     */&#10;    private fun loadDashboardData() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            try {&#10;                // Load user info from storage&#10;                val userInfo = tokenStorage.getUserInfo()&#10;&#10;                // Load dashboard stats from API&#10;                dashboardRepository.getDashboardStats().collect { result -&gt;&#10;                    result.fold(&#10;                        onSuccess = { stats -&gt;&#10;                            _uiState.value = _uiState.value.copy(&#10;                                totalVisitors = stats.totalVisitors,&#10;                                approved = stats.approved,&#10;                                pending = stats.pending,&#10;                                rejected = stats.rejected,&#10;                                expired = stats.expired,&#10;                                userName = userInfo?.name ?: &quot;Guard&quot;,&#10;                                userEmail = userInfo?.email ?: &quot;&quot;,&#10;                                userRole = &quot;Guard&quot;,&#10;                                isLoading = false,&#10;                                error = null&#10;                            )&#10;                        },&#10;                        onFailure = { error -&gt;&#10;                            _uiState.value = _uiState.value.copy(&#10;                                userName = userInfo?.name ?: &quot;Guard&quot;,&#10;                                userEmail = userInfo?.email ?: &quot;&quot;,&#10;                                userRole = &quot;Guard&quot;,&#10;                                isLoading = false,&#10;                                error = error.message&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = e.message ?: &quot;Failed to load dashboard data&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Refresh dashboard data&#10;     */&#10;    fun refresh() {&#10;        loadDashboardData()&#10;    }&#10;&#10;    /**&#10;     * Clear error state&#10;     */&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.permitely.ui.guard&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.permitely.data.models.DashboardStatsUiState&#10;import com.example.permitely.data.repository.DashboardRepository&#10;import com.example.permitely.data.storage.TokenStorage&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for Guard Dashboard Screen&#10; * Manages guard dashboard statistics and UI state&#10; */&#10;@HiltViewModel&#10;class GuardDashboardViewModel @Inject constructor(&#10;    private val dashboardRepository: DashboardRepository,&#10;    private val tokenStorage: TokenStorage&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(DashboardStatsUiState())&#10;    val uiState: StateFlow&lt;DashboardStatsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadDashboardData()&#10;    }&#10;&#10;    /**&#10;     * Load guard dashboard statistics and user info&#10;     */&#10;    private fun loadDashboardData() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            // Load user info from storage (Flow-based)&#10;            tokenStorage.getUserInfo().collect { userInfo -&gt;&#10;                _uiState.value = _uiState.value.copy(&#10;                    userName = userInfo?.name ?: &quot;Guard&quot;,&#10;                    userEmail = userInfo?.email ?: &quot;&quot;,&#10;                    userRole = &quot;Guard&quot;&#10;                )&#10;            }&#10;        }&#10;&#10;        // Load dashboard stats separately&#10;        loadDashboardStats()&#10;    }&#10;&#10;    /**&#10;     * Load dashboard statistics from the API&#10;     */&#10;    private fun loadDashboardStats() {&#10;        viewModelScope.launch {&#10;            try {&#10;                dashboardRepository.getDashboardStats().collect { result -&gt;&#10;                    result.fold(&#10;                        onSuccess = { stats -&gt;&#10;                            _uiState.value = _uiState.value.copy(&#10;                                totalVisitors = stats.totalVisitors,&#10;                                approved = stats.approved,&#10;                                pending = stats.pending,&#10;                                rejected = stats.rejected,&#10;                                expired = stats.expired,&#10;                                isLoading = false,&#10;                                error = null&#10;                            )&#10;                        },&#10;                        onFailure = { error -&gt;&#10;                            _uiState.value = _uiState.value.copy(&#10;                                isLoading = false,&#10;                                error = error.message ?: &quot;Failed to load dashboard stats&quot;&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = e.message ?: &quot;Failed to load dashboard data&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Refresh dashboard data&#10;     */&#10;    fun refresh() {&#10;        loadDashboardData()&#10;    }&#10;&#10;    /**&#10;     * Clear error state&#10;     */&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>